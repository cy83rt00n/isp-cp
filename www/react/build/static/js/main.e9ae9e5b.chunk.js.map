{"version":3,"sources":["Issues.js","IspCpConfig.js","Options.js","models/Term.js","Terms.js","SignIn.js","App.js","serviceWorker.js","index.js"],"names":["issusesInstance","IspCpConfig","props","ApiProtocol","ApiHost","ApiPort","ApiUrlPrefix","LoggedIn","axios","get","this","ApiRequest","then","response","setLoggedIn","data","value","path","indexOf","IspCpHelper","params","window","location","search","substr","split","console","log","pairs","forEach","param","push","config","he","require","formStyles","React","Component","makeStyles","theme","modal","display","alignItems","justifyContent","paper","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","IssueForm","classes","useState","open","setOpen","handleClose","Button","onClick","color","variant","Modal","aria-labelledby","aria-describedby","closeAfterTransition","onClose","className","onSubmit","event","preventDefault","target","comment_new","url","result","callUpdate","id","TextField","label","defaultValue","margin","name","type","AddressList","addrSelected","selectedId","apiPath","setState","address","state","houses","flats","term","children","selectedAddress","selectedHouse","selectedFlat","forceUpdate","catch","reason","houseSelected","flatSelected","bind","startsWith","length","NativeSelect","onChange","map","child","key","data-slug","slugify","title","Term","slug","parentId","TermsListItem","ListItem","Link","to","component","RLink","data-delete","TermsForm","Input","FormControl","InputLabel","shrink","htmlFor","inputProps","data-create","size","Copyright","Typography","align","href","Date","getFullYear","useStyles","makeSignInStyles","body","common","white","marginTop","flexDirection","avatar","secondary","main","form","width","submit","SignIn","Container","maxWidth","CssBaseline","Avatar","noValidate","required","fullWidth","autoComplete","autoFocus","FormControlLabel","control","Checkbox","Grid","container","item","xs","Box","mt","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e9ae9e5b.chunk.js","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport {IspCpConfig} from \"./IspCpConfig\";\nimport Button from \"@material-ui/core/Button\";\nimport Paper from \"@material-ui/core/Paper\";\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\nimport TextField from '@material-ui/core/TextField';\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport NativeSelect from '@material-ui/core/NativeSelect';\nimport {slugify} from 'transliteration';\nimport Modal from '@material-ui/core/Modal';\nimport { makeStyles } from '@material-ui/core/styles';\n\n\nvar he = require('he');\n\nvar issusesInstance;\n\nexport default class Issues extends React.Component {\n    updateTimeout = 10000;\n    modalFormOpen = true;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            success: false,\n            data   : []\n        };\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.componentDidMount = this.componentDidMount.bind(this);\n        issusesInstance = this;\n    }\n\n    callUpdate()\n    {\n        this.componentDidMount();\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        console.log(event.currentTarget);\n        window.Target = event.currentTarget;\n        // if (event.currentTarget.dataset.report) {\n        //     var issueForm = document.querySelector(\"form#issue-report\");\n        //     console.log(\"Report : \" + issueForm.comment.value);\n        //     this.reportIssue(issueForm.comment.value);\n        // }\n        if (event.currentTarget.dataset.update) {\n            // var issueForm = document.querySelector(\"form#issue-edit-\" + event.currentTarget.dataset.update);\n            console.log(\"Udate \" + event.currentTarget.dataset.update);\n            // window.issueForm = issueForm;\n            const comment = document.querySelector(\"#comment-\" + event.currentTarget.dataset.update).value;\n            this.updateIssue(event.currentTarget.dataset.update, comment);\n        }\n        if (event.currentTarget.dataset.resolve) {\n            // var issueForm = document.querySelector(\"form#issue-edit-\" + event.currentTarget.dataset.resolve);\n            console.log(\"Resolve \" + event.currentTarget.dataset.resolve);\n            this.resolveIssue(event.currentTarget.dataset.resolve);\n        }\n    }\n\n    resolveIssue(id) {\n        let url = IspCpConfig.ApiRequest(\"/issues/resolve/\" + id);\n        axios.get(url).then(\n            result => {\n                this.componentDidMount()\n            }\n        );\n    }\n\n    updateIssue(id, comment) {\n        let url = IspCpConfig.ApiRequest(\"/issues/update/\" + id + \"?comment=\" + comment);\n        axios.get(url).then(\n            result => {\n                this.componentDidMount()\n            }\n        );\n    }\n\n\n    componentDidMount() {\n        let apiPath = IspCpConfig.ApiRequest(\"/issues/\");\n        let location = this.props.location.pathname;\n        if (location.startsWith(\"/issues/\") && location.length > \"/issues/\".length) {\n            apiPath = IspCpConfig.ApiRequest(location);\n        }\n\n        axios.get(apiPath)\n             .then(\n                 result => {\n                     this.setState({\n                         success: result.data.success,\n                         data   : result.data.index\n                     });\n                     // console.log(result);\n                 }\n             )\n    }\n\n\n    render() {\n        if (this.state.success) {\n            const data = JSON.parse(this.state.data);\n            // setTimeout(this.componentDidMount, this.updateTimeout);\n            return (\n                <Paper>\n                    <Table>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>Issue</TableCell>\n                                <TableCell>Reported </TableCell>\n                                <TableCell>Resolved</TableCell>\n                                <TableCell>Address</TableCell>\n                                <TableCell>Comment</TableCell>\n                                <TableCell>\n                                    <IssueForm/>\n                                </TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>{data.map(issue =>\n                            <TableRow key={\"issue-\" + issue.id}>\n                                <TableCell>{issue.id}</TableCell>\n                                <TableCell>{new Date(parseInt(issue.report_date) * 1000).toLocaleDateString()}</TableCell>\n                                <TableCell>\n                                    {\n                                        (issue.resolve_date > 0)\n                                            ? new Date(parseInt(issue.resolve_date) * 1000).toLocaleDateString()\n                                            : ''\n                                    }\n                                </TableCell>\n                                <TableCell>\n                                    <AddressList location={\"/terms/15\"} id={\"address-\" + issue.id} value={0}/>\n                                </TableCell>\n                                <TableCell>\n                                    <TextField\n                                        label=\"Комментарий\"\n                                        id={\"comment-\" + issue.id}\n                                        defaultValue={issue.comment ? he.decode(issue.comment) : ''}\n                                        margin=\"normal\"\n                                        variant=\"outlined\"\n                                    /></TableCell>\n                                <TableCell>\n                                    <ButtonGroup size=\"small\">\n                                        <Button type=\"button\" onClick={this.handleSubmit} data-update={issue.id}\n                                                color=\"primary\">\n                                            UPDATE\n                                        </Button>\n                                        <Button type=\"button\" onClick={this.handleSubmit} data-resolve={issue.id}\n                                                color=\"secondary\">\n                                            RESOLVE\n                                        </Button>\n                                    </ButtonGroup>\n                                </TableCell>\n                            </TableRow>\n                        )}\n                        </TableBody>\n                    </Table>\n                </Paper>\n            );\n        }\n        return ('');\n    }\n}\n\nconst formStyles = makeStyles(theme => ({\n    modal: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    paper: {\n        backgroundColor: theme.palette.background.paper,\n        border: '2px solid #000',\n        boxShadow: theme.shadows[5],\n        padding: theme.spacing(2, 4, 3),\n    },\n}));\n\nfunction IssueForm() {\n\n    const classes = formStyles();\n    const [open, setOpen] = React.useState(false);\n\n    const handleClose = () => {\n        setOpen(false);\n    }\n\n    const handleOpen = () => {\n        setOpen(true);\n    }\n\n    const reportIssue = (event) => {\n        event.preventDefault();\n        console.log(event.target.comment_new.value);\n        let url = IspCpConfig.ApiRequest(\"/issues/report/?comment=\" + event.target.comment_new.value);\n        axios.get(url).then(\n            result => {\n                handleClose();\n                issusesInstance.callUpdate();\n            }\n        );\n    }\n\n    return (\n        <div>\n            <Button onClick={handleOpen} color=\"secondary\" variant={\"outlined\"}>REPORT</Button>\n            <Modal\n                aria-labelledby=\"transition-modal-title\"\n                aria-describedby=\"transition-modal-description\"\n                open={open}\n                closeAfterTransition\n                onClose={handleClose}\n                className={classes.modal}\n            >\n\n                <form className={classes.paper} onSubmit={reportIssue}>\n                    <h2 id=\"transition-modal-title\">REPORT ISSUE</h2>\n                    <div>\n                        <AddressList location={\"/terms/1\"} id={\"address-new\"} value={0}/>\n                    </div>\n                    <div>\n                        <TextField\n                            label=\"Комментарий\"\n                            id={\"transition-modal-description\"}\n                            defaultValue={\"\"}\n                            margin=\"normal\"\n                            variant=\"outlined\"\n                            name={\"comment_new\"}\n                        />\n                        <Button type=\"submit\" color=\"secondary\" variant={\"outlined\"}>REPORT</Button>\n                    </div>\n                </form>\n            </Modal>\n        </div>\n    );\n\n};\n\nclass AddressList extends React.Component {\n\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            address: {term:{id:0},children:[]},\n            houses: {term:{id:0},children:[]},\n            flats: {term:{id:0},children:[]},\n            selectedAddress:0,\n            selectedHouse:0,\n            selectedFlat:0\n        };\n        this.apiPath = IspCpConfig.ApiRequest(\"/terms/\");\n        this.location = props.location;\n        this.addrSelected = this.addrSelected.bind(this);\n    }\n\n    componentDidMount() {\n\n        if (this.location.startsWith(\"/terms/\") && this.location.length > \"/terms/\".length) {\n            this.apiPath = IspCpConfig.ApiRequest(this.location);\n        }\n\n        axios.get(this.apiPath)\n             .then(\n                 result => {\n                     this.setState({\n                         address: result.data,\n                         houses: {term:{id:0},children:[]},\n                         flats: {term:{id:0},children:[]},\n                         selectedAddress: result.data.term.id,\n                         selectedHouse:0,\n                         selectedFlat:0\n                     });\n                 }\n             )\n             .catch(reason => {\n                 console.log(\"Axios error: \" + reason)\n             })\n        ;\n    }\n\n    addrSelected = (event) => {\n        console.log(event.target.value);\n        var selectedId = event.target.value;\n        var apiPath = IspCpConfig.ApiRequest(\"/terms/\" + selectedId);\n        axios.get(apiPath)\n             .then(\n                 result => {\n                     this.setState({\n                         address: this.state.address,\n                         houses: result.data,\n                         flats: {term:{id:0},children:[]},\n                         selectedAddress: selectedId,\n                         selectedHouse:0,\n                         selectedFlat:0\n                     });\n                     this.forceUpdate();\n                 }\n             )\n             .catch(reason => {\n                 console.log(\"Axios error: \" + reason)\n             })\n        ;\n\n    }\n\n    houseSelected = (event) => {\n        console.log(event.target.value);\n        var selectedId = event.target.value;\n        var apiPath = IspCpConfig.ApiRequest(\"/terms/\" + selectedId);\n        axios.get(apiPath)\n             .then(\n                 result => {\n                     this.setState({\n                         address: this.state.address,\n                         houses: this.state.houses,\n                         flats: result.data,\n                         selectedAddress: this.state.selectedAddress,\n                         selectedHouse:selectedId,\n                         selectedFlat:0\n                     });\n                     this.forceUpdate();\n                 }\n             )\n             .catch(reason => {\n                 console.log(\"Axios error: \" + reason)\n             })\n        ;\n\n    }\n\n    flatSelected = (event) => {\n        console.log(event.target.value);\n        var selectedId = event.target.value;\n        this.setState({\n            address: this.state.address,\n            houses: this.state.houses,\n            flats: this.state.flats,\n            selectedAddress: this.state.selectedAddress,\n            selectedHouse:this.state.selectedHouse,\n            selectedFlat:selectedId\n        });\n        this.forceUpdate();\n\n    }\n\n    render() {\n        console.log(this.state);\n        return (\n            <div>\n            <NativeSelect\n                id={this.props.id}\n                value={this.state.selectedAddress}\n                onChange={this.addrSelected}\n            >\n                <option value={0}>Улица</option>\n                {this.state.address.children.map(child =>\n                    <option key={child.id} value={child.id} data-slug={slugify(child.title)}>{child.title}</option>\n                )}\n            </NativeSelect>\n                <NativeSelect\n                    id={this.props.id + \"-houses\"}\n                    value={this.state.selectedHouse}\n                    onChange={this.houseSelected}\n                >\n                    <option value={0}>Дом</option>\n                    {this.state.houses.children.map(child =>\n                        <option key={child.id} value={child.id} data-slug={slugify(child.title)}>{child.title}</option>\n                    )}\n                </NativeSelect>\n                <NativeSelect\n                    id={this.props.id + \"flats\"}\n                    value={this.state.selectedFlat}\n                    onChange={this.flatSelected}\n                >\n                    <option value={0}>Квартира</option>\n                    {this.state.flats.children.map(child =>\n                        <option key={child.id} value={child.id} data-slug={slugify(child.title)}>{child.title}</option>\n                    )}\n                </NativeSelect>\n            </div>\n        );\n    }\n}\n\nclass HousesList extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            term    : {},\n            children: []\n        };\n        this.apiPath = IspCpConfig.ApiRequest(\"/terms/\");\n        this.location = props.location;\n    }\n\n    componentDidMount() {\n\n        if (this.location.startsWith(\"/terms/\") && this.location.length > \"/terms/\".length) {\n            this.apiPath = IspCpConfig.ApiRequest(this.location);\n        }\n\n        axios.get(this.apiPath)\n             .then(\n                 result => {\n                     console.log(result);\n                     this.setState({\n                         term    : result.data.term,\n                         children: result.data.children\n                     });\n                 }\n             )\n             .catch(reason => {\n                 console.log(\"Axios error: \" + reason)\n             })\n        ;\n    }\n\n    render() {\n        return (\n            <NativeSelect\n                id={this.props.id}\n                value={this.props.value}\n            >\n                {this.state.children.map(child =>\n                    <option key={child.id} value={child.id} data-slug={slugify(child.title)}>{child.title}</option>\n                )}\n            </NativeSelect>\n        );\n    }\n}\n\nclass ApartmentsList extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            term    : {},\n            children: []\n        };\n        this.apiPath = IspCpConfig.ApiRequest(\"/terms/\");\n        this.location = props.location;\n    }\n\n    componentDidMount() {\n\n        if (this.location.startsWith(\"/terms/\") && this.location.length > \"/terms/\".length) {\n            this.apiPath = IspCpConfig.ApiRequest(this.location);\n        }\n\n        axios.get(this.apiPath)\n             .then(\n                 result => {\n                     console.log(result);\n                     this.setState({\n                         term    : result.data.term,\n                         children: result.data.children\n                     });\n                 }\n             )\n             .catch(reason => {\n                 console.log(\"Axios error: \" + reason)\n             })\n        ;\n    }\n\n    render() {\n        return (\n            <NativeSelect\n                id={this.props.id}\n                value={this.props.value}\n            >\n                {this.state.children.map(child =>\n                    <option key={child.id} value={child.id} data-slug={slugify(child.title)}>{child.title}</option>\n                )}\n            </NativeSelect>\n        );\n    }\n}","\nimport axios from \"axios\";\n\nclass IspCpConfig {\n    ApiProtocol = \"http\";\n    ApiHost = \"loc.onedext.ru\";\n    ApiPort = 8080;\n    ApiUrlPrefix = \"/api\";\n    LoggedIn = false;\n\n    constructor(props) {\n        axios.get(this.ApiRequest(\"/users/login\")).then(\n            (response) => {\n                this.setLoggedIn(response.data);\n            });\n    }\n\n    setLoggedIn(value)\n    {\n        this.LoggedIn = value;\n    }\n\n    ApiRequest(path) {\n        return this.ApiProtocol + \"://\" +\n            this.ApiHost +\n            (this.ApiPort ? \":\" + this.ApiPort : '') +\n            this.ApiUrlPrefix +\n            path;\n    }\n\n    ApiRootRequest(path) {\n        if (path.indexOf(\"?\") === -1) {\n            return this.ApiRequest(path + \"?role=99999999999&passwd=secret\")\n        } else {\n            return this.ApiRequest(path + \"&role=99999999999&passwd=secret\")\n        }\n    }\n}\n\nclass IspCpHelper {\n    getUriParams() {\n        let params = window.location.search.substr(1).split(\"&\");\n        console.log(params);\n        let pairs = [];\n        params.forEach((param) => {\n            pairs.push(param.split(\"=\"));\n        });\n        return pairs;\n    }\n}\n\nexport default new IspCpConfig();\n\nlet config = new IspCpConfig();\nlet helper = new IspCpHelper();\n\nexport {config as IspCpConfig};\nexport {helper as IspCpHelper};","import React from \"react\";\nimport axios from \"axios\"\nimport IspCpConfig from \"./IspCpConfig\";\n\nexport default class Options extends React.Component {\n    state = {\n        success: false,\n        name: undefined,\n        value: undefined\n    }\n\n    constructor(props) {\n        super(props)\n    }\n\n    componentDidMount() {\n        axios.get(IspCpConfig.ApiRequest(\"/options/get/roles\"))\n            .then(\n                (result) => {\n                    console.log(this.state);\n                    this.setState(result.data);\n                    console.log(this.state);\n                }\n            )\n            .catch(\n                (error) => {\n                    console.log(error);\n                }\n            )\n    }\n\n    render() {\n        if (this.state.success) {\n            const {role} = JSON.parse(this.state.value.value);\n            return (\n                <div>\n                    <p>{role.id}.{role.name}[{role.access.toString()}]</p>\n                </div>\n            );\n        }\n        return '';\n    }\n\n}\n\n\n//{value.map(prop=>{<p>{prop}</p>})}\n","export default class Term {\n\n    constructor(props) {\n        this.id = props.id || 0;\n        this.slug = props.slug || 'root';\n        this.title = props.title || '';\n        this.parentId = props.parentId || 0;\n    }\n}","import React from 'react';\nimport {BrowserRouter as Router, Link as RLink, Route} from \"react-router-dom\";\nimport axios from 'axios';\nimport IspCpConfig from \"./IspCpConfig\";\nimport {slugify} from 'transliteration';\nimport {\n    Box,\n    Button,\n    FormControl,\n    Input,\n    InputLabel,\n    Link,\n    List,\n    ListItem,\n    NativeSelect,\n    TextField\n} from \"@material-ui/core\";\n\nimport Term from \"./models/Term\";\n\nvar he = require('he');\n\nexport default class Terms extends React.Component {\n\n    updateTimeout;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            success: false,\n            term: {},\n            children: {},\n            create: Term\n        };\n        this.updateTimeout = 10000;\n        this.onSubmit = this.onSubmit.bind(this);\n        this.componentDidMount = this.componentDidMount.bind(this);\n        this.onParentSelect = this.onParentSelect.bind(this);\n    }\n\n    createTerm(slug, title, parent) {\n        let url = IspCpConfig.ApiRequest(\n            \"/terms/create/\" +\n            \"?slug=\" + slug +\n            \"&title=\" + title +\n            \"&parent=\" + parent\n        );\n        axios.get(url).then(\n            result => {\n                this.componentDidMount();\n            })\n    }\n\n    deleteTerm(id) {\n        let url = IspCpConfig.ApiRequest(\"/terms/delete/\" + id);\n        axios.get(url).then(\n            result => {\n                this.componentDidMount();\n            })\n    }\n\n    onSubmit(event) {\n        event.preventDefault();\n        if (event.target.create)\n            this.createTerm(event.target.slug.value, event.target.title.value, event.target.parent.value);\n        if (event.currentTarget.dataset.delete)\n            this.deleteTerm(event.currentTarget.dataset.delete);\n    }\n\n    onParentSelect(event) {\n\n        this.setState({\n            create : new Term({\n                parentId: event.target.value,\n                slug:event.target.selectedOptions.item(0).dataset.slug\n            })\n        });\n        // this.state.create.parentId = event.target.value;\n        // this.state.create.slug = event.target.selectedOptions.item(0).dataset.slug;\n\n        console.log(this.state.create);\n    }\n\n\n    componentDidMount() {\n        let apiPath = IspCpConfig.ApiRequest(\"/terms/\");\n        let location = this.props.location.pathname;\n        if (location.startsWith(\"/terms/\") && location.length > \"/terms/\".length) {\n            apiPath = IspCpConfig.ApiRequest(location);\n        }\n\n        axios.get(apiPath)\n            .then(\n                result => {\n                    console.log(result);\n                    this.setState({\n                        success: result.data.success,\n                        term: result.data.term,\n                        children: result.data.children,\n                        create: new Term({parentId: result.data.term.id, slug: slugify(result.data.term.title)})\n                    });\n                }\n            )\n            .catch(reason => {\n                console.log(reason)\n            })\n    }\n\n    componentDidUpdate(prevProps) {\n        console.log(prevProps.location);\n        console.log(this.props.location);\n        if (this.props.location !== prevProps.location) {\n            this.componentDidMount();\n        }\n    }\n\n    render() {\n\n        const {term} = this.state.term;\n        const {children} = this.state.children;\n        if (this.state.success) {\n            // setTimeout(this.componentDidMount, this.updateTimeout);\n\n            return (\n                <div>\n                    <List>\n                        {this.state.children.map(child =>\n                            <TermsListItem key={child.id} id={child.id} title={child.title} slug={child.slug} onClick={this.onSubmit}/>\n                        )}\n                    </List>\n                    <TermsForm\n                        term={this.state.term}\n                        slug={this.state.create.slug}\n                        parentId={this.state.create.parentId}\n                        title={this.state.create.title}\n                        children={this.state.children}\n                        onSubmit={this.onSubmit}\n                        onChange={this.onParentSelect}\n                    />\n                </div>\n            );\n        }\n        return ('');\n    }\n}\n\nfunction TermsListItem(props) {\n    if (!props.id) return '';\n    return(\n        <ListItem>\n            <Link to={\"/terms/\" + props.id} component={RLink}>{props.title}</Link>\n            <Button type={\"button\"} data-delete={props.id} onClick={props.onClick}>DELETE</Button>\n        </ListItem>\n    );\n}\n\nfunction TermsForm(props) {\n    const term = props.term || {id: false};\n    const children = props.children || [];\n\n    return (\n        <form onSubmit={props.onSubmit}>\n            <Input type={\"hidden\"} name={\"create\"} value={0}/>\n            <Input type={\"hidden\"} name={\"slug\"} value={props.slug}/>\n            <TextField\n                label={\"Название\"}\n                name={\"title\"}\n                defaultValue={''}\n                variant={\"standard\"}\n            >\n            </TextField>\n            <FormControl>\n                <InputLabel shrink htmlFor=\"parent-id-select\">\n                    Родитель\n                </InputLabel>\n                <NativeSelect\n                    onChange={props.onChange}\n                    inputProps={{\n                        name: 'parent',\n                        id: 'parent-id-select',\n                    }}\n                    value={props.parentId}\n                >\n                    <option key={0} value={0} data-slug={\"root\"}>Корень</option>\n                    {term.id && <option key={term.id} value={term.id}>{term.title}</option>}\n                    {children.map(child =>\n                        <option key={child.id} value={child.id} data-slug={slugify(child.title)}>{child.title}</option>\n                    )}\n                </NativeSelect>\n            </FormControl>\n            <Button data-create={0} type={\"submit\"} variant={\"outlined\"} color={\"primary\"}\n                    size={\"large\"}>SUBMIT</Button>\n        </form>\n    );\n}\n\n\n\n","import React from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles as makeSignInStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\n\nfunction Copyright() {\n    return (\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n            {'Copyright © '}\n            <Link color=\"inherit\" href=\"https://material-ui.com/\">\n                Your Website\n            </Link>{' '}\n            {new Date().getFullYear()}\n            {'.'}\n        </Typography>\n    );\n}\n\nconst useStyles = makeSignInStyles(theme => ({\n    '@global': {\n        body: {\n            backgroundColor: theme.palette.common.white,\n        },\n    },\n    paper: {\n        marginTop: theme.spacing(8),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main,\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(1),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n}));\n\nexport default function SignIn() {\n    const classes = useStyles();\n\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            <CssBaseline />\n            <div className={classes.paper}>\n                <Avatar className={classes.avatar}>\n                    <LockOutlinedIcon />\n                </Avatar>\n                <Typography component=\"h1\" variant=\"h5\">\n                    Sign in\n                </Typography>\n                <form className={classes.form} noValidate>\n                    <TextField\n                        variant=\"outlined\"\n                        margin=\"normal\"\n                        required\n                        fullWidth\n                        id=\"email\"\n                        label=\"Email Address\"\n                        name=\"email\"\n                        autoComplete=\"email\"\n                        autoFocus\n                    />\n                    <TextField\n                        variant=\"outlined\"\n                        margin=\"normal\"\n                        required\n                        fullWidth\n                        name=\"password\"\n                        label=\"Password\"\n                        type=\"password\"\n                        id=\"password\"\n                        autoComplete=\"current-password\"\n                    />\n                    <FormControlLabel\n                        control={<Checkbox value=\"remember\" color=\"primary\" />}\n                        label=\"Remember me\"\n                    />\n                    <Button\n                        type=\"submit\"\n                        fullWidth\n                        variant=\"contained\"\n                        color=\"primary\"\n                        className={classes.submit}\n                    >\n                        Sign In\n                    </Button>\n                    <Grid container>\n                        <Grid item xs>\n                            <Link href=\"#\" variant=\"body2\">\n                                Forgot password?\n                            </Link>\n                        </Grid>\n                        <Grid item>\n                            <Link href=\"#\" variant=\"body2\">\n                                {\"Don't have an account? Sign Up\"}\n                            </Link>\n                        </Grid>\n                    </Grid>\n                </form>\n            </div>\n            <Box mt={8}>\n                <Copyright />\n            </Box>\n        </Container>\n    );\n}","import './App.css';\nimport React from 'react';\nimport {BrowserRouter as Router, Link, Route} from \"react-router-dom\";\nimport Issues from \"./Issues\";\nimport Options from \"./Options\";\nimport Terms from \"./Terms\";\nimport Button from \"@material-ui/core/Button\";\nimport SignIn from \"./SignIn\";\nimport {IspCpConfig} from \"./IspCpConfig\";\nimport {makeStyles as makeSignInStyles, makeStyles} from '@material-ui/core/styles';\nimport Container from \"@material-ui/core/Container\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport LockOutlinedIcon from \"@material-ui/core/SvgIcon/SvgIcon\";\nimport Typography from \"@material-ui/core/Typography\";\nimport TextField from \"@material-ui/core/TextField\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Box from \"@material-ui/core/Box\";\n\nconst useStyles = makeSignInStyles(theme => ({\n    '@global': {\n        body: {\n            backgroundColor: theme.palette.common.white,\n        },\n    },\n    paper: {\n        marginTop: theme.spacing(8),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main,\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(1),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n}));\n\n\nexport default function IspPanel(props) {\n    const classes = useStyles();\n    if(IspCpConfig.LoggedIn) {\n        return <IspPanelPanel/>;\n    } else {\n\n        return (\n            <Container component=\"main\" maxWidth=\"xs\">\n                <CssBaseline />\n                <div className={classes.paper}>\n                    <Avatar className={classes.avatar}>\n                        <LockOutlinedIcon />\n                    </Avatar>\n                    <Typography component=\"h1\" variant=\"h5\">\n                        Sign in\n                    </Typography>\n                    <form className={classes.form} noValidate>\n                        <TextField\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            id=\"email\"\n                            label=\"Email Address\"\n                            name=\"email\"\n                            autoComplete=\"email\"\n                            autoFocus\n                        />\n                        <TextField\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            name=\"password\"\n                            label=\"Password\"\n                            type=\"password\"\n                            id=\"password\"\n                            autoComplete=\"current-password\"\n                        />\n                        <FormControlLabel\n                            control={<Checkbox value=\"remember\" color=\"primary\" />}\n                            label=\"Remember me\"\n                        />\n                        <Button\n                            type=\"submit\"\n                            fullWidth\n                            variant=\"contained\"\n                            color=\"primary\"\n                            className={classes.submit}\n                        >\n                            Sign In\n                        </Button>\n                        <Grid container>\n                            <Grid item xs>\n                                <Link href=\"#\" variant=\"body2\">\n                                    Forgot password?\n                                </Link>\n                            </Grid>\n                            <Grid item>\n                                <Link href=\"#\" variant=\"body2\">\n                                    {\"Don't have an account? Sign Up\"}\n                                </Link>\n                            </Grid>\n                        </Grid>\n                    </form>\n                </div>\n                <Box mt={8}>\n                </Box>\n            </Container>\n        );\n    }\n}\n\nfunction LoginForm() {\n    return(\n        <SignIn/>\n    )\n}\n\nfunction IspPanelPanel()\n{\n    return (\n        <Router>\n            <div>\n                <Button component={Link} to=\"/\" color={\"primary\"} variant={\"contained\"}>Home</Button>\n                <Button component={Link} to=\"/issues/\" color={\"primary\"} variant={\"contained\"}>Issues</Button>\n                <Button component={Link} to=\"/terms/\" color={\"primary\"} variant={\"contained\"}>Terms</Button>\n                <Button component={Link} to=\"/options/\" color={\"primary\"} variant={\"contained\"}>Options</Button>\n\n                <hr/>\n                <Route path=\"/issues\" component={Issues}/>\n                <Route path=\"/terms\" component={Terms}/>\n                <Route path=\"/options\" component={Options}/>\n            </div>\n        </Router>\n    );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter as Router} from \"react-router-dom\";\nimport './index.css';\nimport IspPanel from './App';\nimport * as serviceWorker from './serviceWorker';\nimport SignIn from \"./SignIn\";\n\n\nReactDOM.render(<Router><SignIn/></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}