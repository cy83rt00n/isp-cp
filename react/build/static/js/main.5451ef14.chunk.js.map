{
  "version": 3,
  "sources": [
    "IspCpConfig.js",
    "models/User.js",
    "componets/LoginForm.js",
    "componets/Issues.js",
    "models/Term.js",
    "componets/TermsListItem.js",
    "componets/Terms.js",
    "componets/Options.js",
    "componets/DefaultPanel.js",
    "componets/IspPanel.js",
    "serviceWorker.js",
    "index.js"
  ],
  "names": [
    "props",
    "ApiProtocol",
    "ApiHost",
    "ApiPort",
    "ApiUrlPrefix",
    "LoggedIn",
    "axios",
    "get",
    "this",
    "ApiRequest",
    "then",
    "response",
    "setLoggedIn",
    "data",
    "value",
    "path",
    "indexOf",
    "User",
    "useStyles",
    "makeStyles",
    "card",
    "minWidth",
    "bullet",
    "display",
    "margin",
    "transform",
    "title",
    "fontSize",
    "pos",
    "marginBottom",
    "cardContainer",
    "marginTop",
    "LoginForm",
    "classes",
    "Container",
    "className",
    "maxWidth",
    "Card",
    "component",
    "onSubmit",
    "CardContent",
    "Box",
    "TextField",
    "type",
    "name",
    "placeholder",
    "defaultValue",
    "email",
    "pass",
    "CardActions",
    "Button",
    "issusesInstance",
    "he",
    "require",
    "Issues",
    "updateTimeout",
    "modalFormOpen",
    "state",
    "success",
    "handleSubmit",
    "bind",
    "componentDidMount",
    "event",
    "preventDefault",
    "console",
    "log",
    "currentTarget",
    "window",
    "Target",
    "dataset",
    "update",
    "comment",
    "document",
    "querySelector",
    "updateIssue",
    "resolve",
    "resolveIssue",
    "id",
    "url",
    "IspCpConfig",
    "result",
    "apiPath",
    "location",
    "pathname",
    "startsWith",
    "length",
    "params",
    "defaults",
    "setState",
    "index",
    "JSON",
    "parse",
    "Paper",
    "Table",
    "TableHead",
    "TableRow",
    "TableCell",
    "IssueForm",
    "TableBody",
    "map",
    "issue",
    "key",
    "Date",
    "parseInt",
    "report_date",
    "toLocaleDateString",
    "resolve_date",
    "label",
    "decode",
    "variant",
    "ButtonGroup",
    "size",
    "onClick",
    "data-update",
    "color",
    "data-resolve",
    "React",
    "Component",
    "formStyles",
    "theme",
    "modal",
    "alignItems",
    "justifyContent",
    "paper",
    "backgroundColor",
    "palette",
    "background",
    "border",
    "boxShadow",
    "shadows",
    "padding",
    "spacing",
    "useState",
    "open",
    "setOpen",
    "handleClose",
    "Modal",
    "aria-labelledby",
    "aria-describedby",
    "closeAfterTransition",
    "onClose",
    "target",
    "comment_new",
    "callUpdate",
    "AddressList",
    "addrSelected",
    "selectedId",
    "address",
    "houses",
    "flats",
    "term",
    "children",
    "selectedAddress",
    "selectedHouse",
    "selectedFlat",
    "forceUpdate",
    "catch",
    "reason",
    "houseSelected",
    "flatSelected",
    "NativeSelect",
    "onChange",
    "child",
    "data-slug",
    "slugify",
    "Term",
    "slug",
    "parentId",
    "TermsListItem",
    "EmptyTerm",
    "handleDeleteTerm",
    "HierTerm",
    "itemClass",
    "ListItem",
    "button",
    "ListItemIcon",
    "ListItemText",
    "primary",
    "data-delete",
    "hierStyles",
    "root",
    "width",
    "nested",
    "paddingLeft",
    "Collapse",
    "in",
    "timeout",
    "unmountOnExit",
    "List",
    "disablePadding",
    "Terms",
    "terms",
    "create",
    "stringify",
    "onParentSelect",
    "setInitialState",
    "eventTarget",
    "password",
    "parent",
    "delete",
    "createTerm",
    "deleteTerm",
    "selectedOptions",
    "item",
    "prevProps",
    "TermsForm",
    "termsFormStyles",
    "flexGrow",
    "height",
    "control",
    "Grid",
    "container",
    "justify",
    "FormControl",
    "InputLabel",
    "shrink",
    "htmlFor",
    "inputProps",
    "data-create",
    "Input",
    "Options",
    "undefined",
    "error",
    "role",
    "access",
    "toString",
    "menuButton",
    "marginRight",
    "DefaultPanel",
    "username",
    "anchorEl",
    "setAnchorEl",
    "AppBar",
    "position",
    "Toolbar",
    "IconButton",
    "aria-controls",
    "aria-hidden",
    "aria-haspopup",
    "edge",
    "aria-label",
    "Typography",
    "Menu",
    "keepMounted",
    "Boolean",
    "MenuItem",
    "Link",
    "to",
    "IspPanel",
    "user",
    "handleSubmitLoginForm",
    "form",
    "exception",
    "split",
    "toUpperCase",
    "IspPanelAppBar",
    "hostname",
    "match",
    "createMuiTheme",
    "overrides",
    "MuiButton",
    "cursor",
    "ReactDOM",
    "render",
    "getElementById",
    "navigator",
    "serviceWorker",
    "ready",
    "registration",
    "unregister"
  ],
  "mappings": "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",
  "file": "static/js/main.5451ef14.chunk.js",
  "sourcesContent": [
    "\nimport axios from \"axios\";\n\nclass IspCpConfig {\n    ApiProtocol = \"http\";\n    ApiHost = \"ctn.onedext.ru\";\n    ApiPort = 8080;\n    ApiUrlPrefix = \"/api\";\n    LoggedIn = false;\n\n    constructor(props) {\n        axios.get(this.ApiRequest(\"/users/login\")).then(\n            (response) => {\n                this.setLoggedIn(response.data);\n            });\n    }\n\n    setLoggedIn(value)\n    {\n        this.LoggedIn = value;\n    }\n\n    ApiRequest(path) {\n        return this.ApiProtocol + \"://\" +\n            this.ApiHost +\n            (this.ApiPort ? \":\" + this.ApiPort : '') +\n            this.ApiUrlPrefix +\n            path;\n    }\n\n    ApiRootRequest(path) {\n        if (path.indexOf(\"?\") === -1) {\n            return this.ApiRequest(path + \"?role=99999999999&passwd=secret\")\n        } else {\n            return this.ApiRequest(path + \"&role=99999999999&passwd=secret\")\n        }\n    }\n}\n\nexport default new IspCpConfig();",
    "export default class User {\n    id;\n    email;\n    pass;\n    role;\n}",
    "import Container from \"@material-ui/core/Container\";\nimport {Box, makeStyles} from \"@material-ui/core\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport React from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardActions from \"@material-ui/core/CardActions\";\n\n\nconst useStyles = makeStyles({\n    card: {\n        minWidth: 275,\n    },\n    bullet: {\n        display: 'inline-block',\n        margin: '0 2px',\n        transform: 'scale(0.8)',\n    },\n    title: {\n        fontSize: 14,\n    },\n    pos: {\n        marginBottom: 12,\n    },\n    cardContainer: {\n        marginTop: \"1.5em\",\n    }\n});\n\nexport default function LoginForm(props) {\n\n    const classes = useStyles();\n\n    return (\n        <Container className={classes.cardContainer} maxWidth={\"sm\"}>\n            <Card className={classes.card} maxWidth={\"md\"} component={\"form\"} onSubmit={props.onSubmit}>\n                <CardContent >\n                    <Box component={\"div\"}>\n                        <TextField type={\"email\"} name={\"email\"} placeholder={\"Login\"} defaultValue={props.email}/>\n                    </Box>\n                    <Box component={\"div\"}>\n                        <TextField type={\"password\"} name={\"pass\"} placeholder={\"Password\"} defaultValue={props.pass}>\n                            Password\n                        </TextField>\n                    </Box>\n\n\n                </CardContent>\n                <CardActions>\n                    <Button type={\"submit\"}>SGIN IN</Button>\n                </CardActions>\n            </Card>\n        </Container>\n    )\n}",
    "import React from 'react';\nimport axios from 'axios';\nimport IspCpConfig from \"../IspCpConfig\";\nimport Button from \"@material-ui/core/Button\";\nimport Paper from \"@material-ui/core/Paper\";\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\nimport TextField from '@material-ui/core/TextField';\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport NativeSelect from '@material-ui/core/NativeSelect';\nimport {slugify} from 'transliteration';\nimport Modal from '@material-ui/core/Modal';\nimport { makeStyles } from '@material-ui/core/styles';\n\n\nvar he = require('he');\n\nvar issusesInstance;\n\nexport default class Issues extends React.Component {\n    updateTimeout = 10000;\n    modalFormOpen = true;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            success: false,\n            data   : []\n        };\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.componentDidMount = this.componentDidMount.bind(this);\n        issusesInstance = this;\n    }\n\n    callUpdate()\n    {\n        this.componentDidMount();\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        console.log(event.currentTarget);\n        window.Target = event.currentTarget;\n        // if (event.currentTarget.dataset.report) {\n        //     var issueForm = document.querySelector(\"form#issue-report\");\n        //     console.log(\"Report : \" + issueForm.comment.value);\n        //     this.reportIssue(issueForm.comment.value);\n        // }\n        if (event.currentTarget.dataset.update) {\n            // var issueForm = document.querySelector(\"form#issue-edit-\" + event.currentTarget.dataset.update);\n            console.log(\"Udate \" + event.currentTarget.dataset.update);\n            // window.issueForm = issueForm;\n            const comment = document.querySelector(\"#comment-\" + event.currentTarget.dataset.update).value;\n            this.updateIssue(event.currentTarget.dataset.update, comment);\n        }\n        if (event.currentTarget.dataset.resolve) {\n            // var issueForm = document.querySelector(\"form#issue-edit-\" + event.currentTarget.dataset.resolve);\n            console.log(\"Resolve \" + event.currentTarget.dataset.resolve);\n            this.resolveIssue(event.currentTarget.dataset.resolve);\n        }\n    }\n\n    resolveIssue(id) {\n        let url = IspCpConfig.ApiRequest(\"/issues/resolve/\" + id);\n        axios.get(url,).then(\n            result => {\n                this.componentDidMount()\n            }\n        );\n    }\n\n    updateIssue(id, comment) {\n        let url = IspCpConfig.ApiRequest(\"/issues/update/\" + id + \"?comment=\" + comment);\n        axios.get(url).then(\n            result => {\n                this.componentDidMount()\n            }\n        );\n    }\n\n\n    componentDidMount() {\n        let apiPath = IspCpConfig.ApiRequest(\"/issues/\");\n        let location = this.props.location.pathname;\n        if (location.startsWith(\"/issues/\") && location.length > \"/issues/\".length) {\n            apiPath = IspCpConfig.ApiRequest(location);\n        }\n\n        axios.get(apiPath, {\n            params: axios.defaults.params\n        })\n             .then(\n                 result => {\n                     this.setState({\n                         success: result.data.success,\n                         data   : result.data.index\n                     });\n                     // console.log(result);\n                 }\n             )\n    }\n\n\n    render() {\n        if (this.state.success) {\n            const data = JSON.parse(this.state.data);\n            // setTimeout(this.componentDidMount, this.updateTimeout);\n            return (\n                <Paper>\n                    <Table>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>Issue</TableCell>\n                                <TableCell>Reported </TableCell>\n                                <TableCell>Resolved</TableCell>\n                                <TableCell>Address</TableCell>\n                                <TableCell>Comment</TableCell>\n                                <TableCell>\n                                    <IssueForm/>\n                                </TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>{data.map(issue =>\n                            <TableRow key={\"issue-\" + issue.id}>\n                                <TableCell>{issue.id}</TableCell>\n                                <TableCell>{new Date(parseInt(issue.report_date) * 1000).toLocaleDateString()}</TableCell>\n                                <TableCell>\n                                    {\n                                        (issue.resolve_date > 0)\n                                            ? new Date(parseInt(issue.resolve_date) * 1000).toLocaleDateString()\n                                            : ''\n                                    }\n                                </TableCell>\n                                <TableCell>\n                                    <AddressList location={\"/terms/15\"} id={\"address-\" + issue.id} value={0}/>\n                                </TableCell>\n                                <TableCell>\n                                    <TextField\n                                        label=\"Комментарий\"\n                                        id={\"comment-\" + issue.id}\n                                        defaultValue={issue.comment ? he.decode(issue.comment) : ''}\n                                        margin=\"normal\"\n                                        variant=\"outlined\"\n                                    /></TableCell>\n                                <TableCell>\n                                    <ButtonGroup size=\"small\">\n                                        <Button type=\"button\" onClick={this.handleSubmit} data-update={issue.id}\n                                                color=\"primary\">\n                                            UPDATE\n                                        </Button>\n                                        <Button type=\"button\" onClick={this.handleSubmit} data-resolve={issue.id}\n                                                color=\"secondary\">\n                                            RESOLVE\n                                        </Button>\n                                    </ButtonGroup>\n                                </TableCell>\n                            </TableRow>\n                        )}\n                        </TableBody>\n                    </Table>\n                </Paper>\n            );\n        }\n        return ('');\n    }\n}\n\nconst formStyles = makeStyles(theme => ({\n    modal: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    paper: {\n        backgroundColor: theme.palette.background.paper,\n        border: '2px solid #000',\n        boxShadow: theme.shadows[5],\n        padding: theme.spacing(2, 4, 3),\n    },\n}));\n\nfunction IssueForm() {\n\n    const classes = formStyles();\n    const [open, setOpen] = React.useState(false);\n\n    const handleClose = () => {\n        setOpen(false);\n    }\n\n    const handleOpen = () => {\n        setOpen(true);\n    }\n\n    const reportIssue = (event) => {\n        event.preventDefault();\n        console.log(event.target.comment_new.value);\n        let url = IspCpConfig.ApiRequest(\"/issues/report/?comment=\" + event.target.comment_new.value);\n        axios.get(url).then(\n            result => {\n                handleClose();\n                issusesInstance.callUpdate();\n            }\n        );\n    }\n\n    return (\n        <div>\n            <Button onClick={handleOpen} color=\"secondary\" variant={\"outlined\"}>REPORT</Button>\n            <Modal\n                aria-labelledby=\"transition-modal-title\"\n                aria-describedby=\"transition-modal-description\"\n                open={open}\n                closeAfterTransition\n                onClose={handleClose}\n                className={classes.modal}\n            >\n\n                <form className={classes.paper} onSubmit={reportIssue}>\n                    <h2 id=\"transition-modal-title\">REPORT ISSUE</h2>\n                    <div>\n                        <AddressList location={\"/terms/1\"} id={\"address-new\"} value={0}/>\n                    </div>\n                    <div>\n                        <TextField\n                            label=\"Комментарий\"\n                            id={\"transition-modal-description\"}\n                            defaultValue={\"\"}\n                            margin=\"normal\"\n                            variant=\"outlined\"\n                            name={\"comment_new\"}\n                        />\n                        <Button type=\"submit\" color=\"secondary\" variant={\"outlined\"}>REPORT</Button>\n                    </div>\n                </form>\n            </Modal>\n        </div>\n    );\n\n};\n\nclass AddressList extends React.Component {\n\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            address: {term:{id:0},children:[]},\n            houses: {term:{id:0},children:[]},\n            flats: {term:{id:0},children:[]},\n            selectedAddress:0,\n            selectedHouse:0,\n            selectedFlat:0\n        };\n        this.apiPath = IspCpConfig.ApiRequest(\"/terms/\");\n        this.location = props.location;\n        this.addrSelected = this.addrSelected.bind(this);\n    }\n\n    componentDidMount() {\n\n        if (this.location.startsWith(\"/terms/\") && this.location.length > \"/terms/\".length) {\n            this.apiPath = IspCpConfig.ApiRequest(this.location);\n        }\n\n        axios.get(this.apiPath)\n             .then(\n                 result => {\n                     this.setState({\n                         address: result.data,\n                         houses: {term:{id:0},children:[]},\n                         flats: {term:{id:0},children:[]},\n                         selectedAddress: result.data.term.id,\n                         selectedHouse:0,\n                         selectedFlat:0\n                     });\n                 }\n             )\n             .catch(reason => {\n                 console.log(\"Axios error: \" + reason)\n             })\n        ;\n    }\n\n    addrSelected = (event) => {\n        console.log(event.target.value);\n        var selectedId = event.target.value;\n        var apiPath = IspCpConfig.ApiRequest(\"/terms/\" + selectedId);\n        axios.get(apiPath)\n             .then(\n                 result => {\n                     this.setState({\n                         address: this.state.address,\n                         houses: result.data,\n                         flats: {term:{id:0},children:[]},\n                         selectedAddress: selectedId,\n                         selectedHouse:0,\n                         selectedFlat:0\n                     });\n                     this.forceUpdate();\n                 }\n             )\n             .catch(reason => {\n                 console.log(\"Axios error: \" + reason)\n             })\n        ;\n\n    }\n\n    houseSelected = (event) => {\n        console.log(event.target.value);\n        var selectedId = event.target.value;\n        var apiPath = IspCpConfig.ApiRequest(\"/terms/\" + selectedId);\n        axios.get(apiPath)\n             .then(\n                 result => {\n                     this.setState({\n                         address: this.state.address,\n                         houses: this.state.houses,\n                         flats: result.data,\n                         selectedAddress: this.state.selectedAddress,\n                         selectedHouse:selectedId,\n                         selectedFlat:0\n                     });\n                     this.forceUpdate();\n                 }\n             )\n             .catch(reason => {\n                 console.log(\"Axios error: \" + reason)\n             })\n        ;\n\n    }\n\n    flatSelected = (event) => {\n        console.log(event.target.value);\n        var selectedId = event.target.value;\n        this.setState({\n            address: this.state.address,\n            houses: this.state.houses,\n            flats: this.state.flats,\n            selectedAddress: this.state.selectedAddress,\n            selectedHouse:this.state.selectedHouse,\n            selectedFlat:selectedId\n        });\n        this.forceUpdate();\n\n    }\n\n    render() {\n        console.log(this.state);\n        return (\n            <div>\n            <NativeSelect\n                id={this.props.id}\n                value={this.state.selectedAddress}\n                onChange={this.addrSelected}\n            >\n                <option value={0}>Улица</option>\n                {this.state.address.children.map(child =>\n                    <option key={child.id} value={child.id} data-slug={slugify(child.title)}>{child.title}</option>\n                )}\n            </NativeSelect>\n                <NativeSelect\n                    id={this.props.id + \"-houses\"}\n                    value={this.state.selectedHouse}\n                    onChange={this.houseSelected}\n                >\n                    <option value={0}>Дом</option>\n                    {this.state.houses.children.map(child =>\n                        <option key={child.id} value={child.id} data-slug={slugify(child.title)}>{child.title}</option>\n                    )}\n                </NativeSelect>\n                <NativeSelect\n                    id={this.props.id + \"flats\"}\n                    value={this.state.selectedFlat}\n                    onChange={this.flatSelected}\n                >\n                    <option value={0}>Квартира</option>\n                    {this.state.flats.children.map(child =>\n                        <option key={child.id} value={child.id} data-slug={slugify(child.title)}>{child.title}</option>\n                    )}\n                </NativeSelect>\n            </div>\n        );\n    }\n}\n\nclass HousesList extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            term    : {},\n            children: []\n        };\n        this.apiPath = IspCpConfig.ApiRequest(\"/terms/\");\n        this.location = props.location;\n    }\n\n    componentDidMount() {\n\n        if (this.location.startsWith(\"/terms/\") && this.location.length > \"/terms/\".length) {\n            this.apiPath = IspCpConfig.ApiRequest(this.location);\n        }\n\n        axios.get(this.apiPath)\n             .then(\n                 result => {\n                     console.log(result);\n                     this.setState({\n                         term    : result.data.term,\n                         children: result.data.children\n                     });\n                 }\n             )\n             .catch(reason => {\n                 console.log(\"Axios error: \" + reason)\n             })\n        ;\n    }\n\n    render() {\n        return (\n            <NativeSelect\n                id={this.props.id}\n                value={this.props.value}\n            >\n                {this.state.children.map(child =>\n                    <option key={child.id} value={child.id} data-slug={slugify(child.title)}>{child.title}</option>\n                )}\n            </NativeSelect>\n        );\n    }\n}\n\nclass ApartmentsList extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            term    : {},\n            children: []\n        };\n        this.apiPath = IspCpConfig.ApiRequest(\"/terms/\");\n        this.location = props.location;\n    }\n\n    componentDidMount() {\n\n        if (this.location.startsWith(\"/terms/\") && this.location.length > \"/terms/\".length) {\n            this.apiPath = IspCpConfig.ApiRequest(this.location);\n        }\n\n        axios.get(this.apiPath)\n             .then(\n                 result => {\n                     console.log(result);\n                     this.setState({\n                         term    : result.data.term,\n                         children: result.data.children\n                     });\n                 }\n             )\n             .catch(reason => {\n                 console.log(\"Axios error: \" + reason)\n             })\n        ;\n    }\n\n    render() {\n        return (\n            <NativeSelect\n                id={this.props.id}\n                value={this.props.value}\n            >\n                {this.state.children.map(child =>\n                    <option key={child.id} value={child.id} data-slug={slugify(child.title)}>{child.title}</option>\n                )}\n            </NativeSelect>\n        );\n    }\n}",
    "export default class Term {\n\n    constructor(props) {\n        this.id = props.id || 0;\n        this.slug = props.slug || \"root\";\n        this.title = props.title || \"\";\n        this.parentId = props.parentId || 0;\n        this.children = props.children || [];\n    }\n}",
    "import React from 'react';\nimport LabelIcon from '@material-ui/icons/Label';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport {makeStyles} from \"@material-ui/core\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport Button from \"@material-ui/core/Button\";\n\nexport default function TermsListItem(props) {\n    console.log(\"I'm TermsListItem : \");\n    console.log(props);\n    const item = (props.term.children.length === 0) ? <EmptyTerm  title={props.term.title} handleDeleteTerm={props.handleDeleteTerm} id={props.term.id}/> :\n        <HierTerm term={props.term}  handleDeleteTerm={props.handleDeleteTerm} id={props.term.id}/>;\n    return (item);\n}\n\n/**\n *\n * @param props\n * @constructor\n */\nfunction EmptyTerm(props) {\n    const itemClass = props.className || \"\";\n    return (\n        <ListItem key={\"term-\" + props.id} button className={itemClass}>\n            <ListItemIcon>\n                <LabelIcon/>\n            </ListItemIcon>\n            <ListItemText primary={props.title}/>\n            <Button type=\"button\" onClick={props.handleDeleteTerm} data-delete={props.id} color=\"primary\" variant={\"outlined\"}>\n                DELETE\n            </Button>\n        </ListItem>\n    );\n}\n\nconst hierStyles = makeStyles(theme => ({\n    root  : {\n        width          : '100%',\n        maxWidth       : 360,\n        backgroundColor: theme.palette.background.paper,\n    },\n    nested: {\n        paddingLeft: theme.spacing(4),\n    },\n}));\n\nfunction HierTerm(props) {\n    const classes = hierStyles();\n    const [open, setOpen] = React.useState(true);\n\n    const handleClick = () => {\n        setOpen(!open);\n    };\n\n    return ([\n        <EmptyTerm title={props.term.title} handleDeleteTerm={props.handleDeleteTerm} id={props.term.id}/>,\n        <ListItem key={\"term-\" + props.term.id}>\n            <Collapse in={open} timeout=\"auto\" unmountOnExit>\n                <List key={\"term-\" + props.term.id + \"-neseted\"} component=\"div\" disablePadding>\n                    {\n                        props.term.children.map(child => {\n                            return (\n\n                                <EmptyTerm key={\"term-\" + child.id} className={classes.nested} title={child.title} handleDeleteTerm={props.handleDeleteTerm} id={child.id}/>\n                            );\n                        })\n                    }\n                </List>\n            </Collapse>\n        </ListItem>\n    ]);\n}",
    "import React from 'react';\nimport axios from 'axios';\nimport IspCpConfig from \"../IspCpConfig\";\nimport {slugify} from 'transliteration';\nimport {\n    Box,\n    Button,\n    FormControl,\n    Grid,\n    Input,\n    InputLabel,\n    List,\n    makeStyles,\n    NativeSelect,\n    TextField\n} from \"@material-ui/core\";\n\nimport Term from \"../models/Term\";\nimport TermsListItem from \"./TermsListItem\";\n\nvar he = require('he');\n\nexport default class Terms extends React.Component {\n\n    updateTimeout;\n\n    constructor(props) {\n        super(props);\n        console.log(\"I'm constructor\");\n        this.state = {\n            success: false,\n            terms  : [new Term({})],\n            create : new Term({})\n        };\n        console.log(\"My state is \" + JSON.stringify(this.state));\n        this.updateTimeout = 10000;\n        this.onSubmit = this.onSubmit.bind(this);\n        this.componentDidMount = this.componentDidMount.bind(this);\n        this.onParentSelect = this.onParentSelect.bind(this);\n        this.setInitialState = this.setInitialState.bind(this);\n        this.setInitialState();\n    }\n\n    createTerm(eventTarget) {\n        let url = IspCpConfig.ApiRequest(\"/terms/create/\");\n        axios.get(url, {\n            params: {\n                email   : axios.defaults.params.email,\n                password: axios.defaults.params.password,\n                slug    : eventTarget.slug.value,\n                title   : eventTarget.title.value,\n                parent  : eventTarget.parent.value\n            }\n        }).then(\n            result => {\n                this.setState({\n                    create: new Term({})\n                });\n                this.componentDidMount();\n            })\n    }\n\n    deleteTerm(id) {\n        let url = IspCpConfig.ApiRequest(\"/terms/delete/\");\n        axios.get(url, {\n            params: {\n                email   : axios.defaults.params.email,\n                password: axios.defaults.params.password,\n                id      : id\n            }\n        }).then(\n            result => {\n                this.componentDidMount();\n            })\n    }\n\n    onSubmit(event) {\n        console.log(event.currentTarget.dataset.delete);\n        event.preventDefault();\n        if (event.target.create) {\n            this.createTerm(event.target);\n        }\n        if (event.currentTarget.dataset.delete) {\n            this.deleteTerm(event.currentTarget.dataset.delete);\n        }\n    }\n\n    onParentSelect(event) {\n\n        console.log(event.target.value);\n        this.setState({\n            create: new Term({\n                parentId: event.target.value,\n                slug    : event.target.selectedOptions.item(0).dataset.slug\n            })\n        });\n    }\n\n\n    componentDidMount() {\n\n        console.log(\"I'm diMount\");\n        let apiPath = IspCpConfig.ApiRequest(\"/terms/\");\n        let location = this.props.location.pathname;\n        if (location.startsWith(\"/terms/\") && location.length > \"/terms/\".length) {\n            apiPath = IspCpConfig.ApiRequest(location);\n        }\n\n        axios.get(apiPath, {\n            params: {\n                email   : axios.defaults.params.email,\n                password: axios.defaults.params.password\n            }\n        })\n             .then(\n                 result => {\n                     console.log(\"Did mount api result : \" + JSON.stringify(result));\n                     this.setState({\n                         success: result.data.success,\n                         terms  : result.data.terms,\n                         create : this.state.create\n                     });\n                 }\n             )\n             .catch(reason => {\n                 console.log(reason)\n             })\n    }\n\n    setInitialState() {}\n\n    componentDidUpdate(prevProps) {\n        console.log(prevProps.location);\n        console.log(this.props.location);\n        if (this.props.location !== prevProps.location) {\n            this.componentDidMount();\n        }\n    }\n\n    render() {\n        console.log(\"I'm render\");\n        console.log(this.state.create);\n        // setTimeout(this.componentDidMount, this.updateTimeout);\n        if (this.state.success) {\n            const {term} = this.state.terms[0];\n            return (\n                <Box component={\"div\"}>\n                    <List>\n                        {this.state.terms.map(term=>{return(\n                            <TermsListItem key={term.id} term={term} handleDeleteTerm={this.onSubmit}></TermsListItem>\n                        )})}\n                    </List>\n                    <TermsForm\n                        term={this.state.term}\n                        slug={this.state.create.slug}\n                        parentId={this.state.create.parentId}\n                        title={this.state.create.title}\n                        children={this.state.terms}\n                        onSubmit={this.onSubmit}\n                        onChange={this.onParentSelect}\n                    />\n                </Box>\n            );\n        } else {\n            const term = this.state.terms[0];\n            return (\n                <div>\n                    <TermsForm\n                        term={this.state.terms[0]}\n                        slug={this.state.terms[0].slug}\n                        parentId={this.state.terms[0].parentId}\n                        title={this.state.terms[0].title}\n                        children={this.state.terms[0].children}\n                        onSubmit={this.onSubmit}\n                        onChange={this.onParentSelect}\n                    />\n                </div>\n            );\n        }\n    }\n}\n\nconst termsFormStyles = makeStyles(theme => ({\n    root   : {\n        flexGrow: 1,\n    },\n    paper  : {\n        height: 140,\n        width : 100,\n    },\n    control: {\n        padding: theme.spacing(2),\n    },\n}));\n\nfunction TermsForm(props) {\n    const term = props.term || {id: false};\n    const children = props.children || [];\n    const classes = termsFormStyles();\n    console.log(\"Form props : \" + JSON.stringify(props));\n\n    return (\n        <Box component={\"form\"} onSubmit={props.onSubmit} variant={\"outlined\"}>\n\n            <Grid container justify=\"flex-start\" spacing={4}>\n                <Grid key={0} item>\n                    <TextField\n                        label={\"Название\"}\n                        name={\"title\"}\n                        defaultValue={''}\n                        variant={\"standard\"}\n                    >\n                    </TextField>\n                </Grid>\n                <Grid key={1} item>\n                    <FormControl>\n                        <InputLabel shrink htmlFor=\"parent-id-select\">\n                            Родитель\n                        </InputLabel>\n                        <NativeSelect\n                            onChange={props.onChange}\n                            inputProps={{\n                                name: 'parent',\n                                id  : 'parent-id-select',\n                            }}\n                            value={props.parentId}\n                        >\n                            <option key={0} value={0} data-slug={\"root\"}>Корень</option>\n                            {term.id && <option key={term.id} value={term.id}>{term.title}</option>}\n                            {children.map(child =>\n                                <option key={child.id} value={child.id}\n                                        data-slug={slugify(child.title)}>{child.title}</option>\n                            )}\n                        </NativeSelect>\n                    </FormControl>\n                </Grid>\n                <Grid key={2} item>\n                    <Button data-create={0} type={\"submit\"} variant={\"outlined\"} color={\"primary\"}\n                            size={\"large\"}>SUBMIT</Button>\n                </Grid>\n            </Grid>\n\n            <Input type={\"hidden\"} name={\"create\"} value={0}/>\n            <Input type={\"hidden\"} name={\"slug\"} value={props.slug}/>\n\n\n        </Box>\n    );\n}\n\n\n\n",
    "import React from \"react\";\nimport axios from \"axios\"\nimport IspCpConfig from \"../IspCpConfig\";\n\nexport default class Options extends React.Component {\n    state = {\n        success: false,\n        name: undefined,\n        value: undefined\n    }\n\n    constructor(props) {\n        super(props)\n    }\n\n    componentDidMount() {\n        axios.get(IspCpConfig.ApiRequest(\"/options/get/roles\"))\n            .then(\n                (result) => {\n                    console.log(this.state);\n                    this.setState(result.data);\n                    console.log(this.state);\n                }\n            )\n            .catch(\n                (error) => {\n                    console.log(error);\n                }\n            )\n    }\n\n    render() {\n        if (this.state.success) {\n            const {role} = JSON.parse(this.state.value.value);\n            return (\n                <div>\n                    <p>{role.id}.{role.name}[{role.access.toString()}]</p>\n                </div>\n            );\n        }\n        return '';\n    }\n\n}\n\n\n//{value.map(prop=>{<p>{prop}</p>})}\n",
    "import React from \"react\";\nimport {BrowserRouter as Router, Link, Route} from \"react-router-dom\";\nimport Button from \"@material-ui/core/Button\";\nimport Issues from \"./Issues\";\nimport Terms from \"./Terms\";\nimport Options from \"./Options\";\nimport {AppBar, makeStyles} from \"@material-ui/core\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport MenuIcon from '@material-ui/icons/Menu';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        flexGrow: 1,\n    },\n}));\n\nexport default function DefaultPanel(props) {\n    const classes = useStyles();\n    const username = props.username || '';\n    const [anchorEl, setAnchorEl] = React.useState(null);\n\n    const handleClick = (event) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n    return ([\n        <Router>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton aria-controls=\"menu-top\" aria-hidden=\"false\" aria-haspopup=\"false\" onClick={handleClick}\n                                edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n                        <MenuIcon/>\n                    </IconButton>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        {username}@ISP.CP\n                    </Typography>\n                    <Menu id={\"menu-top\"} anchorEl={anchorEl}\n                          keepMounted\n                          open={Boolean(anchorEl)}\n                          onClose={handleClose}>\n                        <MenuItem key={\"tm-1\"}><Button component={Link} to=\"/\" color={\"primary\"}\n                                                       variant={\"contained\"}>Home</Button></MenuItem>\n                        <MenuItem key={\"tm-2\"}><Button component={Link} to=\"/issues/\" color={\"primary\"}\n                                                       variant={\"contained\"}>Issues</Button></MenuItem>\n                        <MenuItem key={\"tm-3\"}><Button component={Link} to=\"/terms/\" color={\"primary\"}\n                                                       variant={\"contained\"}>Terms</Button></MenuItem>\n                    </Menu>\n                </Toolbar>\n            </AppBar>\n            <Route path=\"/issues\" component={Issues}/>\n            <Route path=\"/terms\" component={Terms}/>\n            <Route path=\"/options\" component={Options}/>\n        </Router>\n    ]);\n}",
    "import React from \"react\";\nimport axios from \"axios\";\nimport IspCpConfig from \"../IspCpConfig\";\nimport User from \"../models/User\";\nimport LoginForm from \"./LoginForm\";\nimport DefaultPanel from \"./DefaultPanel\";\nimport {AppBar} from \"@material-ui/core\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Typography from \"@material-ui/core/Typography\";\nimport MenuIcon from '@material-ui/icons/Menu';\nimport {makeStyles} from \"@material-ui/core\";\n\n\n\nimport MenuList from \"@material-ui/core/MenuList\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Menu from \"@material-ui/core/Menu\";\n\nexport default class IspPanel extends React.Component {\n\n    constructor(props) {\n        super(props);\n        const user = User;\n        this.state = {\n            user: user\n        }\n        this.handleSubmitLoginForm = this.handleSubmitLoginForm.bind(this);\n    }\n\n    handleSubmitLoginForm(event) {\n        event.preventDefault();\n        const form = event.currentTarget;\n        const user = User;\n        user.email = form.email.value;\n        user.pass = form.pass.value;\n\n\n        axios.get(IspCpConfig.ApiRequest(\"/users/login\"), {\n            params: {email: user.email, password: user.pass}\n        }).then(response => {\n            user.id = response.data.item.id || undefined;\n            this.setState({\n                user: user\n            });\n        }).catch((exception)=>{\n            console.log(exception);\n        });\n    }\n\n    render() {\n        const email = this.state.user.email;\n        const pass = this.state.user.pass;\n        const id = this.state.user.id || undefined;\n        if (parseInt(id) > 0) {\n            axios.defaults.params = {\n                email: email,\n                password: pass\n            };\n            const username = email.split(\"@\")[0].toUpperCase();\n\n            return ([<DefaultPanel username={username}/>]);\n        }\n        return ([<IspPanelAppBar/>,<LoginForm onSubmit={this.handleSubmitLoginForm} email={email} pass={pass}/>]);\n    }\n\n}\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        flexGrow: 1,\n    },\n}));\n\n\nfunction IspPanelAppBar(props)\n{\n    const classes = useStyles();\n    const username = props.username || '';\n\n    return(\n        <AppBar position=\"static\">\n            <Toolbar>\n                <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n                    <MenuIcon />\n                </IconButton>\n                <Typography variant=\"h6\" className={classes.title}>\n                    {username}@ISP.CP\n                </Typography>\n            </Toolbar>\n        </AppBar>\n    );\n}",
    "// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n",
    "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport IspPanel from \"./componets/IspPanel\";\nimport * as serviceWorker from './serviceWorker';\nimport { createMuiTheme } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n    overrides: {\n        // Style sheet name ⚛️\n        MuiButton: {\n            // Name of the rule\n            root: {\n                // Some CSS\n                cursor: \"pointer\"\n            },\n        },\n    },\n});\n\nReactDOM.render(<IspPanel theme={theme}></IspPanel>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"
  ],
  "sourceRoot": ""
}