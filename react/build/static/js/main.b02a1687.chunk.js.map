{"version":3,"sources":["IspCpConfig.js","models/User.js","componets/LoginForm.js","IspCpHelper.js","componets/ChainedList.js","models/IssueStatus.js","componets/IssueForm.js","models/Issue.js","models/Term.js","componets/IssueStatusSelect.js","models/IssueUpdateReport.js","componets/IssueHistory.js","componets/Issues.js","componets/TermsListItem.js","componets/Terms.js","componets/Options.js","componets/Summary.js","componets/DefaultPanel.js","componets/IspPanel.js","serviceWorker.js","index.js"],"names":["props","ApiProtocol","ApiHost","ApiPort","ApiUrlPrefix","LoggedIn","axios","get","this","ApiRequest","then","response","setLoggedIn","data","value","path","indexOf","User","id","email","pass","useStyles","makeStyles","card","minwidth","bullet","display","margin","transform","title","fontSize","pos","marginBottom","cardContainer","marginTop","LoginForm","classes","Container","className","maxWidth","Card","component","onSubmit","CardContent","Box","TextField","type","name","placeholder","defaultValue","CardActions","Button","callApi","url","params","config","Object","assign","defaults","IspCpConfig","debug","message","window","location","host","startsWith","console","log","search","substr","split","pairs","forEach","param","push","ChainedList","onChange","children","FormControl","fullWidth","InputLabel","shrink","label","NativeSelect","map","child","IssueStatus","formStyles","require","theme","modal","alignItems","justifyContent","paper","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","IssueForm","React","useState","open","setOpen","city","street","home","flat","address","setAddress","cities","setCities","streets","setStreets","homes","setHomes","flats","setFlats","engineers","setEngineers","engineer","setEngineer","afterReport","handleClose","onChangeAddress","event","address_new","IspCpHelper","currentTarget","target","selectedOptions","item","text","term","length","slugify","terms","onClick","color","variant","Dialog","aria-labelledby","onClose","scroll","DialogTitle","DialogContent","dividers","DialogContentText","preventDefault","issue","comment","comment_new","report_status","execution_date","Date","getTime","contacts","contacts_phone","history","JSON","stringify","Input","undefined","onlyCountries","defaultCountry","countryCodeEditable","InputLabelProps","multiline","rowsMax","rows","align","Issue","Term","slug","parentId","IssueStatusSelect","statuses","setStatuses","input_props","inputProps","option","index_key","IssueUpdateReport","IssueHistory","key_prefix","issue_id","key","Modal","aria-describedby","closeAfterTransition","index_entry","report","parse","toLocaleDateString","HTMLEntity","dateformat","Issues","updateTimeout","modalFormOpen","getList","apiPath","pathname","passState","index","AllHtmlEntities","decode","report_ts","report_date","resolve_ts","resolve_date","exec_ts","e","setState","success","issues","handleSubmit","dataset","update","state","find","concat","updateIssue","resolve","resolveIssue","onStatusSelect","onCommentTextChange","onChangeExecutionDate","Paper","Table","TableHead","TableRow","TableCell","TableBody","date","parseInt","reporter","rd","Chip","size","resolved","issuse_index_key","ButtonGroup","data-update","data-resolve","m","Component","TermsListItem","EmptyTerm","handleDeleteTerm","HierTerm","itemClass","ListItem","button","ListItemAvatar","ListItemIcon","ListItemText","primary","ListItemSecondaryAction","data-delete","ParentTerm","hierStyles","root","width","nested","paddingLeft","Collapse","in","timeout","unmountOnExit","List","disablePadding","Terms","create","bind","componentDidMount","onParentSelect","setInitialState","styles","eventTarget","password","parent","result","delete","createTerm","deleteTerm","slice","textContent","catch","reason","prevProps","TermsForm","termsFormStyles","flexGrow","height","control","Grid","container","justify","htmlFor","TermsOptionsList","data-create","data-slug","Options","error","role","access","toString","dateFormat","Summary","handleClickFind","status","IssueSearchForm","onClickFind","IssueSearchList","p","my","xs","mx","sm","md","style","flexShrink","menuButton","marginRight","DefaultPanel","username","AppBar","position","Toolbar","Link","to","Typography","IspPanel","user","handleSubmitLoginForm","form","exception","sessionStorage","clear","document","cookie","href","origin","getItem","setItem","toUpperCase","IspPanelAppBar","Boolean","hostname","match","createMuiTheme","overrides","MuiButton","cursor","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b02a1687.chunk.js","sourcesContent":["\nimport axios from \"axios\";\n\nclass IspCpConfig {\n    ApiProtocol = \"http\";\n    ApiHost = \"ispcp.onedext.ru\";\n    ApiPort = 8080;\n    ApiUrlPrefix = \"/api\";\n    LoggedIn = false;\n\n    constructor(props) {\n        axios.get(this.ApiRequest(\"/users/login\")).then(\n            (response) => {\n                this.setLoggedIn(response.data);\n            });\n    }\n\n    setLoggedIn(value)\n    {\n        this.LoggedIn = value;\n    }\n\n    ApiRequest(path) {\n        return this.ApiProtocol + \"://\" +\n            this.ApiHost +\n            (this.ApiPort ? \":\" + this.ApiPort : '') +\n            this.ApiUrlPrefix +\n            path;\n    }\n\n    ApiRootRequest(path) {\n        if (path.indexOf(\"?\") === -1) {\n            return this.ApiRequest(path + \"?role=99999999999&passwd=secret\")\n        } else {\n            return this.ApiRequest(path + \"&role=99999999999&passwd=secret\")\n        }\n    }\n}\n\nexport default new IspCpConfig();","export default class User {\n    id = 0;\n    email = \"\";\n    pass = \"\";\n    role;\n}","import Container from \"@material-ui/core/Container\";\nimport {Box, makeStyles} from \"@material-ui/core\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport React from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardActions from \"@material-ui/core/CardActions\";\n\n\nconst useStyles = makeStyles({\n    card: {\n        minwidth: 275,\n    },\n    bullet: {\n        display: 'inline-block',\n        margin: '0 2px',\n        transform: 'scale(0.8)',\n    },\n    title: {\n        fontSize: 14,\n    },\n    pos: {\n        marginBottom: 12,\n    },\n    cardContainer: {\n        marginTop: \"1.5em\",\n    }\n});\n\nexport default function LoginForm(props) {\n\n    const classes = useStyles();\n\n    return (\n        <Container className={classes.cardContainer} maxWidth={\"sm\"}>\n            <Card className={classes.card} component={\"form\"} onSubmit={props.onSubmit}>\n                <CardContent >\n                    <Box component={\"div\"}>\n                        <TextField type={\"email\"} name={\"email\"} placeholder={\"Login\"} defaultValue={props.email}/>\n                    </Box>\n                    <Box component={\"div\"}>\n                        <TextField type={\"password\"} name={\"pass\"} placeholder={\"Password\"} defaultValue={props.pass}>\n                            Password\n                        </TextField>\n                    </Box>\n\n\n                </CardContent>\n                <CardActions>\n                    <Button type={\"submit\"}>SGIN IN</Button>\n                </CardActions>\n            </Card>\n        </Container>\n    )\n}","import axios from \"axios\";\nimport IspCpConfig from \"./IspCpConfig\";\n\nclass IspCpHelper {\n    getUriParams() {\n        let params = window.location.search.substr(1).split(\"&\");\n        console.log(params);\n        let pairs = [];\n        params.forEach((param) => {\n            pairs.push(param.split(\"=\"));\n        });\n        return pairs;\n    }\n\n    callApi = (url,params) => {\n        let config = {params:Object.assign(axios.defaults.params,params)};\n        return axios.get(IspCpConfig.ApiRequest(url), config);\n    }\n\n    debug = (message) => {\n        if (window.location.host.startsWith('ctn.')) {\n            console.log(message);\n        }\n    }\n}\n\nexport default new IspCpHelper();","import Box from \"@material-ui/core/Box\";\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\nimport React from \"react\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport {FormControl, InputLabel} from \"@material-ui/core\";\n\nexport default function ChainedList(props) {\n    const onChange = props.onChange;\n    const children = props.children;\n\n    return (\n        <FormControl fullWidth={true} margin={\"dense\"}>\n            <InputLabel shrink={true}>{props.label}</InputLabel>\n            <NativeSelect name={props.id} onChange={onChange} id={props.id} value={props.value}>\n                <option value={0}></option>\n                {children.map(child => {\n                    return (<option value={child.id}>{child.title}</option>);\n                })}\n            </NativeSelect>\n        </FormControl>\n    );\n}","function IssueStatus() {\n    let id =0;\n    let title= 'Новая';\n    return this;\n};\n\nexport default IssueStatus;","import React from \"react\";\nimport {slugify} from \"transliteration\";\nimport Button from \"@material-ui/core/Button\";\nimport Modal from \"@material-ui/core/Modal\";\nimport Box from \"@material-ui/core/Box\";\nimport TextField from \"@material-ui/core/TextField\";\nimport {Input, makeStyles, NativeSelect} from \"@material-ui/core\";\nimport IspCpHelper from \"../IspCpHelper\";\nimport ChainedList from \"./ChainedList\";\nimport IssueStatus from \"../models/IssueStatus\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport MuiPhoneNumber from \"material-ui-phone-number\";\n\nconst dateformat = require(\"dateformat\");\n\nconst formStyles = makeStyles(theme => ({\n    modal: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    paper: {\n        backgroundColor: theme.palette.background.paper,\n        border: '2px solid #000',\n        boxShadow: theme.shadows[5],\n        padding: theme.spacing(2, 4, 3),\n    },\n}));\n\nexport default function IssueForm(props) {\n\n    const classes = formStyles();\n    const [open, setOpen] = React.useState(false);\n\n    const [address, setAddress] = React.useState({city: {}, street: {}, home: {}, flat: {}});\n    const [cities, setCities] = React.useState([]);\n    const [streets, setStreets] = React.useState([]);\n    const [homes, setHomes] = React.useState([]);\n    const [flats, setFlats] = React.useState([]);\n    const [engineers, setEngineers] = React.useState([])\n    const [engineer, setEngineer] = React.useState({id: 0, title: ''});\n\n    const afterReport = props.afterReport;\n\n    const handleClose = () => {\n        setOpen(false);\n    }\n\n    const handleOpen = () => {\n        setOpen(true);\n    }\n\n    const reportIssue = (event) => {\n        event.preventDefault();\n        let issue = Object.assign(\n            {address: address},\n            {engineer: engineer},\n            {comment: event.target.comment_new.value},\n            {report_status: new IssueStatus()},\n            {execution_date: new Date(event.target.execution_date.value).getTime() / 1000},\n            {contacts: event.target.contacts_phone.value}\n        );\n        Object.assign(issue, {history: [JSON.stringify(issue)]});\n        let url = \"/issues/report/\";\n        IspCpHelper.callApi(url, {comment: issue}).then(afterReport);\n        handleClose();\n    }\n\n    const onChangeAddress = (event) => {\n        var address_new = Object.assign({}, address);\n\n        IspCpHelper.debug(event.currentTarget);\n        IspCpHelper.debug(event.target);\n\n        switch (event.target.id) {\n            case \"city-new\":\n                address_new.city = {\n                    title: event.target.selectedOptions.item(0).text,\n                    id: event.target.value\n                };\n                address_new.city.title = event.target.selectedOptions.item(0).text;\n                IspCpHelper.callApi(\"/term/\" + address_new.city.id).then((response) => {\n                    setStreets(response.data.term.children || [])\n                });\n                break;\n            case \"street-new\":\n                address_new.street = {\n                    title: event.target.selectedOptions.item(0).text,\n                    id: event.target.value\n                };\n                IspCpHelper.callApi(\"/term/\" + address_new.street.id).then((response) => {\n                    setHomes(response.data.term.children || [])\n                });\n                break;\n            case \"home-new\":\n                address_new.home = {\n                    title: event.target.selectedOptions.item(0).text,\n                    id: event.target.value\n                };\n                IspCpHelper.callApi(\"/term/\" + address_new.home.id).then((response) => {\n                    setFlats(response.data.term.children || [])\n                });\n                break;\n            case \"flat-new\":\n                address_new.flat = {\n                    title: event.target.selectedOptions.item(0).text,\n                    id: event.target.value\n                };\n                break;\n        }\n        setAddress(address_new);\n    }\n\n    const onChangeEngineer = (event) => {\n        setEngineer({\n            title: event.target.selectedOptions.item(0).text,\n            id: event.target.value\n        })\n    }\n\n    if (cities.length === 0) {\n        IspCpHelper.callApi(\"/terms/\" + slugify(\"Адреса\")).then((response) => {\n            setCities(response.data.terms)\n        });\n    }\n\n    if (engineers.length === 0) {\n        IspCpHelper.callApi(\"/terms/\" + slugify(\"Монтажники\")).then((response) => {\n            setEngineers(response.data.terms)\n        });\n    }\n\n    const execution_date = undefined;\n    return (\n        <div>\n            <Button fullWidth={true} onClick={handleOpen} color=\"secondary\" variant={\"outlined\"}>REPORT</Button>\n            <Dialog\n                aria-labelledby=\"scroll-dialog-title\"\n                open={open}\n                onClose={handleClose}\n                scroll={\"body\"}\n            >\n                <DialogTitle id=\"scroll-dialog-title\">Создать заявку</DialogTitle>\n                <DialogContent dividers={false}>\n                    <DialogContentText>\n                        <Box component={\"form\"} onSubmit={reportIssue}>\n                            <ChainedList label=\"Город\" value={address.city.id||0} children={cities}\n                                         onChange={onChangeAddress} id={\"city-new\"}/>\n                            <ChainedList label=\"Улица\" value={address.street.id} children={streets}\n                                         onChange={onChangeAddress} id={\"street-new\"}/>\n                            <ChainedList label=\"Дом\" value={address.home.id} children={homes}\n                                         onChange={onChangeAddress}\n                                         id={\"home-new\"}/>\n                            <ChainedList label=\"Квартира\" value={address.flat.id} children={flats}\n                                         onChange={onChangeAddress} id={\"flat-new\"}/>\n                            <FormControl fullWidth={true} margin={\"dense\"}>\n                                <InputLabel shrink={true}>Монтажник</InputLabel>\n                                <NativeSelect value={engineer.id} onChange={onChangeEngineer} >\n                                    <option value={0}></option>\n                                    {\n                                        engineers.map(item => {\n                                            return (\n                                                <option value={item.id}>{item.title}</option>)\n                                        })\n                                    }\n                                </NativeSelect>\n                            </FormControl>\n                            <FormControl fullWidth={true} margin={\"dense\"}>\n                                <InputLabel shrink={true}>{\"Дата выполнения\"}</InputLabel>\n                                <Input id={\"date\"} type={\"date\"} name={\"execution_date\"} defaultValue={execution_date} />\n                            </FormControl>\n                            <MuiPhoneNumber\n                                id={\"issue-contact-phone\"}\n                                label={\"Контактный телефон\"}\n                                type={\"text\"}\n                                name={\"contacts_phone\"}\n                                onlyCountries={[\"ru\"]}\n                                defaultCountry={\"ru\"}\n                                fullWidth={true}\n                                countryCodeEditable={false}\n                            />\n                            <TextField\n                                label=\"Комментарий\"\n                                id={\"transition-modal-description\"}\n                                defaultValue={\"\"}\n                                margin=\"dense\"\n                                variant=\"outlined\"\n                                name={\"comment_new\"}\n                                InputLabelProps={{shrink:true}}\n                                fullWidth={true}\n                                multiline={true}\n                                rowsMax={5}\n                                rows={5}\n                            />\n                            <Button align={\"right\"} type=\"submit\" color=\"primary\" variant={\"contained\"}>REPORT</Button>\n                        </Box>\n                    </DialogContentText>\n                </DialogContent>\n            </Dialog>\n        </div>\n    );\n\n};","import Address from \"./Address\";\nimport Engineer from \"./Engineer\";\nimport IssueStatus from \"./IssueStatus\";\n\nfunction Issue() {\n    let id = 0;\n    let report_ts = 0;   // Дата постановки задачи\n    let exec_ts= 0;     // Дата передачи заявки исполнителю\n    let resolve_ts= 0;  // Дата закрытия заявки\n    let report_status= IssueStatus;    // Статус заявки\n    let address= Address;   // Адрес\n    let engineer= Engineer; // Исполнитель\n    let comment= '';        // Комментарий\n    let history=[];\n    return this;\n}\n\nexport default Issue;","export default class Term {\n\n    constructor(props) {\n        this.id = props.id || 0;\n        this.slug = props.slug || \"root\";\n        this.title = props.title || \"Корень\";\n        this.parentId = props.parentId || 0;\n        this.children = props.children || [];\n    }\n}","import React from 'react';\nimport {makeStyles, NativeSelect} from \"@material-ui/core\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Button from \"@material-ui/core/Button\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\nimport FolderIcon from '@material-ui/icons/Folder';\nimport Collapse from \"@material-ui/core/Collapse\";\nimport LabelIcon from '@material-ui/icons/Label';\nimport IspCpHelper from \"../IspCpHelper\";\nimport {slugify} from \"transliteration\";\nimport Term from \"../models/Term\";\nimport Select from \"@material-ui/core/Select\";\nimport {FormControl} from \"@material-ui/core\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\n\n\nconst ch = ()=>{\n    return 0;\n}\n\nfunction IssueStatusSelect(props)\n{\n    const [statuses, setStatuses] = React.useState([]);\n    const issue = props.issue;\n\n\n    const passStatuses = (response)=>{\n        setStatuses(response.data.terms);\n    }\n\n    if (statuses.length === 0) {\n        IspCpHelper.callApi('/terms/' + slugify('Статусы заявок')).then(passStatuses)\n    }\n\n    const input_props = {\n        \"data-issue_id\":issue.id\n    }\n\n    return(\n        <FormControl fullWidth={true} margin={\"dense\"}>\n            <InputLabel shrink={true}>Статус заявки</InputLabel>\n            <NativeSelect inputProps={input_props} value={issue.report_status.id} onChange={props.onChange}>\n                <option value={0}></option>\n                {statuses.map((option, index_key)=>{\n                    return(\n                        <option value={option.id}>{option.title}</option>\n                    );\n                })}\n            </NativeSelect>\n        </FormControl>\n    );\n}\n\nexport default IssueStatusSelect;","import Address from \"./Address\";\nimport Engineer from \"./Engineer\";\nimport IssueStatus from \"./IssueStatus\";\n\nfunction IssueUpdateReport () {\n    let address = Address;\n    let engineer = Engineer;\n    let comment=\"\";\n    let report_status=IssueStatus;\n    let execution_date=0;\n    return this;\n};\n\nexport default IssueUpdateReport;","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Modal from \"@material-ui/core/Modal\";\nimport Box from \"@material-ui/core/Box\";\nimport {makeStyles, NativeSelect} from \"@material-ui/core\";\nimport GridList from \"@material-ui/core/GridList\";\nimport GridListTile from \"@material-ui/core/GridListTile\";\nimport IspCpHelper from \"../IspCpHelper\";\n\nconst formStyles = makeStyles(theme => ({\n    modal: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    paper: {\n        backgroundColor: theme.palette.background.paper,\n        border: '2px solid #000',\n        boxShadow: theme.shadows[5],\n        padding: theme.spacing(2, 4, 3),\n    },\n}));\n\nexport default function IssueHistory(props) {\n\n    const classes = formStyles();\n    const [open, setOpen] = React.useState(false);\n\n    const handleClose = () => {\n        setOpen(false);\n    }\n\n    const handleOpen = () => {\n        setOpen(true);\n    }\n\n    if (props.history.length===0) {\n        return('');\n    }\n    const key_prefix = \"index-issue-\" + props.issue_id + \"history-entry-\";\n    return ([\n            <Button fullWidth={true} key={key_prefix + \"button\"} onClick={handleOpen} color=\"secondary\" variant={\"outlined\"}>History</Button>,\n            <Modal\n                aria-labelledby=\"transition-modal-title\"\n                aria-describedby=\"transition-modal-description\"\n                open={open}\n                closeAfterTransition\n                onClose={handleClose}\n                className={classes.modal}\n                key={key_prefix + \"modal\"}\n            >\n\n                <Box component={\"div\"} className={classes.paper}>\n                    <h2 id=\"transition-modal-title\">REPORT #{props.issue_id} HISTORY</h2>\n                    {props.history.map((index_entry,index_key)=>{\n                        const report = JSON.parse(index_entry);\n                        IspCpHelper.debug(report);\n                        const report_status = report.report_status.title||'Новая';\n                        const execution_date = (report.execution_date != undefined && report.execution_date != \"\" && report.execution_date != 0)?\"назначена на \" + new Date(report.execution_date*1000).toLocaleDateString() : \"\";\n                        return([\n                            <Box component={\"div\"}>\n                                {report_status}, &nbsp;Монтажник:&nbsp;{report.engineer.title}, &nbsp; {execution_date}\n                            </Box>,\n                            <Box component={\"div\"}>\n                                Адрес:&nbsp;{report.address.city.title}/{report.address.street.title}/{report.address.home.title}/{report.address.flat.title}\n                            </Box>,\n                            <Box component={\"div\"}>\n                                Примечание:&nbsp;{report.comment}\n                            </Box>,\n                            <Box component={\"p\"}/>\n                        ]);\n                    })}\n                </Box>\n            </Modal>\n    ]);\n\n};","import React from 'react';\nimport Button from \"@material-ui/core/Button\";\nimport Paper from \"@material-ui/core/Paper\";\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\nimport TextField from '@material-ui/core/TextField';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport {slugify} from 'transliteration';\nimport IspCpHelper from \"../IspCpHelper\";\nimport IssueForm from \"./IssueForm\";\nimport Chip from \"@material-ui/core/Chip\";\n\nimport Issue from \"../models/Issue\";\nimport IssueStatusSelect from \"./IssueStatusSelect\";\nimport IssueStatus from \"../models/IssueStatus\";\nimport IssueUpdateReport from \"../models/IssueUpdateReport\";\nimport IssueHistory from \"./IssueHistory\";\nimport Box from \"@material-ui/core/Box\";\n\nconst HTMLEntity = require(\"html-entities\");\nconst IsJSON = require(\"is-json\");\nconst dateformat = require(\"dateformat\");\n\nexport default class Issues extends React.Component {\n    updateTimeout = 10000;\n    modalFormOpen = true;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            success: false,\n            data: [],\n            issues: [],\n        };\n        this.getList();\n    }\n\n    getList = () => {\n        IspCpHelper.debug(\"get list action\");\n        let apiPath = \"/issues/\";\n        let location = this.props.location.pathname;\n        if (location.startsWith(\"/issues/\") && location.length > \"/issues/\".length) {\n            apiPath = location;\n        }\n        IspCpHelper.callApi(apiPath).then(this.passState);\n    }\n\n    passState = (response) => {\n        IspCpHelper.debug(\"passing state to component\");\n        IspCpHelper.debug(response);\n\n        var index = response.data.index;\n\n        index.map((index_entry, index_key) => {\n            try {\n                let issue = Object.assign(new Issue(),index_entry);\n                let comment = JSON.parse(HTMLEntity.AllHtmlEntities.decode(index_entry.comment));\n\n                if (typeof comment === \"object\") {\n                    issue = Object.assign(issue, comment);\n                } else {\n                    issue.comment = comment;\n                }\n\n                issue.report_ts = issue.report_date || issue.report_ts;\n                issue.resolve_ts = issue.resolve_date || issue.report_ts;\n                issue.exec_ts = issue.execution_date || issue.exec_ts;\n                issue.report_status = Object.assign(new IssueStatus(),issue.report_status);\n                issue.history = issue.history || [];\n\n                Object.assign(index[index_key],issue);\n\n            } catch (e) {\n                IspCpHelper.debug(e);\n            }\n        });\n\n        this.setState(\n            {\n                success: response.data.success,\n                data: index,\n                issues: index\n            });\n\n    };\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        IspCpHelper.debug(event.currentTarget);\n\n        if (event.currentTarget.dataset.update) {\n            IspCpHelper.debug(event.currentTarget.dataset.update);\n\n            const issue = this.state.issues.find(index_entry=>{\n                return index_entry.id == event.currentTarget.dataset.update\n            });\n\n            let history = issue.history || [];\n            let report = {\n                address: issue.address,\n                engineer: issue.engineer,\n                comment: issue.comment,\n                report_status: issue.report_status,\n                execution_date: (typeof issue.execution_date === \"string\")?new Date(issue.execution_date).getTime()/1000:issue.execution_date,\n                contacts: issue.contacts\n            };\n            Object.assign(report,{history:history.concat(JSON.stringify(report))});\n            IspCpHelper.debug(report);\n            this.updateIssue(event.currentTarget.dataset.update, report);\n        }\n        if (event.currentTarget.dataset.resolve) {\n            IspCpHelper.debug(event.currentTarget.dataset. resolve);\n\n            const issue = this.state.issues.find(index_entry=>{\n                return index_entry.id == event.currentTarget.dataset.resolve\n            });\n\n            let history = issue.history || [];\n            let report = {\n                address: issue.address,\n                engineer: issue.engineer,\n                comment: issue.comment,\n                report_status: {\"id\":\"31\",\"title\":\"Решена\"},\n                execution_date: (typeof issue.execution_date === \"string\")?new Date(issue.execution_date).getTime()/1000:issue.execution_date,\n                contacts: issue.contacts\n            };\n            Object.assign(report,{history:history.concat(JSON.stringify(report))});\n            IspCpHelper.debug(report);\n            this.updateIssue(event.currentTarget.dataset.resolve, report);\n\n            IspCpHelper.debug(\"Resolve \" + event.currentTarget.dataset.resolve);\n            this.resolveIssue(event.currentTarget.dataset.resolve);\n        }\n    }\n\n    resolveIssue = (id) => {\n        IspCpHelper.callApi(\"/issues/resolve/\" + id).then(this.getList);\n    }\n\n    updateIssue(id, report) {\n        const data = {\n            comment: JSON.stringify(report)\n        }\n        IspCpHelper.callApi(\"/issues/update/\" + id,data ).then(this.getList);\n    }\n\n    onStatusSelect = (event) => {\n        IspCpHelper.debug(event.target.value);\n        IspCpHelper.debug(event.target.dataset);\n        const issue = this.state.issues.find(index_entry=>{\n            return index_entry.id === event.target.dataset.issue_id\n        });\n        if (event.target.value == 31) {\n            this.handleSubmit({currentTarget:{dataset:{update:false,resolve:event.target.dataset.issue_id}}, preventDefault:()=>{}});\n            return;\n        }\n        let report_status = new IssueStatus();\n        let report = new IssueUpdateReport();\n        let history = issue.history || [];\n        report.address = issue.address;\n        report.engineer = issue.engineer;\n        report.comment = issue.comment;\n        report.execution_date = (typeof issue.execution_date === \"string\")?new Date(issue.execution_date).getTime()/1000:issue.execution_date;\n        report_status.id = event.target.value;\n        report_status.title= event.target.selectedOptions.item(0).text;\n        IspCpHelper.debug(report_status);\n        report.report_status = report_status;\n        report.contacts = issue.contacts;\n        IspCpHelper.debug(report);\n        Object.assign(report,{history:history.concat(JSON.stringify(report))});\n        this.updateIssue(issue.id,report);\n    }\n\n    onCommentTextChange = (event) => {\n        IspCpHelper.debug(event.target.value);\n        IspCpHelper.debug(event.target.dataset.issue_id);\n        const issue = this.state.issues.find(index_entry=>{\n            return index_entry.id === event.target.dataset.issue_id\n        });\n        issue.comment = event.target.value;\n    }\n\n    onChangeExecutionDate = (event) => {\n        IspCpHelper.debug(event.target.value)\n        IspCpHelper.debug(new Date(event.target.value).getTime()/1000)\n        IspCpHelper.debug(event.target.dataset.issue_id);\n        const issue = this.state.issues.find(index_entry=>{\n            return index_entry.id === event.target.dataset.issue_id\n        });\n        issue.execution_date= new Date(event.target.value).getTime()/1000;\n    }\n\n\n    render() {\n        IspCpHelper.debug(\"component render\");\n        if (this.state.success) {\n            const index = this.state.issues;\n\n            IspCpHelper.debug(index);\n            return (\n                <Paper>\n                    <Table>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell></TableCell>\n                                <TableCell></TableCell>\n                                <TableCell>\n                                    <IssueForm afterReport={this.getList}/>\n                                </TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>{index.map((index_entry, index_key) => {\n                            const execution_date = () => {\n                                if (index_entry.execution_date == undefined || index_entry.execution_date == \"\") {\n                                    return undefined;\n                                } else {\n                                    let date = new Date(index_entry.execution_date * 1000);\n                                    return dateformat(date,\"yyyy-mm-dd\");\n                                }\n                            }\n                            const resolved = () => {\n                                if(index_entry.resolve_date > 0) {\n                                    const rd = new Date(parseInt(index_entry.resolve_ts) * 1000).toLocaleDateString();\n                                    return (\n                                        <Chip\n                                            size={\"medium\"}\n                                            label={\"Выполнена: \" + rd}\n                                            color=\"secondary\"\n                                        />\n                                    )\n                                }\n                                return('');\n                            }\n\n                            IspCpHelper.debug(execution_date());\n                            return (\n                                <TableRow key={\"index-issues-key-\" + index_key}>\n                                    <TableCell>\n                                        <Box>{index_entry.id}</Box>\n                                        <Box component={\"div\"}>\n                                            {new Date(parseInt(index_entry.report_ts) * 1000).toLocaleDateString()}\n                                        </Box>\n                                        <Box component={\"div\"}>\n                                            by {index_entry.reporter.split(\"@\")[0]}\n                                        </Box>\n                                        <Box>\n                                            {resolved()}\n                                        </Box>\n                                        <Box>\n                                            {index_entry.address.city.title} /\n                                            {index_entry.address.street.title} /\n                                            {index_entry.address.home.title} /\n                                            {index_entry.address.flat.title}\n                                        </Box>\n                                        <Box>\n                                            Контакты: {index_entry.contacts||\"\"}\n                                        </Box>\n                                    </TableCell>\n                                    <TableCell>\n                                        <IssueStatusSelect issue={index[index_key]} issuse_index_key={index_key}\n                                                           defaultValue={index_entry.report_status.id}\n                                                           onChange={this.onStatusSelect}/>\n                                    <TextField\n                                        id=\"date\"\n                                        label=\"Дата выполнения\"\n                                        type=\"date\"\n                                        name={\"execution_date\"}\n                                        defaultValue={execution_date()}\n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                        onChange={this.onChangeExecutionDate}\n                                        inputProps={{\"data-issue_id\":index_entry.id}}\n                                        fullWidth={true}\n                                    />\n                                        <Box>\n                                            Монтажник: {index_entry.engineer.title}\n                                        </Box>\n                                        <TextField\n                                            label=\"Комментарий\"\n                                            id={\"comment-\" + index_entry.id}\n                                            defaultValue={index_entry.comment}\n                                            margin=\"normal\"\n                                            variant=\"outlined\"\n                                            onChange={this.onCommentTextChange}\n                                            inputProps={{\"data-issue_id\":index_entry.id}}\n                                            fullWidth={true}\n                                            rows={5}\n                                            rowsMax={5}\n                                        />\n                                    </TableCell>\n                                    <TableCell>\n                                        <ButtonGroup size=\"small\" fullWidth={true}>\n                                            <Button type=\"button\" onClick={this.handleSubmit} data-update={index_entry.id}\n                                                    color=\"primary\">\n                                                UPDATE\n                                            </Button>\n                                            <Button type=\"button\" onClick={this.handleSubmit} data-resolve={index_entry.id}\n                                                    color=\"secondary\">\n                                                RESOLVE\n                                            </Button>\n                                        </ButtonGroup>\n                                        <Box component={\"div\"} m={[0,1]}>\n                                        <IssueHistory issue_id={index_entry.id} history={index_entry.history}/>\n                                        </Box>\n                                    </TableCell>\n                                </TableRow>\n                            );\n                        })\n                        }\n                        </TableBody>\n                    </Table>\n                </Paper>\n            );\n        }\n        return ('');\n    }\n}\n\n\n\n","import React from 'react';\nimport {makeStyles} from \"@material-ui/core\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Button from \"@material-ui/core/Button\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\nimport FolderIcon from '@material-ui/icons/Folder';\nimport Collapse from \"@material-ui/core/Collapse\";\nimport LabelIcon from '@material-ui/icons/Label';\n\nexport default function TermsListItem(props) {\n    console.log(\"I'm TermsListItem : \");\n    console.log(props);\n    const item = (props.term.children.length === 0) ?\n        <EmptyTerm key={\"term-\" + props.term.id} title={props.term.title} handleDeleteTerm={props.handleDeleteTerm} id={props.term.id}/> :\n        <HierTerm key={\"term-\" + props.term.id} term={props.term} handleDeleteTerm={props.handleDeleteTerm} id={props.term.id}/>;\n    return (item);\n}\n\n/**\n *\n * @param props\n * @constructor\n */\nfunction EmptyTerm(props) {\n    const itemClass = props.className || \"\";\n    return (\n        <ListItem key={\"term-\" + props.id} button className={itemClass}>\n            <ListItemAvatar>\n                <ListItemIcon>\n                    <LabelIcon/>\n                </ListItemIcon>\n            </ListItemAvatar>\n            <ListItemText primary={props.title}/>\n            <ListItemSecondaryAction>\n                <Button type=\"button\" onClick={props.handleDeleteTerm} data-delete={props.id} color=\"primary\"\n                        variant={\"outlined\"}>\n                    DELETE\n                </Button>\n            </ListItemSecondaryAction>\n        </ListItem>\n    );\n}\n\n/**\n *\n * @param props\n * @constructor\n */\nfunction ParentTerm(props) {\n    const itemClass = props.className || \"\";\n    return (\n        <ListItem key={\"term-\" + props.id} button className={itemClass} onClick={props.onClick}>\n            <ListItemAvatar>\n                <ListItemIcon>\n                    <FolderIcon/>\n                </ListItemIcon>\n            </ListItemAvatar>\n            <ListItemText primary={props.title}/>\n            <ListItemSecondaryAction>\n                <Button type=\"button\" onClick={props.handleDeleteTerm} data-delete={props.id} color=\"primary\"\n                        variant={\"outlined\"}>\n                    DELETE\n                </Button>\n            </ListItemSecondaryAction>\n        </ListItem>\n    );\n}\n\nconst hierStyles = makeStyles(theme => ({\n    root  : {\n        width          : '100%',\n        maxWidth       : 360,\n        backgroundColor: theme.palette.background.paper,\n    },\n    nested: {\n        paddingLeft: theme.spacing(4),\n    },\n}));\n\nfunction HierTerm(props) {\n    const classes = hierStyles();\n    const [open, setOpen] = React.useState(false);\n\n    const handleClick = () => {\n        setOpen(!open);\n    };\n\n    return ([\n        <ParentTerm key={\"term-\" + props.term.id + \"-root\"} title={props.term.title} handleDeleteTerm={props.handleDeleteTerm} onClick={handleClick} id={props.term.id}/>,\n        <Collapse key={\"term-\" + props.term.id + \"-collapse\"} in={open} timeout=\"auto\" unmountOnExit>\n            <List key={\"term-\" + props.term.id + \"-neseted\"} component=\"div\" disablePadding className={classes.nested}>\n                {\n                    props.term.children.map(child => {\n                        return (\n                            <TermsListItem key={\"term-\" + child.id} term={child}\n                                           handleDeleteTerm={props.handleDeleteTerm} id={child.id}/>\n                        );\n                    })\n                }\n            </List>\n        </Collapse>\n    ]);\n}","import React from 'react';\nimport axios from 'axios';\nimport IspCpConfig from \"../IspCpConfig\";\nimport {slugify} from 'transliteration';\nimport {\n    Box,\n    Button,\n    FormControl,\n    Grid,\n    Input,\n    InputLabel,\n    List,\n    makeStyles,\n    NativeSelect,\n    TextField\n} from \"@material-ui/core\";\n\nimport Term from \"../models/Term\";\nimport TermsListItem from \"./TermsListItem\";\n\nvar he = require('he');\n\nexport default class Terms extends React.Component {\n\n    updateTimeout;\n\n    constructor(props) {\n        super(props);\n        console.log(\"I'm constructor\");\n        this.state = {\n            success: false,\n            terms: [],\n            create: new Term({})\n        };\n        console.log(\"My state is \" + JSON.stringify(this.state));\n        this.updateTimeout = 10000;\n        this.onSubmit = this.onSubmit.bind(this);\n        this.componentDidMount = this.componentDidMount.bind(this);\n        this.onParentSelect = this.onParentSelect.bind(this);\n        this.setInitialState = this.setInitialState.bind(this);\n        this.setInitialState();\n        this.styles = makeStyles(theme => ({\n            root: {\n                width: '100%',\n                maxWidth: 360,\n                backgroundColor: theme.palette.background.paper,\n            },\n            nested: {\n                paddingLeft: theme.spacing(4),\n            },\n        }));\n    }\n\n    createTerm(eventTarget) {\n        let url = IspCpConfig.ApiRequest(\"/terms/create/\");\n        axios.get(url, {\n            params: {\n                email: axios.defaults.params.email,\n                password: axios.defaults.params.password,\n                slug: eventTarget.slug.value,\n                title: eventTarget.title.value,\n                parent: eventTarget.parent.value\n            }\n        }).then(\n            result => {\n                this.setState({\n                    create: new Term({})\n                });\n                this.componentDidMount();\n            })\n    }\n\n    deleteTerm(id) {\n        let url = IspCpConfig.ApiRequest(\"/terms/delete/\");\n        axios.get(url, {\n            params: {\n                email: axios.defaults.params.email,\n                password: axios.defaults.params.password,\n                id: id\n            }\n        }).then(\n            result => {\n                this.componentDidMount();\n            })\n    }\n\n    onSubmit(event) {\n        console.log(event.currentTarget.dataset.delete);\n        event.preventDefault();\n        if (event.target.create) {\n            this.createTerm(event.target);\n        }\n        if (event.currentTarget.dataset.delete) {\n            this.deleteTerm(event.currentTarget.dataset.delete);\n        }\n    }\n\n    onParentSelect(event) {\n\n        console.log(event.target.value);\n        let slice = this.state.create;\n        slice.parentId = event.target.value;\n        slice.slug = slugify(event.target.selectedOptions.item(0).textContent);\n        const create = slice;\n        this.setState({\n            create: create\n        });\n    }\n\n\n    componentDidMount() {\n\n        console.log(\"I'm diMount\");\n        let apiPath = IspCpConfig.ApiRequest(\"/terms/\");\n        let location = this.props.location.pathname;\n        if (location.startsWith(\"/terms/\") && location.length > \"/terms/\".length) {\n            apiPath = IspCpConfig.ApiRequest(location);\n        }\n\n        axios.get(apiPath, {\n            params: {\n                email: axios.defaults.params.email,\n                password: axios.defaults.params.password\n            }\n        })\n            .then(\n                result => {\n                    console.log(\"Did mount api result : \" + JSON.stringify(result));\n                    this.setState({\n                        success: result.data.success,\n                        terms: result.data.terms,\n                        create: {children: [new Term({})].concat(result.data.terms)}\n                    });\n                }\n            )\n            .catch(reason => {\n                console.log(reason)\n            })\n    }\n\n    setInitialState() {\n    }\n\n    componentDidUpdate(prevProps) {\n        console.log(prevProps.location);\n        console.log(this.props.location);\n        if (this.props.location !== prevProps.location) {\n            this.componentDidMount();\n        }\n    }\n\n    render() {\n        console.log(\"I'm render\");\n        console.log(this.state);\n        // setTimeout(this.componentDidMount, this.updateTimeout);\n\n        const list = (state) => {\n            console.log(\"Im arow list func\");\n            console.log(state);\n            if (state.success === false) {\n                return ('');\n            } else {\n                return (\n                    <List component={\"div\"}>\n                        {state.terms.map(term => {\n                            return (\n                                <TermsListItem key={term.id} term={term}\n                                               handleDeleteTerm={this.onSubmit}></TermsListItem>\n                            )\n                        })}\n                    </List>\n                )\n            }\n        };\n\n        return (\n            <Box component={\"div\"}>\n                {list(this.state)}\n                <TermsForm\n                    term={this.state.create}\n                    onSubmit={this.onSubmit}\n                    onChange={this.onParentSelect}\n                />\n            </Box>\n        );\n    }\n}\n\nconst termsFormStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n    },\n    paper: {\n        height: 140,\n        width: 100,\n    },\n    control: {\n        padding: theme.spacing(2),\n    },\n}));\n\nfunction TermsForm(props) {\n    const classes = termsFormStyles();\n    console.log(\"Form props : \" + JSON.stringify(props));\n\n    return (\n        <Box component={\"form\"} onSubmit={props.onSubmit} variant={\"outlined\"}>\n\n            <Grid container justify=\"flex-start\" spacing={4}>\n                <Grid key={0} item>\n                    <TextField\n                        label={\"Название\"}\n                        name={\"title\"}\n                        defaultValue={''}\n                        variant={\"standard\"}\n                    >\n                    </TextField>\n                </Grid>\n                <Grid key={1} item>\n                    <FormControl>\n                        <InputLabel shrink htmlFor=\"parent-id-select\">\n                            Родитель\n                        </InputLabel>\n                        <NativeSelect\n                            onChange={props.onChange}\n                            inputProps={{\n                                name: 'parent',\n                                id: 'parent-id-select',\n                            }}\n                            value={props.term.parentId}\n                        >\n                            <TermsOptionsList key={\"terms-options-list\" + props.term.id} term={props.term}/>\n                        </NativeSelect>\n                    </FormControl>\n                </Grid>\n                <Grid key={2} item>\n                    <Button data-create={0} type={\"submit\"} variant={\"outlined\"} color={\"primary\"}\n                            size={\"large\"}>SUBMIT</Button>\n                </Grid>\n            </Grid>\n\n            <Input type={\"hidden\"} name={\"create\"} value={0}/>\n            <Input type={\"hidden\"} name={\"slug\"} value={props.term.slug}/>\n\n\n        </Box>\n    );\n}\n\nfunction TermsOptionsList(props) {\n    console.log(props.term);\n    if (props.term.children.length === 0) {\n        return (\n            <option key={\"terms-option\" + props.term.id} value={props.term.id}\n                    data-slug={slugify(props.term.title)}>{props.term.title}</option>\n        );\n    } else {\n        console.log(\"ImOptionsList\");\n        console.log(props.term);\n        return ([\n            props.term.id && <option key={\"terms-option\" + props.term.id} value={props.term.id}>{props.term.title}</option>,\n\n            props.term.children.map(child =>\n                <TermsOptionsList key={\"terms-options-list\" + child.id} term={child}/>\n            )\n\n        ]);\n    }\n}\n\n\n\n","import React from \"react\";\nimport axios from \"axios\"\nimport IspCpConfig from \"../IspCpConfig\";\n\nexport default class Options extends React.Component {\n    state = {\n        success: false,\n        name: undefined,\n        value: undefined\n    }\n\n    constructor(props) {\n        super(props)\n    }\n\n    componentDidMount() {\n        axios.get(IspCpConfig.ApiRequest(\"/options/get/roles\"))\n            .then(\n                (result) => {\n                    console.log(this.state);\n                    this.setState(result.data);\n                    console.log(this.state);\n                }\n            )\n            .catch(\n                (error) => {\n                    console.log(error);\n                }\n            )\n    }\n\n    render() {\n        if (this.state.success) {\n            const {role} = JSON.parse(this.state.value.value);\n            return (\n                <div>\n                    <p>{role.id}.{role.name}[{role.access.toString()}]</p>\n                </div>\n            );\n        }\n        return '';\n    }\n\n}\n\n\n//{value.map(prop=>{<p>{prop}</p>})}\n","import React from \"react\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport {Input, NativeSelect} from \"@material-ui/core\";\nimport IspCpHelper from \"../IspCpHelper\";\nimport {slugify} from \"transliteration\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Box from \"@material-ui/core/Box\";\nimport Button from \"@material-ui/core/Button\";\nimport Chip from \"@material-ui/core/Chip\";\n\nconst HTMLEntity = require(\"html-entities\");\nconst dateFormat = require(\"dateformat\");\n\nexport default class Summary extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            index: []\n        }\n    }\n\n    handleClickFind = (event) => {\n        event.preventDefault();\n        IspCpHelper.debug(event.target);\n\n        var status = \"/\" + event.target.status.value;\n        var date = \"/\" + event.target.date.value;\n        IspCpHelper.callApi('/summary' + date + status,{}).then((response) => {\n            this.setState({index: response.data.index})\n        })\n    }\n\n    render() {\n        return ([\n            <IssueSearchForm key={\"issue-search-form\"} onClickFind={this.handleClickFind}/>,\n            <IssueSearchList key={\"issue-search-list\"} index={this.state.index}/>\n        ]);\n    }\n}\n\nfunction IssueSearchForm(props) {\n    const [statuses, setStatuses] = React.useState([]);\n\n\n    const passStatuses = (response) => {\n        setStatuses(response.data.terms);\n    }\n\n    if (statuses.length === 0) {\n        IspCpHelper.callApi('/terms/' + slugify('Статусы заявок')).then(passStatuses)\n    }\n\n    return (\n        <Box component={\"div\"} p={4} my={2} boxShadow={4}>\n            <form onSubmit={props.onClickFind}>\n                <Grid container={true}>\n                    <Grid item={true} xs={2}>\n                        <FormControl fullWidth={true} margin={\"dense\"}>\n                            <InputLabel shrink={true}>{\"Дата\"}</InputLabel>\n                            <Input id={\"date\"} type={\"date\"} name={\"date\"} defaultValue={dateFormat(\"yyyy-mm-dd\")}/>\n                        </FormControl>\n                    </Grid>\n                    <Grid item={true} xs={2}>\n                        <FormControl fullWidth={true} margin={\"dense\"}>\n                            <InputLabel shrink={true}>Статус заявки</InputLabel>\n                            <NativeSelect name={\"status\"} defaultValue={\"closed\"}>\n                                <option value={\"closed\"}>Завершенные</option>\n                                <option value={\"new\"}>Новые</option>\n                                <option value={\"progress\"}>В работе</option>\n                            </NativeSelect>\n                        </FormControl>\n                    </Grid>\n                    <Grid item={true} xs={2}>\n                        <Box mx={4}>\n                            <Button type=\"submit\" color=\"primary\" variant={\"contained\"} size={\"large\"}>\n                                FIND\n                            </Button>\n                        </Box>\n                    </Grid>\n                </Grid>\n            </form>\n        </Box>\n    );\n}\n\nfunction IssueSearchList(props) {\n    IspCpHelper.debug(props);\n    return (\n        <Box component={\"div\"} p={4} my={2} boxShadow={4}>\n            <Grid container>\n                {props.index.map((index_entry, index_key) => {\n                    const comment = JSON.parse(HTMLEntity.AllHtmlEntities.decode(index_entry.comment));\n                    const resolved = () => {\n                        if (index_entry.resolve_date > 0) {\n                            const rd = new Date(parseInt(index_entry.resolve_date) * 1000).toLocaleDateString();\n                            return (\n                                <Chip\n                                    size={\"small\"}\n                                    label={\"Выполнена: \" + rd}\n                                    color=\"secondary\"\n                                />\n                            )\n                        }\n                        return (\n                            <Chip\n                                size={\"small\"}\n                                label={\"Не закрыта\"}\n                                color=\"primary\"\n                            />\n                        );\n                    }\n                    return (\n                        <Box component={\"div\"} p={0.5} my={0.5} width={1}>\n                            <Grid container item sm={12} justify={\"space-between\"} spacing={2}>\n                                <Grid item sm={12} md={\"auto\"} style={{flexShrink: 0}}>\n                                    <Box my={0.3}>\n                                        {resolved()}\n                                    </Box>\n                                    <Box my={0.3}>\n                                        <Chip\n                                            size={\"small\"}\n                                            label={(comment.report_status.title || \"Новая\")}\n                                        />\n                                    </Box>\n                                </Grid>\n                                <Grid item sm={12} md={\"auto\"} style={{flexShrink: 0}}>\n                                    {comment.address.city.title} /\n                                    {comment.address.street.title} /\n                                    {comment.address.home.title} /\n                                    {comment.address.flat.title}\n                                </Grid>\n                                <Grid item sm={12} md={\"auto\"}>\n                                    {comment.contacts}\n                                </Grid>\n                                <Grid item sm={12} md={\"auto\"}>\n                                    {comment.engineer.title}\n                                </Grid>\n                                <Grid item sm={12} md={\"auto\"}>\n                                    {comment.comment}\n                                </Grid>\n                            </Grid>\n                        </Box>\n                    );\n                })}\n            </Grid>\n        </Box>\n    );\n}","import React from \"react\";\nimport {BrowserRouter as Router, Link, Route} from \"react-router-dom\";\nimport Button from \"@material-ui/core/Button\";\nimport Issues from \"./Issues\";\nimport Terms from \"./Terms\";\nimport Options from \"./Options\";\nimport {AppBar, makeStyles} from \"@material-ui/core\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport MenuIcon from '@material-ui/icons/Menu';\nimport IspPanel from \"./IspPanel\";\nimport Divider from '@material-ui/core/Divider';\nimport Summary from \"./Summary\";\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n    },\n    menuButton: {\n        marginRight: theme.spacing(1),\n        color: \"white\"\n    },\n    title: {\n        flexGrow: 1,\n    },\n}));\n\nexport default function DefaultPanel(props) {\n    const classes = useStyles();\n    const username = props.username || '';\n    const [anchorEl, setAnchorEl] = React.useState(null);\n\n    const handleClick = (event) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n    return ([\n        <Router key={\"app-router\"}>\n            <AppBar position=\"static\">\n                <Toolbar>\n\n                    <Button component={Link} to=\"/\" color={\"primary\"}\n                            variant={\"text\"} className={classes.menuButton}>Home</Button>\n                    <Button component={Link} to=\"/issues/\" color={\"primary\"}\n                            variant={\"text\"} className={classes.menuButton}>Issues</Button>\n                    <Button component={Link} to=\"/terms/\" color={\"primary\"}\n                            variant={\"text\"} className={classes.menuButton}>Terms</Button>\n                    <Button component={Link} to=\"/summary/\" color={\"primary\"}\n                            variant={\"text\"} className={classes.menuButton}>Summary</Button>\n                    <Button component={Link} to=\"/logout/\" color={\"primary\"}\n                            variant={\"text\"} className={classes.menuButton}>Log out</Button>\n\n                    <Typography variant=\"h6\" className={classes.title} align={\"right\"}>\n                        {username}@ISP.CP\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n            <Route path=\"/issues\" component={Issues}/>\n            <Route path=\"/terms\" component={Terms}/>\n            <Route path=\"/options\" component={Options}/>\n            <Route path=\"/summary\" component={Summary}/>\n            <Route path=\"/logout\" component={IspPanel}/>\n        </Router>\n    ]);\n}","import React from \"react\";\nimport axios from \"axios\";\nimport IspCpConfig from \"../IspCpConfig\";\nimport User from \"../models/User\";\nimport LoginForm from \"./LoginForm\";\nimport DefaultPanel from \"./DefaultPanel\";\nimport {AppBar} from \"@material-ui/core\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Typography from \"@material-ui/core/Typography\";\nimport MenuIcon from '@material-ui/icons/Menu';\nimport {makeStyles} from \"@material-ui/core\";\n\nimport MenuList from \"@material-ui/core/MenuList\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Menu from \"@material-ui/core/Menu\";\nimport IspCpHelper from \"../IspCpHelper\";\n\nexport default class IspPanel extends React.Component {\n\n    constructor(props) {\n        super(props);\n        const user = new User();\n        this.state = {\n            user: user\n        }\n        this.handleSubmitLoginForm = this.handleSubmitLoginForm.bind(this);\n    }\n\n    handleSubmitLoginForm(event) {\n        event.preventDefault();\n        const form = event.currentTarget;\n        const user = User;\n        user.email = form.email.value;\n        user.pass = form.pass.value;\n\n\n        axios.get(IspCpConfig.ApiRequest(\"/users/login\"), {\n            params: {email: user.email, password: user.pass}\n        }).then(response => {\n            user.id = response.data.item.id || undefined;\n            this.setState({\n                user: user\n            });\n        }).catch((exception) => {\n            console.log(exception);\n        });\n    }\n\n    render() {\n        if (window.location.pathname === '/logout/') {\n            sessionStorage.clear();\n            IspCpHelper.debug(document.cookie);\n            IspCpHelper.callApi(\"/users/logout\");\n            window.location.href = window.location.origin;\n        }\n        const email = sessionStorage.getItem(\"email\") || this.state.user.email;\n        const pass = sessionStorage.getItem(\"password\") || this.state.user.pass;\n        const id = this.state.user.id || sessionStorage.getItem(\"id\");\n        if (parseInt(id) > 0) {\n            axios.defaults.params = {\n                email: email,\n                password: pass\n            };\n            sessionStorage.setItem(\"id\",id);\n            sessionStorage.setItem(\"email\",email);\n            sessionStorage.setItem(\"password\",pass);\n            const username = email.split(\"@\")[0].toUpperCase();\n\n            return ([<DefaultPanel key={\"app-default-panel\"} username={username}/>]);\n        }\n        return ([<IspPanelAppBar key={\"app-bar\"}/>, <LoginForm key={\"login-form\"} onSubmit={this.handleSubmitLoginForm} email={email} pass={pass}/>]);\n    }\n\n}\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        flexGrow: 1,\n    },\n}));\n\n\nfunction IspPanelAppBar(props) {\n    const classes = useStyles();\n    const username = props.username || '';\n\n    return (\n        <AppBar position=\"static\">\n            <Toolbar>\n                <Typography variant=\"h6\" align={\"right\"} className={classes.title}>\n                    {username}@ISP.CP\n                </Typography>\n            </Toolbar>\n        </AppBar>\n    );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport IspPanel from \"./componets/IspPanel\";\nimport * as serviceWorker from './serviceWorker';\nimport { createMuiTheme } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n    overrides: {\n        // Style sheet name ⚛️\n        MuiButton: {\n            // Name of the rule\n            root: {\n                // Some CSS\n                cursor: \"pointer\"\n            },\n        },\n    },\n});\n\nReactDOM.render(<IspPanel key={\"application-ispcp\"} theme={theme}></IspPanel>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}