{"version":3,"sources":["Issues.js","IspCpConfig.js","Options.js","models/Term.js","Terms.js","models/User.js","App.js","serviceWorker.js","index.js"],"names":["issusesInstance","IspCpConfig","props","ApiProtocol","ApiHost","ApiPort","ApiUrlPrefix","LoggedIn","axios","get","this","ApiRequest","then","response","setLoggedIn","data","value","path","indexOf","IspCpHelper","params","window","location","search","substr","split","console","log","pairs","forEach","param","push","config","he","require","Issues","updateTimeout","modalFormOpen","state","success","handleSubmit","bind","componentDidMount","event","preventDefault","currentTarget","Target","dataset","update","comment","document","querySelector","updateIssue","resolve","resolveIssue","id","url","result","apiPath","pathname","startsWith","length","defaults","setState","index","JSON","parse","Paper","Table","TableHead","TableRow","TableCell","IssueForm","TableBody","map","issue","key","Date","parseInt","report_date","toLocaleDateString","resolve_date","TextField","label","defaultValue","decode","margin","variant","ButtonGroup","size","Button","type","onClick","data-update","color","data-resolve","React","Component","formStyles","makeStyles","theme","modal","display","alignItems","justifyContent","paper","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","classes","useState","open","setOpen","handleClose","Modal","aria-labelledby","aria-describedby","closeAfterTransition","onClose","className","onSubmit","target","comment_new","callUpdate","name","AddressList","addrSelected","selectedId","address","houses","flats","term","children","selectedAddress","selectedHouse","selectedFlat","forceUpdate","catch","reason","houseSelected","flatSelected","NativeSelect","onChange","child","data-slug","slugify","title","Options","undefined","error","role","access","toString","Term","slug","parentId","Terms","create","onParentSelect","parent","createTerm","delete","deleteTerm","selectedOptions","item","prevProps","List","TermsListItem","TermsForm","ListItem","Link","to","component","RLink","data-delete","Input","FormControl","InputLabel","shrink","htmlFor","inputProps","data-create","User","IspPanel","body","common","white","marginTop","flexDirection","avatar","secondary","main","form","width","submit","user","handleSubmitLoginForm","email","pass","password","IspControl","LoginForm","Container","maxWidth","Box","placeholder","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.62303971.chunk.js","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport {IspCpConfig} from \"./IspCpConfig\";\nimport Button from \"@material-ui/core/Button\";\nimport Paper from \"@material-ui/core/Paper\";\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\nimport TextField from '@material-ui/core/TextField';\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport NativeSelect from '@material-ui/core/NativeSelect';\nimport {slugify} from 'transliteration';\nimport Modal from '@material-ui/core/Modal';\nimport { makeStyles } from '@material-ui/core/styles';\n\n\nvar he = require('he');\n\nvar issusesInstance;\n\nexport default class Issues extends React.Component {\n    updateTimeout = 10000;\n    modalFormOpen = true;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            success: false,\n            data   : []\n        };\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.componentDidMount = this.componentDidMount.bind(this);\n        issusesInstance = this;\n    }\n\n    callUpdate()\n    {\n        this.componentDidMount();\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        console.log(event.currentTarget);\n        window.Target = event.currentTarget;\n        // if (event.currentTarget.dataset.report) {\n        //     var issueForm = document.querySelector(\"form#issue-report\");\n        //     console.log(\"Report : \" + issueForm.comment.value);\n        //     this.reportIssue(issueForm.comment.value);\n        // }\n        if (event.currentTarget.dataset.update) {\n            // var issueForm = document.querySelector(\"form#issue-edit-\" + event.currentTarget.dataset.update);\n            console.log(\"Udate \" + event.currentTarget.dataset.update);\n            // window.issueForm = issueForm;\n            const comment = document.querySelector(\"#comment-\" + event.currentTarget.dataset.update).value;\n            this.updateIssue(event.currentTarget.dataset.update, comment);\n        }\n        if (event.currentTarget.dataset.resolve) {\n            // var issueForm = document.querySelector(\"form#issue-edit-\" + event.currentTarget.dataset.resolve);\n            console.log(\"Resolve \" + event.currentTarget.dataset.resolve);\n            this.resolveIssue(event.currentTarget.dataset.resolve);\n        }\n    }\n\n    resolveIssue(id) {\n        let url = IspCpConfig.ApiRequest(\"/issues/resolve/\" + id);\n        axios.get(url,).then(\n            result => {\n                this.componentDidMount()\n            }\n        );\n    }\n\n    updateIssue(id, comment) {\n        let url = IspCpConfig.ApiRequest(\"/issues/update/\" + id + \"?comment=\" + comment);\n        axios.get(url).then(\n            result => {\n                this.componentDidMount()\n            }\n        );\n    }\n\n\n    componentDidMount() {\n        let apiPath = IspCpConfig.ApiRequest(\"/issues/\");\n        let location = this.props.location.pathname;\n        if (location.startsWith(\"/issues/\") && location.length > \"/issues/\".length) {\n            apiPath = IspCpConfig.ApiRequest(location);\n        }\n\n        axios.get(apiPath, {\n            params: axios.defaults.params\n        })\n             .then(\n                 result => {\n                     this.setState({\n                         success: result.data.success,\n                         data   : result.data.index\n                     });\n                     // console.log(result);\n                 }\n             )\n    }\n\n\n    render() {\n        if (this.state.success) {\n            const data = JSON.parse(this.state.data);\n            // setTimeout(this.componentDidMount, this.updateTimeout);\n            return (\n                <Paper>\n                    <Table>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>Issue</TableCell>\n                                <TableCell>Reported </TableCell>\n                                <TableCell>Resolved</TableCell>\n                                <TableCell>Address</TableCell>\n                                <TableCell>Comment</TableCell>\n                                <TableCell>\n                                    <IssueForm/>\n                                </TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>{data.map(issue =>\n                            <TableRow key={\"issue-\" + issue.id}>\n                                <TableCell>{issue.id}</TableCell>\n                                <TableCell>{new Date(parseInt(issue.report_date) * 1000).toLocaleDateString()}</TableCell>\n                                <TableCell>\n                                    {\n                                        (issue.resolve_date > 0)\n                                            ? new Date(parseInt(issue.resolve_date) * 1000).toLocaleDateString()\n                                            : ''\n                                    }\n                                </TableCell>\n                                <TableCell>\n                                    <AddressList location={\"/terms/15\"} id={\"address-\" + issue.id} value={0}/>\n                                </TableCell>\n                                <TableCell>\n                                    <TextField\n                                        label=\"Комментарий\"\n                                        id={\"comment-\" + issue.id}\n                                        defaultValue={issue.comment ? he.decode(issue.comment) : ''}\n                                        margin=\"normal\"\n                                        variant=\"outlined\"\n                                    /></TableCell>\n                                <TableCell>\n                                    <ButtonGroup size=\"small\">\n                                        <Button type=\"button\" onClick={this.handleSubmit} data-update={issue.id}\n                                                color=\"primary\">\n                                            UPDATE\n                                        </Button>\n                                        <Button type=\"button\" onClick={this.handleSubmit} data-resolve={issue.id}\n                                                color=\"secondary\">\n                                            RESOLVE\n                                        </Button>\n                                    </ButtonGroup>\n                                </TableCell>\n                            </TableRow>\n                        )}\n                        </TableBody>\n                    </Table>\n                </Paper>\n            );\n        }\n        return ('');\n    }\n}\n\nconst formStyles = makeStyles(theme => ({\n    modal: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    paper: {\n        backgroundColor: theme.palette.background.paper,\n        border: '2px solid #000',\n        boxShadow: theme.shadows[5],\n        padding: theme.spacing(2, 4, 3),\n    },\n}));\n\nfunction IssueForm() {\n\n    const classes = formStyles();\n    const [open, setOpen] = React.useState(false);\n\n    const handleClose = () => {\n        setOpen(false);\n    }\n\n    const handleOpen = () => {\n        setOpen(true);\n    }\n\n    const reportIssue = (event) => {\n        event.preventDefault();\n        console.log(event.target.comment_new.value);\n        let url = IspCpConfig.ApiRequest(\"/issues/report/?comment=\" + event.target.comment_new.value);\n        axios.get(url).then(\n            result => {\n                handleClose();\n                issusesInstance.callUpdate();\n            }\n        );\n    }\n\n    return (\n        <div>\n            <Button onClick={handleOpen} color=\"secondary\" variant={\"outlined\"}>REPORT</Button>\n            <Modal\n                aria-labelledby=\"transition-modal-title\"\n                aria-describedby=\"transition-modal-description\"\n                open={open}\n                closeAfterTransition\n                onClose={handleClose}\n                className={classes.modal}\n            >\n\n                <form className={classes.paper} onSubmit={reportIssue}>\n                    <h2 id=\"transition-modal-title\">REPORT ISSUE</h2>\n                    <div>\n                        <AddressList location={\"/terms/1\"} id={\"address-new\"} value={0}/>\n                    </div>\n                    <div>\n                        <TextField\n                            label=\"Комментарий\"\n                            id={\"transition-modal-description\"}\n                            defaultValue={\"\"}\n                            margin=\"normal\"\n                            variant=\"outlined\"\n                            name={\"comment_new\"}\n                        />\n                        <Button type=\"submit\" color=\"secondary\" variant={\"outlined\"}>REPORT</Button>\n                    </div>\n                </form>\n            </Modal>\n        </div>\n    );\n\n};\n\nclass AddressList extends React.Component {\n\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            address: {term:{id:0},children:[]},\n            houses: {term:{id:0},children:[]},\n            flats: {term:{id:0},children:[]},\n            selectedAddress:0,\n            selectedHouse:0,\n            selectedFlat:0\n        };\n        this.apiPath = IspCpConfig.ApiRequest(\"/terms/\");\n        this.location = props.location;\n        this.addrSelected = this.addrSelected.bind(this);\n    }\n\n    componentDidMount() {\n\n        if (this.location.startsWith(\"/terms/\") && this.location.length > \"/terms/\".length) {\n            this.apiPath = IspCpConfig.ApiRequest(this.location);\n        }\n\n        axios.get(this.apiPath)\n             .then(\n                 result => {\n                     this.setState({\n                         address: result.data,\n                         houses: {term:{id:0},children:[]},\n                         flats: {term:{id:0},children:[]},\n                         selectedAddress: result.data.term.id,\n                         selectedHouse:0,\n                         selectedFlat:0\n                     });\n                 }\n             )\n             .catch(reason => {\n                 console.log(\"Axios error: \" + reason)\n             })\n        ;\n    }\n\n    addrSelected = (event) => {\n        console.log(event.target.value);\n        var selectedId = event.target.value;\n        var apiPath = IspCpConfig.ApiRequest(\"/terms/\" + selectedId);\n        axios.get(apiPath)\n             .then(\n                 result => {\n                     this.setState({\n                         address: this.state.address,\n                         houses: result.data,\n                         flats: {term:{id:0},children:[]},\n                         selectedAddress: selectedId,\n                         selectedHouse:0,\n                         selectedFlat:0\n                     });\n                     this.forceUpdate();\n                 }\n             )\n             .catch(reason => {\n                 console.log(\"Axios error: \" + reason)\n             })\n        ;\n\n    }\n\n    houseSelected = (event) => {\n        console.log(event.target.value);\n        var selectedId = event.target.value;\n        var apiPath = IspCpConfig.ApiRequest(\"/terms/\" + selectedId);\n        axios.get(apiPath)\n             .then(\n                 result => {\n                     this.setState({\n                         address: this.state.address,\n                         houses: this.state.houses,\n                         flats: result.data,\n                         selectedAddress: this.state.selectedAddress,\n                         selectedHouse:selectedId,\n                         selectedFlat:0\n                     });\n                     this.forceUpdate();\n                 }\n             )\n             .catch(reason => {\n                 console.log(\"Axios error: \" + reason)\n             })\n        ;\n\n    }\n\n    flatSelected = (event) => {\n        console.log(event.target.value);\n        var selectedId = event.target.value;\n        this.setState({\n            address: this.state.address,\n            houses: this.state.houses,\n            flats: this.state.flats,\n            selectedAddress: this.state.selectedAddress,\n            selectedHouse:this.state.selectedHouse,\n            selectedFlat:selectedId\n        });\n        this.forceUpdate();\n\n    }\n\n    render() {\n        console.log(this.state);\n        return (\n            <div>\n            <NativeSelect\n                id={this.props.id}\n                value={this.state.selectedAddress}\n                onChange={this.addrSelected}\n            >\n                <option value={0}>Улица</option>\n                {this.state.address.children.map(child =>\n                    <option key={child.id} value={child.id} data-slug={slugify(child.title)}>{child.title}</option>\n                )}\n            </NativeSelect>\n                <NativeSelect\n                    id={this.props.id + \"-houses\"}\n                    value={this.state.selectedHouse}\n                    onChange={this.houseSelected}\n                >\n                    <option value={0}>Дом</option>\n                    {this.state.houses.children.map(child =>\n                        <option key={child.id} value={child.id} data-slug={slugify(child.title)}>{child.title}</option>\n                    )}\n                </NativeSelect>\n                <NativeSelect\n                    id={this.props.id + \"flats\"}\n                    value={this.state.selectedFlat}\n                    onChange={this.flatSelected}\n                >\n                    <option value={0}>Квартира</option>\n                    {this.state.flats.children.map(child =>\n                        <option key={child.id} value={child.id} data-slug={slugify(child.title)}>{child.title}</option>\n                    )}\n                </NativeSelect>\n            </div>\n        );\n    }\n}\n\nclass HousesList extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            term    : {},\n            children: []\n        };\n        this.apiPath = IspCpConfig.ApiRequest(\"/terms/\");\n        this.location = props.location;\n    }\n\n    componentDidMount() {\n\n        if (this.location.startsWith(\"/terms/\") && this.location.length > \"/terms/\".length) {\n            this.apiPath = IspCpConfig.ApiRequest(this.location);\n        }\n\n        axios.get(this.apiPath)\n             .then(\n                 result => {\n                     console.log(result);\n                     this.setState({\n                         term    : result.data.term,\n                         children: result.data.children\n                     });\n                 }\n             )\n             .catch(reason => {\n                 console.log(\"Axios error: \" + reason)\n             })\n        ;\n    }\n\n    render() {\n        return (\n            <NativeSelect\n                id={this.props.id}\n                value={this.props.value}\n            >\n                {this.state.children.map(child =>\n                    <option key={child.id} value={child.id} data-slug={slugify(child.title)}>{child.title}</option>\n                )}\n            </NativeSelect>\n        );\n    }\n}\n\nclass ApartmentsList extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            term    : {},\n            children: []\n        };\n        this.apiPath = IspCpConfig.ApiRequest(\"/terms/\");\n        this.location = props.location;\n    }\n\n    componentDidMount() {\n\n        if (this.location.startsWith(\"/terms/\") && this.location.length > \"/terms/\".length) {\n            this.apiPath = IspCpConfig.ApiRequest(this.location);\n        }\n\n        axios.get(this.apiPath)\n             .then(\n                 result => {\n                     console.log(result);\n                     this.setState({\n                         term    : result.data.term,\n                         children: result.data.children\n                     });\n                 }\n             )\n             .catch(reason => {\n                 console.log(\"Axios error: \" + reason)\n             })\n        ;\n    }\n\n    render() {\n        return (\n            <NativeSelect\n                id={this.props.id}\n                value={this.props.value}\n            >\n                {this.state.children.map(child =>\n                    <option key={child.id} value={child.id} data-slug={slugify(child.title)}>{child.title}</option>\n                )}\n            </NativeSelect>\n        );\n    }\n}","\nimport axios from \"axios\";\n\nclass IspCpConfig {\n    ApiProtocol = \"http\";\n    ApiHost = \"loc.onedext.ru\";\n    ApiPort = 8080;\n    ApiUrlPrefix = \"/api\";\n    LoggedIn = false;\n\n    constructor(props) {\n        axios.get(this.ApiRequest(\"/users/login\")).then(\n            (response) => {\n                this.setLoggedIn(response.data);\n            });\n    }\n\n    setLoggedIn(value)\n    {\n        this.LoggedIn = value;\n    }\n\n    ApiRequest(path) {\n        return this.ApiProtocol + \"://\" +\n            this.ApiHost +\n            (this.ApiPort ? \":\" + this.ApiPort : '') +\n            this.ApiUrlPrefix +\n            path;\n    }\n\n    ApiRootRequest(path) {\n        if (path.indexOf(\"?\") === -1) {\n            return this.ApiRequest(path + \"?role=99999999999&passwd=secret\")\n        } else {\n            return this.ApiRequest(path + \"&role=99999999999&passwd=secret\")\n        }\n    }\n}\n\nclass IspCpHelper {\n    getUriParams() {\n        let params = window.location.search.substr(1).split(\"&\");\n        console.log(params);\n        let pairs = [];\n        params.forEach((param) => {\n            pairs.push(param.split(\"=\"));\n        });\n        return pairs;\n    }\n}\n\nexport default new IspCpConfig();\n\nlet config = new IspCpConfig();\nlet helper = new IspCpHelper();\n\nexport {config as IspCpConfig};\nexport {helper as IspCpHelper};","import React from \"react\";\nimport axios from \"axios\"\nimport IspCpConfig from \"./IspCpConfig\";\n\nexport default class Options extends React.Component {\n    state = {\n        success: false,\n        name: undefined,\n        value: undefined\n    }\n\n    constructor(props) {\n        super(props)\n    }\n\n    componentDidMount() {\n        axios.get(IspCpConfig.ApiRequest(\"/options/get/roles\"))\n            .then(\n                (result) => {\n                    console.log(this.state);\n                    this.setState(result.data);\n                    console.log(this.state);\n                }\n            )\n            .catch(\n                (error) => {\n                    console.log(error);\n                }\n            )\n    }\n\n    render() {\n        if (this.state.success) {\n            const {role} = JSON.parse(this.state.value.value);\n            return (\n                <div>\n                    <p>{role.id}.{role.name}[{role.access.toString()}]</p>\n                </div>\n            );\n        }\n        return '';\n    }\n\n}\n\n\n//{value.map(prop=>{<p>{prop}</p>})}\n","export default class Term {\n\n    constructor(props) {\n        this.id = props.id || 0;\n        this.slug = props.slug || 'root';\n        this.title = props.title || '';\n        this.parentId = props.parentId || 0;\n    }\n}","import React from 'react';\nimport {BrowserRouter as Router, Link as RLink, Route} from \"react-router-dom\";\nimport axios from 'axios';\nimport IspCpConfig from \"./IspCpConfig\";\nimport {slugify} from 'transliteration';\nimport {\n    Box,\n    Button,\n    FormControl,\n    Input,\n    InputLabel,\n    Link,\n    List,\n    ListItem,\n    NativeSelect,\n    TextField\n} from \"@material-ui/core\";\n\nimport Term from \"./models/Term\";\n\nvar he = require('he');\n\nexport default class Terms extends React.Component {\n\n    updateTimeout;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            success: false,\n            term: {},\n            children: {},\n            create: Term\n        };\n        this.updateTimeout = 10000;\n        this.onSubmit = this.onSubmit.bind(this);\n        this.componentDidMount = this.componentDidMount.bind(this);\n        this.onParentSelect = this.onParentSelect.bind(this);\n    }\n\n    createTerm(slug, title, parent) {\n        let url = IspCpConfig.ApiRequest(\n            \"/terms/create/\" +\n            \"?slug=\" + slug +\n            \"&title=\" + title +\n            \"&parent=\" + parent\n        );\n        axios.get(url).then(\n            result => {\n                this.componentDidMount();\n            })\n    }\n\n    deleteTerm(id) {\n        let url = IspCpConfig.ApiRequest(\"/terms/delete/\" + id);\n        axios.get(url).then(\n            result => {\n                this.componentDidMount();\n            })\n    }\n\n    onSubmit(event) {\n        event.preventDefault();\n        if (event.target.create)\n            this.createTerm(event.target.slug.value, event.target.title.value, event.target.parent.value);\n        if (event.currentTarget.dataset.delete)\n            this.deleteTerm(event.currentTarget.dataset.delete);\n    }\n\n    onParentSelect(event) {\n\n        this.setState({\n            create : new Term({\n                parentId: event.target.value,\n                slug:event.target.selectedOptions.item(0).dataset.slug\n            })\n        });\n        // this.state.create.parentId = event.target.value;\n        // this.state.create.slug = event.target.selectedOptions.item(0).dataset.slug;\n\n        console.log(this.state.create);\n    }\n\n\n    componentDidMount() {\n        let apiPath = IspCpConfig.ApiRequest(\"/terms/\");\n        let location = this.props.location.pathname;\n        if (location.startsWith(\"/terms/\") && location.length > \"/terms/\".length) {\n            apiPath = IspCpConfig.ApiRequest(location);\n        }\n\n        axios.get(apiPath, {\n            params: axios.defaults.params\n        })\n            .then(\n                result => {\n                    console.log(result);\n                    this.setState({\n                        success: result.data.success,\n                        term: result.data.term,\n                        children: result.data.children,\n                        create: new Term({parentId: result.data.term.id, slug: slugify(result.data.term.title)})\n                    });\n                }\n            )\n            .catch(reason => {\n                console.log(reason)\n            })\n    }\n\n    componentDidUpdate(prevProps) {\n        console.log(prevProps.location);\n        console.log(this.props.location);\n        if (this.props.location !== prevProps.location) {\n            this.componentDidMount();\n        }\n    }\n\n    render() {\n\n        const {term} = this.state.term;\n        const {children} = this.state.children;\n        if (this.state.success) {\n            // setTimeout(this.componentDidMount, this.updateTimeout);\n\n            return (\n                <div>\n                    <List>\n                        {this.state.children.map(child =>\n                            <TermsListItem key={child.id} id={child.id} title={child.title} slug={child.slug} onClick={this.onSubmit}/>\n                        )}\n                    </List>\n                    <TermsForm\n                        term={this.state.term}\n                        slug={this.state.create.slug}\n                        parentId={this.state.create.parentId}\n                        title={this.state.create.title}\n                        children={this.state.children}\n                        onSubmit={this.onSubmit}\n                        onChange={this.onParentSelect}\n                    />\n                </div>\n            );\n        }\n        return ('');\n    }\n}\n\nfunction TermsListItem(props) {\n    if (!props.id) return '';\n    return(\n        <ListItem>\n            <Link to={\"/terms/\" + props.id} component={RLink}>{props.title}</Link>\n            <Button type={\"button\"} data-delete={props.id} onClick={props.onClick}>DELETE</Button>\n        </ListItem>\n    );\n}\n\nfunction TermsForm(props) {\n    const term = props.term || {id: false};\n    const children = props.children || [];\n\n    return (\n        <form onSubmit={props.onSubmit}>\n            <Input type={\"hidden\"} name={\"create\"} value={0}/>\n            <Input type={\"hidden\"} name={\"slug\"} value={props.slug}/>\n            <TextField\n                label={\"Название\"}\n                name={\"title\"}\n                defaultValue={''}\n                variant={\"standard\"}\n            >\n            </TextField>\n            <FormControl>\n                <InputLabel shrink htmlFor=\"parent-id-select\">\n                    Родитель\n                </InputLabel>\n                <NativeSelect\n                    onChange={props.onChange}\n                    inputProps={{\n                        name: 'parent',\n                        id: 'parent-id-select',\n                    }}\n                    value={props.parentId}\n                >\n                    <option key={0} value={0} data-slug={\"root\"}>Корень</option>\n                    {term.id && <option key={term.id} value={term.id}>{term.title}</option>}\n                    {children.map(child =>\n                        <option key={child.id} value={child.id} data-slug={slugify(child.title)}>{child.title}</option>\n                    )}\n                </NativeSelect>\n            </FormControl>\n            <Button data-create={0} type={\"submit\"} variant={\"outlined\"} color={\"primary\"}\n                    size={\"large\"}>SUBMIT</Button>\n        </form>\n    );\n}\n\n\n\n","export default class User {\n    id;\n    email;\n    pass;\n    role;\n}","import './App.css';\nimport React from 'react';\nimport {BrowserRouter as Router, Link, Route} from \"react-router-dom\";\nimport Issues from \"./Issues\";\nimport Options from \"./Options\";\nimport Terms from \"./Terms\";\nimport Button from \"@material-ui/core/Button\";\nimport {makeStyles} from '@material-ui/core/styles';\nimport Container from \"@material-ui/core/Container\";\nimport TextField from \"@material-ui/core/TextField\";\nimport {Box} from \"@material-ui/core\";\nimport User from \"./models/User\";\nimport {IspCpConfig} from \"./IspCpConfig\";\nimport axios from \"axios\";\n\nconst useStyles = makeStyles(theme => ({\n    '@global': {\n        body: {\n            backgroundColor: theme.palette.common.white,\n        },\n    },\n    paper: {\n        marginTop: theme.spacing(8),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main,\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(1),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n}));\n\nclass IspPanel extends React.Component {\n\n    constructor(props) {\n        super(props);\n        const user = User;\n        this.state = {\n            user: user\n        }\n        this.handleSubmitLoginForm = this.handleSubmitLoginForm.bind(this);\n    }\n\n    handleSubmitLoginForm(event) {\n        event.preventDefault();\n        const form = event.currentTarget;\n        const user = User;\n        user.email = form.email.value;\n        user.pass = form.pass.value;\n\n        axios.get(IspCpConfig.ApiRequest(\"/users/login\"), {\n            params: {email: user.email, password: user.pass}\n        }).then(response => {\n            user.id = response.data.item.id || undefined;\n            this.setState({\n                user: user\n            });\n        });\n    }\n\n    render() {\n        const email = this.state.user.email;\n        const pass = this.state.user.pass;\n        const id = this.state.user.id || undefined;\n        if (parseInt(id) > 0) {\n            axios.defaults.params = {\n                email: email,\n                password: pass\n            };\n            return (<IspControl/>);\n        }\n        return (<LoginForm onSubmit={this.handleSubmitLoginForm} email={email} pass={pass}/>);\n    }\n\n}\n\nexport default IspPanel;\n\nfunction LoginForm(props) {\n    return (\n        <Container maxWidth={\"md\"}>\n            <form onSubmit={props.onSubmit}>\n                <Box>\n                    <TextField type={\"email\"} name={\"email\"} placeholder={\"Login\"} defaultValue={props.email}/>\n                </Box>\n                <Box>\n                    <TextField type={\"password\"} name={\"pass\"} placeholder={\"Password\"} defaultValue={props.pass}>\n                        Password\n                    </TextField>\n                </Box>\n                <Button type={\"submit\"}>SGIN IN</Button>\n            </form>\n        </Container>\n    )\n}\n\nfunction IspControl() {\n    return (\n        <Router>\n            <div>\n                <Button component={Link} to=\"/\" color={\"primary\"} variant={\"contained\"}>Home</Button>\n                <Button component={Link} to=\"/issues/\" color={\"primary\"} variant={\"contained\"}>Issues</Button>\n                <Button component={Link} to=\"/terms/\" color={\"primary\"} variant={\"contained\"}>Terms</Button>\n                <Button component={Link} to=\"/options/\" color={\"primary\"} variant={\"contained\"}>Options</Button>\n\n                <hr/>\n                <Route path=\"/issues\" component={Issues}/>\n                <Route path=\"/terms\" component={Terms}/>\n                <Route path=\"/options\" component={Options}/>\n            </div>\n        </Router>\n    );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter as Router} from \"react-router-dom\";\nimport './index.css';\nimport IspPanel from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<Router><IspPanel/></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}