{"version":3,"sources":["IspCpConfig.js","models/User.js","componets/LoginForm.js","IspCpHelper.js","componets/ChainedList.js","models/IssueStatus.js","componets/IssueForm.js","models/Issue.js","models/Term.js","componets/IssueStatusSelect.js","models/IssueUpdateReport.js","componets/IssueHistory.js","componets/Issues.js","componets/TermsListItem.js","componets/Terms.js","componets/Options.js","componets/DefaultPanel.js","componets/IspPanel.js","serviceWorker.js","index.js"],"names":["props","ApiProtocol","ApiHost","ApiPort","ApiUrlPrefix","LoggedIn","axios","get","this","ApiRequest","then","response","setLoggedIn","data","value","path","indexOf","User","id","email","pass","useStyles","makeStyles","card","minWidth","bullet","display","margin","transform","title","fontSize","pos","marginBottom","cardContainer","marginTop","LoginForm","classes","Container","className","maxWidth","Card","component","onSubmit","CardContent","Box","TextField","type","name","placeholder","defaultValue","CardActions","Button","callApi","url","params","config","Object","assign","defaults","IspCpConfig","debug","message","window","location","host","console","log","search","substr","split","pairs","forEach","param","push","ChainedList","onChange","children","NativeSelect","key","root_title","map","child","IssueStatus","formStyles","require","theme","modal","alignItems","justifyContent","paper","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","IssueForm","React","useState","open","setOpen","city","street","home","flat","address","setAddress","cities","setCities","streets","setStreets","homes","setHomes","flats","setFlats","engineers","setEngineers","engineer","setEngineer","afterReport","handleClose","onChangeAddress","event","address_new","target","selectedOptions","item","text","IspCpHelper","term","length","slugify","terms","onClick","color","variant","Modal","aria-labelledby","aria-describedby","closeAfterTransition","onClose","preventDefault","issue","comment","comment_new","report_status","execution_date","Date","getTime","history","JSON","stringify","label","undefined","textField","InputLabelProps","shrink","Issue","Term","slug","parentId","IssueStatusSelect","statuses","setStatuses","input_props","inputProps","option","index_key","IssueUpdateReport","IssueHistory","issue_id","index_entry","report","parse","toLocaleDateString","HTMLEntity","dateformat","Issues","updateTimeout","modalFormOpen","getList","apiPath","pathname","startsWith","passState","index","AllHtmlEntities","decode","report_ts","report_date","resolve_ts","resolve_date","exec_ts","e","setState","success","issues","handleSubmit","currentTarget","dataset","update","state","find","concat","updateIssue","resolve","resolveIssue","onStatusSelect","onCommentTextChange","onChangeExecutionDate","Paper","Table","TableHead","TableRow","TableCell","TableBody","date","parseInt","issuse_index_key","ButtonGroup","size","data-update","data-resolve","Component","TermsListItem","EmptyTerm","handleDeleteTerm","HierTerm","itemClass","ListItem","button","ListItemAvatar","ListItemIcon","ListItemText","primary","ListItemSecondaryAction","data-delete","ParentTerm","hierStyles","root","width","nested","paddingLeft","Collapse","in","timeout","unmountOnExit","List","disablePadding","Terms","create","bind","componentDidMount","onParentSelect","setInitialState","styles","eventTarget","password","parent","result","delete","createTerm","deleteTerm","slice","textContent","catch","reason","prevProps","TermsForm","termsFormStyles","flexGrow","height","control","Grid","container","justify","FormControl","InputLabel","htmlFor","TermsOptionsList","data-create","Input","data-slug","Options","error","role","access","toString","menuButton","marginRight","DefaultPanel","username","AppBar","position","Toolbar","Link","to","Typography","align","IspPanel","user","handleSubmitLoginForm","form","exception","sessionStorage","clear","href","origin","getItem","setItem","toUpperCase","IspPanelAppBar","IconButton","edge","aria-label","Boolean","hostname","match","createMuiTheme","overrides","MuiButton","cursor","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kQAuCe,M,WA7BX,WAAYA,GAAQ,IAAD,gCANnBC,YAAc,OAMK,KALnBC,QAAU,iBAKS,KAJnBC,QAAU,KAIS,KAHnBC,aAAe,OAGI,KAFnBC,UAAW,EAGPC,IAAMC,IAAIC,KAAKC,WAAW,iBAAiBC,MACvC,SAACC,GACG,EAAKC,YAAYD,EAASE,S,wDAI1BC,GAERN,KAAKH,SAAWS,I,iCAGTC,GACP,OAAOP,KAAKP,YAAc,MACtBO,KAAKN,SACJM,KAAKL,QAAU,IAAMK,KAAKL,QAAU,IACrCK,KAAKJ,aACLW,I,qCAGOA,GACX,OAA2B,IAAvBA,EAAKC,QAAQ,KACNR,KAAKC,WAAWM,EAAO,mCAEvBP,KAAKC,WAAWM,EAAO,uC,MClCrBE,E,sCACjBC,GAAK,E,KACLC,MAAQ,G,KACRC,KAAO,I,wECOLC,EAAYC,YAAW,CACzBC,KAAM,CACFC,SAAU,KAEdC,OAAQ,CACJC,QAAS,eACTC,OAAQ,QACRC,UAAW,cAEfC,MAAO,CACHC,SAAU,IAEdC,IAAK,CACDC,aAAc,IAElBC,cAAe,CACXC,UAAW,WAIJ,SAASC,EAAUnC,GAE9B,IAAMoC,EAAUf,IAEhB,OACI,kBAACgB,EAAA,EAAD,CAAWC,UAAWF,EAAQH,cAAeM,SAAU,MACnD,kBAACC,EAAA,EAAD,CAAMF,UAAWF,EAAQb,KAAMgB,SAAU,KAAME,UAAW,OAAQC,SAAU1C,EAAM0C,UAC9E,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKH,UAAW,OACZ,kBAACI,EAAA,EAAD,CAAWC,KAAM,QAASC,KAAM,QAASC,YAAa,QAASC,aAAcjD,EAAMmB,SAEvF,kBAACyB,EAAA,EAAD,CAAKH,UAAW,OACZ,kBAACI,EAAA,EAAD,CAAWC,KAAM,WAAYC,KAAM,OAAQC,YAAa,WAAYC,aAAcjD,EAAMoB,MAAxF,cAOR,kBAAC8B,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAQL,KAAM,UAAd,c,kGCxBL,M,iDAZXM,QAAU,SAACC,EAAIC,GACX,IAAIC,EAAS,CAACD,OAAOE,OAAOC,OAAOnD,IAAMoD,SAASJ,OAAOA,IACzD,OAAOhD,IAAMC,IAAIoD,EAAYlD,WAAW4C,GAAME,I,KAGlDK,MAAQ,SAACC,GACuB,kBAAxBC,OAAOC,SAASC,MAChBC,QAAQC,IAAIL,I,2DAhBhB,IAAIP,EAASQ,OAAOC,SAASI,OAAOC,OAAO,GAAGC,MAAM,KACpDJ,QAAQC,IAAIZ,GACZ,IAAIgB,EAAQ,GAIZ,OAHAhB,EAAOiB,SAAQ,SAACC,GACZF,EAAMG,KAAKD,EAAMH,MAAM,SAEpBC,M,uBCPA,SAASI,EAAY1E,GAChC,IAAM2E,EAAW3E,EAAM2E,SACjBC,EAAW5E,EAAM4E,SAEvB,OACI,kBAAChC,EAAA,EAAD,CAAKH,UAAW,OACZ,kBAACoC,EAAA,EAAD,CAAc9B,KAAM/C,EAAMkB,GAAIyD,SAAUA,EAAUzD,GAAIlB,EAAMkB,GAAIJ,MAAOd,EAAMc,OACzE,4BAAQgE,IAAK,qBAAuB9E,EAAMkB,GAAIJ,MAAO,GAAId,EAAM+E,YAC9DH,EAASI,KAAI,SAAAC,GACV,OAAQ,4BAAQH,IAAK,gBAAkBG,EAAM/D,GAAIJ,MAAOmE,EAAM/D,IAAK+D,EAAMpD,YCP9EqD,MANf,WAGI,OAAO1E,MCYL2E,GAFaC,EAAQ,IAER9D,aAAW,SAAA+D,GAAK,MAAK,CACpCC,MAAO,CACH5D,QAAS,OACT6D,WAAY,SACZC,eAAgB,UAEpBC,MAAO,CACHC,gBAAiBL,EAAMM,QAAQC,WAAWH,MAC1CI,OAAQ,iBACRC,UAAWT,EAAMU,QAAQ,GACzBC,QAASX,EAAMY,QAAQ,EAAG,EAAG,SAItB,SAASC,EAAUlG,GAE9B,IAAMoC,EAAU+C,IAFqB,EAGbgB,IAAMC,UAAS,GAHF,mBAG9BC,EAH8B,KAGxBC,EAHwB,OAKPH,IAAMC,SAAS,CAACG,KAAM,GAAIC,OAAQ,GAAIC,KAAM,GAAIC,KAAM,KAL/C,mBAK9BC,EAL8B,KAKrBC,EALqB,OAMTT,IAAMC,SAAS,IANN,mBAM9BS,EAN8B,KAMtBC,EANsB,OAOPX,IAAMC,SAAS,IAPR,mBAO9BW,EAP8B,KAOrBC,EAPqB,OAQXb,IAAMC,SAAS,IARJ,mBAQ9Ba,EAR8B,KAQvBC,EARuB,OASXf,IAAMC,SAAS,IATJ,mBAS9Be,EAT8B,KASvBC,EATuB,OAUHjB,IAAMC,SAAS,IAVZ,mBAU9BiB,EAV8B,KAUnBC,EAVmB,OAWLnB,IAAMC,SAAS,CAAClF,GAAI,EAAGW,MAAO,KAXzB,mBAW9B0F,EAX8B,KAWpBC,EAXoB,KAa/BC,EAAczH,EAAMyH,YAEpBC,EAAc,WAChBpB,GAAQ,IAsBNqB,EAAkB,SAACC,GACrB,IAAIC,EAAcrE,OAAOC,OAAO,GAAIkD,GAEpC,OAAQiB,EAAME,OAAO5G,IACjB,IAAK,WACD2G,EAAYtB,KAAO,CACf1E,MAAO+F,EAAME,OAAOC,gBAAgBC,KAAK,GAAGC,KAC5C/G,GAAI0G,EAAME,OAAOhH,OAErB+G,EAAYtB,KAAK1E,MAAQ+F,EAAME,OAAOC,gBAAgBC,KAAK,GAAGC,KAC9DC,EAAY9E,QAAQ,SAAWyE,EAAYtB,KAAKrF,IAAIR,MAAK,SAACC,GACtDqG,EAAWrG,EAASE,KAAKsH,KAAKvD,UAAY,OAE9C,MACJ,IAAK,aACDiD,EAAYrB,OAAS,CACjB3E,MAAO+F,EAAME,OAAOC,gBAAgBC,KAAK,GAAGC,KAC5C/G,GAAI0G,EAAME,OAAOhH,OAErBoH,EAAY9E,QAAQ,SAAWyE,EAAYrB,OAAOtF,IAAIR,MAAK,SAACC,GACxDuG,EAASvG,EAASE,KAAKsH,KAAKvD,UAAY,OAE5C,MACJ,IAAK,WACDiD,EAAYpB,KAAO,CACf5E,MAAO+F,EAAME,OAAOC,gBAAgBC,KAAK,GAAGC,KAC5C/G,GAAI0G,EAAME,OAAOhH,OAErBoH,EAAY9E,QAAQ,SAAWyE,EAAYpB,KAAKvF,IAAIR,MAAK,SAACC,GACtDyG,EAASzG,EAASE,KAAKsH,KAAKvD,UAAY,OAE5C,MACJ,IAAK,WACDiD,EAAYnB,KAAO,CACf7E,MAAO+F,EAAME,OAAOC,gBAAgBC,KAAK,GAAGC,KAC5C/G,GAAI0G,EAAME,OAAOhH,OAI7B8F,EAAWiB,IAUO,IAAlBhB,EAAOuB,QACPF,EAAY9E,QAAQ,UAAYiF,kBAAQ,yCAAW3H,MAAK,SAACC,GACrDmG,EAAUnG,EAASE,KAAKyH,UAIP,IAArBjB,EAAUe,QACVF,EAAY9E,QAAQ,UAAYiF,kBAAQ,iEAAe3H,MAAK,SAACC,GACzD2G,EAAa3G,EAASE,KAAKyH,UAKnC,OACI,6BACI,kBAACnF,EAAA,EAAD,CAAQoF,QAnFG,WACfjC,GAAQ,IAkFyBkC,MAAM,YAAYC,QAAS,YAAxD,UACA,kBAACC,EAAA,EAAD,CACIC,kBAAgB,yBAChBC,mBAAiB,+BACjBvC,KAAMA,EACNwC,sBAAoB,EACpBC,QAASpB,EACTpF,UAAWF,EAAQkD,OAGnB,kBAAC1C,EAAA,EAAD,CAAKH,UAAW,OAAQH,UAAWF,EAAQqD,MAAO/C,SAzF1C,SAACkF,GACjBA,EAAMmB,iBACN,IAAIC,EAAQxF,OAAOC,OACf,CAACkD,QAASA,GACV,CAACY,SAAUA,GACX,CAAC0B,QAASrB,EAAME,OAAOoB,YAAYpI,OACnC,CAACqI,cAAe,IAAIjE,GACpB,CAACkE,eAAgB,IAAIC,KAAKzB,EAAME,OAAOsB,eAAetI,OAAOwI,UAAU,MAE3E9F,OAAOC,OAAOuF,EAAO,CAACO,QAAS,CAACC,KAAKC,UAAUT,MAE/Cd,EAAY9E,QADF,kBACe,CAAC6F,QAASD,IAAQtI,KAAK+G,GAChDC,MA8EY,wBAAIxG,GAAG,0BAAP,gBACA,kBAAC0B,EAAA,EAAD,CAAKH,UAAW,OACZ,kBAACiC,EAAD,CAAaK,WAAW,iCAAQjE,MAAO6F,EAAQJ,KAAKrF,GAAI0D,SAAUiC,EACrDlC,SAAUgD,EAAiBzG,GAAI,aAC5C,kBAACwD,EAAD,CAAaK,WAAW,iCAAQjE,MAAO6F,EAAQH,OAAOtF,GAAI0D,SAAUmC,EACvDpC,SAAUgD,EAAiBzG,GAAI,eAC5C,kBAACwD,EAAD,CAAaK,WAAW,qBAAMjE,MAAO6F,EAAQF,KAAKvF,GAAI0D,SAAUqC,EACnDtC,SAAUgD,EACVzG,GAAI,aACjB,kBAACwD,EAAD,CAAaK,WAAW,mDAAWjE,MAAO6F,EAAQD,KAAKxF,GAAI0D,SAAUuC,EACxDxC,SAAUgD,EAAiBzG,GAAI,cAEhD,kBAAC0B,EAAA,EAAD,CAAKH,UAAW,OACZ,kBAACoC,EAAA,EAAD,CAAc/D,MAAOyG,EAASrG,GAAIyD,SA9C7B,SAACiD,GACtBJ,EAAY,CACR3F,MAAO+F,EAAME,OAAOC,gBAAgBC,KAAK,GAAGC,KAC5C/G,GAAI0G,EAAME,OAAOhH,UA4CD,4BAAQA,MAAO,GAAf,0DAEIuG,EAAUrC,KAAI,SAAAgD,GACV,OACI,4BAAQlD,IAAK,eAAiBkD,EAAK9G,GAAIJ,MAAOkH,EAAK9G,IAAK8G,EAAKnG,YAKjF,kBAACe,EAAA,EAAD,CAAKH,UAAW,MAChB,kBAACI,EAAA,EAAD,CACI3B,GAAG,OACHwI,MAAM,wFACN5G,KAAK,OACLC,KAAM,iBACNE,kBA3CG0G,EA4CHrH,UAAWF,EAAQwH,UACnBC,gBAAiB,CACbC,QAAQ,KAGhB,kBAAClH,EAAA,EAAD,CAAKH,UAAW,OACZ,kBAACI,EAAA,EAAD,CACI6G,MAAM,qEACNxI,GAAI,+BACJ+B,aAAc,GACdtB,OAAO,SACP8G,QAAQ,WACR1F,KAAM,gBAEV,kBAACI,EAAA,EAAD,CAAQL,KAAK,SAAS0F,MAAM,YAAYC,QAAS,YAAjD,cCzKTsB,MAbf,WAUI,OAAOvJ,MCdUwJ,EAEjB,WAAYhK,GAAQ,oBAChBQ,KAAKU,GAAKlB,EAAMkB,IAAM,EACtBV,KAAKyJ,KAAOjK,EAAMiK,MAAQ,OAC1BzJ,KAAKqB,MAAQ7B,EAAM6B,OAAS,uCAC5BrB,KAAK0J,SAAWlK,EAAMkK,UAAY,EAClC1J,KAAKoE,SAAW5E,EAAM4E,UAAY,IC6C3BuF,MA9Bf,SAA2BnK,GAC1B,IAAD,EACoCmG,IAAMC,SAAS,IADnD,mBACWgE,EADX,KACqBC,EADrB,KAEUrB,EAAQhJ,EAAMgJ,MAOI,IAApBoB,EAAShC,QACTF,EAAY9E,QAAQ,UAAYiF,kBAAQ,oFAAmB3H,MAL1C,SAACC,GAClB0J,EAAY1J,EAASE,KAAKyH,UAO9B,IAAMgC,EAAc,CAChB,gBAAgBtB,EAAM9H,IAG1B,OACI,kBAAC2D,EAAA,EAAD,CAAc0F,WAAYD,EAAaxJ,MAAOkI,EAAMG,cAAcjI,GAAIyD,SAAU3E,EAAM2E,UAClF,4BAAQG,IAAK,yBAA6BhE,MAAO,GAAI,wCACpDsJ,EAASpF,KAAI,SAACwF,EAAQC,GACnB,OACI,4BAAQ3F,IAAK,yBAA2B2F,EAAU,GAAI3J,MAAO0J,EAAOtJ,IAAKsJ,EAAO3I,YChCrF6I,MATf,WAMI,OAAOlK,MCDL2E,EAAa7D,aAAW,SAAA+D,GAAK,MAAK,CACpCC,MAAO,CACH5D,QAAS,OACT6D,WAAY,SACZC,eAAgB,UAEpBC,MAAO,CACHC,gBAAiBL,EAAMM,QAAQC,WAAWH,MAC1CI,OAAQ,iBACRC,UAAWT,EAAMU,QAAQ,GACzBC,QAASX,EAAMY,QAAQ,EAAG,EAAG,QAItB,SAAS0E,EAAa3K,GAEjC,IAAMoC,EAAU+C,IAFwB,EAGhBgB,IAAMC,UAAS,GAHC,mBAGjCC,EAHiC,KAG3BC,EAH2B,KAaxC,OAA2B,IAAvBtG,EAAMuJ,QAAQnB,OACP,GAEH,CACA,kBAACjF,EAAA,EAAD,CAAQoF,QARG,WACfjC,GAAQ,IAOyBkC,MAAM,YAAYC,QAAS,YAAxD,WACA,kBAACC,EAAA,EAAD,CACIC,kBAAgB,yBAChBC,mBAAiB,+BACjBvC,KAAMA,EACNwC,sBAAoB,EACpBC,QAlBQ,WAChBxC,GAAQ,IAkBAhE,UAAWF,EAAQkD,OAGnB,kBAAC1C,EAAA,EAAD,CAAKH,UAAW,MAAOH,UAAWF,EAAQqD,OACtC,wBAAIvE,GAAG,0BAAP,WAAyClB,EAAM4K,SAA/C,YACC5K,EAAMuJ,QAAQvE,KAAI,SAAC6F,EAAYJ,GAC5B,IAAMK,EAAStB,KAAKuB,MAAMF,GAC1B3C,EAAYtE,MAAMkH,GAClB,IAAM3B,EAAgB2B,EAAO3B,cAActH,OAAO,iCAC5CuH,OAA2CO,GAAzBmB,EAAO1B,gBAAwD,IAAzB0B,EAAO1B,gBAAiD,GAAzB0B,EAAO1B,eAAqB,uEAAkB,IAAIC,KAA2B,IAAtByB,EAAO1B,gBAAqB4B,qBAAuB,GACvM,MAAO,CACH,kBAACpI,EAAA,EAAD,CAAKH,UAAW,OACX0G,EADL,oEAC4C2B,EAAOvD,SAAS1F,MAD5D,UAC4EuH,GAE5E,kBAACxG,EAAA,EAAD,CAAKH,UAAW,OAAhB,sCACiBqI,EAAOnE,QAAQJ,KAAK1E,MADrC,IAC6CiJ,EAAOnE,QAAQH,OAAO3E,MADnE,IAC2EiJ,EAAOnE,QAAQF,KAAK5E,MAD/F,IACuGiJ,EAAOnE,QAAQD,KAAK7E,OAE3H,kBAACe,EAAA,EAAD,CAAKH,UAAW,OAAhB,oEACsBqI,EAAO7B,SAE7B,kBAACrG,EAAA,EAAD,CAAKH,UAAW,aC9C5C,IAAMwI,EAAa7F,EAAQ,KAErB8F,GADS9F,EAAQ,KACJA,EAAQ,KAEN+F,E,YAIjB,WAAYnL,GAAQ,IAAD,8BACf,4CAAMA,KAJVoL,cAAgB,IAGG,EAFnBC,eAAgB,EAEG,EAUnBC,QAAU,WACNpD,EAAYtE,MAAM,mBAClB,IAAI2H,EAAU,WACVxH,EAAW,EAAK/D,MAAM+D,SAASyH,SAC/BzH,EAAS0H,WAAW,aAAe1H,EAASqE,OAAS,WAAWA,SAChEmD,EAAUxH,GAEdmE,EAAY9E,QAAQmI,GAAS7K,KAAK,EAAKgL,YAjBxB,EAoBnBA,UAAY,SAAC/K,GACTuH,EAAYtE,MAAM,8BAClBsE,EAAYtE,MAAMjD,GAElB,IAAIgL,EAAQnC,KAAKuB,MAAMpK,EAASE,KAAK8K,OAErCA,EAAM3G,KAAI,SAAC6F,EAAaJ,GACpB,IACI,IAAIzB,EAAQxF,OAAOC,OAAO,IAAIsG,EAAQc,GAClC5B,EAAUO,KAAKuB,MAAME,EAAWW,gBAAgBC,OAAOhB,EAAY5B,UAEhD,kBAAZA,EACPD,EAAQxF,OAAOC,OAAOuF,EAAOC,GAE7BD,EAAMC,QAAUA,EAGpBD,EAAM8C,UAAY9C,EAAM+C,aAAe/C,EAAM8C,UAC7C9C,EAAMgD,WAAahD,EAAMiD,cAAgBjD,EAAM8C,UAC/C9C,EAAMkD,QAAUlD,EAAMI,gBAAkBJ,EAAMkD,QAC9ClD,EAAMG,cAAgB3F,OAAOC,OAAO,IAAIyB,EAAc8D,EAAMG,eAC5DH,EAAMO,QAAUP,EAAMO,SAAW,GAEjC/F,OAAOC,OAAOkI,EAAMlB,GAAWzB,GAEjC,MAAOmD,GACLjE,EAAYtE,MAAMuI,OAI1B,EAAKC,SACD,CACIC,QAAS1L,EAASE,KAAKwL,QACvBxL,KAAM8K,EACNW,OAAQX,KAtDD,EA2DnBY,aAAe,SAAC3E,GAIZ,GAHAA,EAAMmB,iBACNb,EAAYtE,MAAMgE,EAAM4E,eAEpB5E,EAAM4E,cAAcC,QAAQC,OAAQ,CACpCxE,EAAYtE,MAAMgE,EAAM4E,cAAcC,QAAQC,QAE9C,IAAM1D,EAAQ,EAAK2D,MAAML,OAAOM,MAAK,SAAA/B,GACjC,OAAOA,EAAY3J,IAAM0G,EAAM4E,cAAcC,QAAQC,UAGrDnD,EAAUP,EAAMO,SAAW,GAC3BuB,EAAS,CACTnE,QAASqC,EAAMrC,QACfY,SAAUyB,EAAMzB,SAChB0B,QAASD,EAAMC,QACfE,cAAeH,EAAMG,cACrBC,eAAiD,kBAAzBJ,EAAMI,eAA6B,IAAIC,KAAKL,EAAMI,gBAAgBE,UAAU,IAAKN,EAAMI,gBAEnH5F,OAAOC,OAAOqH,EAAO,CAACvB,QAAQA,EAAQsD,OAAOrD,KAAKC,UAAUqB,MAC5D5C,EAAYtE,MAAMkH,GAClB,EAAKgC,YAAYlF,EAAM4E,cAAcC,QAAQC,OAAQ5B,GAErDlD,EAAM4E,cAAcC,QAAQM,UAC5B7E,EAAYtE,MAAM,WAAagE,EAAM4E,cAAcC,QAAQM,SAC3D,EAAKC,aAAapF,EAAM4E,cAAcC,QAAQM,WApFnC,EAwFnBC,aAAe,SAAC9L,GACZgH,EAAY9E,QAAQ,mBAAqBlC,GAAIR,KAAK,EAAK4K,UAzFxC,EAmGnB2B,eAAiB,SAACrF,GACdM,EAAYtE,MAAMgE,EAAME,OAAOhH,OAC/BoH,EAAYtE,MAAMgE,EAAME,OAAO2E,SAC/B,IAAMzD,EAAQ,EAAK2D,MAAML,OAAOM,MAAK,SAAA/B,GACjC,OAAOA,EAAY3J,KAAO0G,EAAME,OAAO2E,QAAQ7B,YAE/CzB,EAAgB,IAAIjE,EACpB4F,EAAS,IAAIJ,EACbnB,EAAUP,EAAMO,SAAW,GAC/BuB,EAAOnE,QAAUqC,EAAMrC,QACvBmE,EAAOvD,SAAWyB,EAAMzB,SACxBuD,EAAO7B,QAAUD,EAAMC,QACvB6B,EAAO1B,eAAkD,kBAAzBJ,EAAMI,eAA6B,IAAIC,KAAKL,EAAMI,gBAAgBE,UAAU,IAAKN,EAAMI,eACvHD,EAAcjI,GAAK0G,EAAME,OAAOhH,MAChCqI,EAActH,MAAO+F,EAAME,OAAOC,gBAAgBC,KAAK,GAAGC,KAC1DC,EAAYtE,MAAMuF,GAClB2B,EAAO3B,cAAgBA,EACvBjB,EAAYtE,MAAMkH,GAClBtH,OAAOC,OAAOqH,EAAO,CAACvB,QAAQA,EAAQsD,OAAOrD,KAAKC,UAAUqB,MAC5D,EAAKgC,YAAY9D,EAAM9H,GAAG4J,IAtHX,EAyHnBoC,oBAAsB,SAACtF,GACnBM,EAAYtE,MAAMgE,EAAME,OAAOhH,OAC/BoH,EAAYtE,MAAMgE,EAAME,OAAO2E,QAAQ7B,UACzB,EAAK+B,MAAML,OAAOM,MAAK,SAAA/B,GACjC,OAAOA,EAAY3J,KAAO0G,EAAME,OAAO2E,QAAQ7B,YAE7C3B,QAAUrB,EAAME,OAAOhH,OA/Hd,EAkInBqM,sBAAwB,SAACvF,GACrBM,EAAYtE,MAAMgE,EAAME,OAAOhH,OAC/BoH,EAAYtE,MAAM,IAAIyF,KAAKzB,EAAME,OAAOhH,OAAOwI,UAAU,KACzDpB,EAAYtE,MAAMgE,EAAME,OAAO2E,QAAQ7B,UACzB,EAAK+B,MAAML,OAAOM,MAAK,SAAA/B,GACjC,OAAOA,EAAY3J,KAAO0G,EAAME,OAAO2E,QAAQ7B,YAE7CxB,eAAgB,IAAIC,KAAKzB,EAAME,OAAOhH,OAAOwI,UAAU,KAvI7D,EAAKqD,MAAQ,CACTN,SAAS,EACTxL,KAAM,GACNyL,OAAQ,IAEZ,EAAKhB,UAPU,E,yEA4FPpK,EAAI4J,GACZ,IAAMjK,EAAO,CACToI,QAASO,KAAKC,UAAUqB,IAE5B5C,EAAY9E,QAAQ,kBAAoBlC,EAAGL,GAAOH,KAAKF,KAAK8K,W,+BA6CtD,IAAD,OAEL,GADApD,EAAYtE,MAAM,oBACdpD,KAAKmM,MAAMN,QAAS,CACpB,IAAMV,EAAQnL,KAAKmM,MAAML,OAEzB,OADApE,EAAYtE,MAAM+H,GAEd,kBAACyB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,cACA,kBAACA,EAAA,EAAD,kBACA,kBAACA,EAAA,EAAD,iBACA,kBAACA,EAAA,EAAD,eACA,kBAACA,EAAA,EAAD,gBACA,kBAACA,EAAA,EAAD,iBACA,kBAACA,EAAA,EAAD,uBACA,kBAACA,EAAA,EAAD,gBACA,kBAACA,EAAA,EAAD,eACA,kBAACA,EAAA,EAAD,KACI,kBAACtH,EAAD,CAAWuB,YAAajH,KAAK8K,aAIzC,kBAACmC,EAAA,EAAD,KAAY9B,EAAM3G,KAAI,SAAC6F,EAAaJ,GAChC,IAAMrB,EAAiB,WACnB,QAAkCO,GAA9BkB,EAAYzB,gBAA6D,IAA9ByB,EAAYzB,eAA3D,CAGI,IAAIsE,EAAO,IAAIrE,KAAkC,IAA7BwB,EAAYzB,gBAChC,OAAO8B,EAAWwC,EAAK,gBAI/B,OADAxF,EAAYtE,MAAMwF,KAEd,kBAACmE,EAAA,EAAD,CAAUzI,IAAK,oBAAsB2F,GACjC,kBAAC+C,EAAA,EAAD,KAAY3C,EAAY3J,IACxB,kBAACsM,EAAA,EAAD,KAAY,IAAInE,KAAuC,IAAlCsE,SAAS9C,EAAYiB,YAAmBd,sBAC7D,kBAACwC,EAAA,EAAD,KAES3C,EAAYoB,aAAe,EACtB,IAAI5C,KAAwC,IAAnCsE,SAAS9C,EAAYmB,aAAoBhB,qBAClD,IAGd,kBAACwC,EAAA,EAAD,KACI,kBAAC,EAAD,CAAmBxE,MAAO2C,EAAMlB,GAAYmD,iBAAkBnD,EAC3CxH,aAAc4H,EAAY1B,cAAcjI,GACxCyD,SAAU,EAAKsI,kBAEtC,kBAACO,EAAA,EAAD,KACK3C,EAAYlE,QAAQJ,KAAK1E,MAD9B,KAEKgJ,EAAYlE,QAAQH,OAAO3E,MAFhC,KAGKgJ,EAAYlE,QAAQF,KAAK5E,MAH9B,KAIKgJ,EAAYlE,QAAQD,KAAK7E,OAE9B,kBAAC2L,EAAA,EAAD,KACK3C,EAAYtD,SAAS1F,OAE1B,kBAAC2L,EAAA,EAAD,KACA,kBAAC3K,EAAA,EAAD,CACI3B,GAAG,OACHwI,MAAM,wFACN5G,KAAK,OACLC,KAAM,iBACNE,aAAcmG,IACdS,gBAAiB,CACbC,QAAQ,GAEZnF,SAAU,EAAKwI,sBACf5C,WAAY,CAAC,gBAAgBM,EAAY3J,OAG7C,kBAACsM,EAAA,EAAD,KACI,kBAAC3K,EAAA,EAAD,CACI6G,MAAM,qEACNxI,GAAI,WAAa2J,EAAY3J,GAC7B+B,aAAc4H,EAAY5B,QAC1BtH,OAAO,SACP8G,QAAQ,WACR9D,SAAU,EAAKuI,oBACf3C,WAAY,CAAC,gBAAgBM,EAAY3J,OAEjD,kBAACsM,EAAA,EAAD,KACI,kBAACK,EAAA,EAAD,CAAaC,KAAK,SACd,kBAAC3K,EAAA,EAAD,CAAQL,KAAK,SAASyF,QAAS,EAAKgE,aAAcwB,cAAalD,EAAY3J,GACnEsH,MAAM,WADd,UAIA,kBAACrF,EAAA,EAAD,CAAQL,KAAK,SAASyF,QAAS,EAAKgE,aAAcyB,eAAcnD,EAAY3J,GACpEsH,MAAM,aADd,aAMR,kBAACgF,EAAA,EAAD,KACI,kBAAC7C,EAAD,CAAcC,SAAUC,EAAY3J,GAAIqI,QAASsB,EAAYtB,kBAW7F,MAAQ,O,GA5PoBpD,IAAM8H,W,sJCZ3B,SAASC,GAAclO,GAMlC,OALAiE,QAAQC,IAAI,wBACZD,QAAQC,IAAIlE,GACiC,IAA/BA,EAAMmI,KAAKvD,SAASwD,OAC9B,kBAAC+F,GAAD,CAAWrJ,IAAK,QAAU9E,EAAMmI,KAAKjH,GAAIW,MAAO7B,EAAMmI,KAAKtG,MAAOuM,iBAAkBpO,EAAMoO,iBAAkBlN,GAAIlB,EAAMmI,KAAKjH,KAC3H,kBAACmN,GAAD,CAAUvJ,IAAK,QAAU9E,EAAMmI,KAAKjH,GAAIiH,KAAMnI,EAAMmI,KAAMiG,iBAAkBpO,EAAMoO,iBAAkBlN,GAAIlB,EAAMmI,KAAKjH,KAS3H,SAASiN,GAAUnO,GACf,IAAMsO,EAAYtO,EAAMsC,WAAa,GACrC,OACI,kBAACiM,GAAA,EAAD,CAAUzJ,IAAK,QAAU9E,EAAMkB,GAAIsN,QAAM,EAAClM,UAAWgM,GACjD,kBAACG,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,KACI,kBAAC,KAAD,QAGR,kBAACC,GAAA,EAAD,CAAcC,QAAS5O,EAAM6B,QAC7B,kBAACgN,GAAA,EAAD,KACI,kBAAC1L,EAAA,EAAD,CAAQL,KAAK,SAASyF,QAASvI,EAAMoO,iBAAkBU,cAAa9O,EAAMkB,GAAIsH,MAAM,UAC5EC,QAAS,YADjB,YAchB,SAASsG,GAAW/O,GAChB,IAAMsO,EAAYtO,EAAMsC,WAAa,GACrC,OACI,kBAACiM,GAAA,EAAD,CAAUzJ,IAAK,QAAU9E,EAAMkB,GAAIsN,QAAM,EAAClM,UAAWgM,EAAW/F,QAASvI,EAAMuI,SAC3E,kBAACkG,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,KACI,kBAAC,KAAD,QAGR,kBAACC,GAAA,EAAD,CAAcC,QAAS5O,EAAM6B,QAC7B,kBAACgN,GAAA,EAAD,KACI,kBAAC1L,EAAA,EAAD,CAAQL,KAAK,SAASyF,QAASvI,EAAMoO,iBAAkBU,cAAa9O,EAAMkB,GAAIsH,MAAM,UAC5EC,QAAS,YADjB,YAShB,IAAMuG,GAAa1N,aAAW,SAAA+D,GAAK,MAAK,CACpC4J,KAAQ,CACJC,MAAiB,OACjB3M,SAAiB,IACjBmD,gBAAiBL,EAAMM,QAAQC,WAAWH,OAE9C0J,OAAQ,CACJC,YAAa/J,EAAMY,QAAQ,QAInC,SAASoI,GAASrO,GACd,IAAMoC,EAAU4M,KADK,EAEG7I,IAAMC,UAAS,GAFlB,mBAEdC,EAFc,KAERC,EAFQ,KAQrB,MAAQ,CACJ,kBAACyI,GAAD,CAAYjK,IAAK,QAAU9E,EAAMmI,KAAKjH,GAAK,QAASW,MAAO7B,EAAMmI,KAAKtG,MAAOuM,iBAAkBpO,EAAMoO,iBAAkB7F,QALvG,WAChBjC,GAASD,IAIoInF,GAAIlB,EAAMmI,KAAKjH,KAC5J,kBAACmO,GAAA,EAAD,CAAUvK,IAAK,QAAU9E,EAAMmI,KAAKjH,GAAK,YAAaoO,GAAIjJ,EAAMkJ,QAAQ,OAAOC,eAAa,GACxF,kBAACC,GAAA,EAAD,CAAM3K,IAAK,QAAU9E,EAAMmI,KAAKjH,GAAK,WAAYuB,UAAU,MAAMiN,gBAAc,EAACpN,UAAWF,EAAQ+M,QAE3FnP,EAAMmI,KAAKvD,SAASI,KAAI,SAAAC,GACpB,OACI,kBAACiJ,GAAD,CAAepJ,IAAK,QAAUG,EAAM/D,GAAIiH,KAAMlD,EAC/BmJ,iBAAkBpO,EAAMoO,iBAAkBlN,GAAI+D,EAAM/D,WC/EtFkE,EAAQ,KAAjB,IAEqBuK,G,YAIjB,WAAY3P,GAAQ,IAAD,6BACf,4CAAMA,IACNiE,QAAQC,IAAI,mBACZ,EAAKyI,MAAQ,CACTN,SAAS,EACT/D,MAAO,GACPsH,OAAQ,IAAI5F,EAAK,KAErB/F,QAAQC,IAAI,eAAiBsF,KAAKC,UAAU,EAAKkD,QACjD,EAAKvB,cAAgB,IACrB,EAAK1I,SAAW,EAAKA,SAASmN,KAAd,gBAChB,EAAKC,kBAAoB,EAAKA,kBAAkBD,KAAvB,gBACzB,EAAKE,eAAiB,EAAKA,eAAeF,KAApB,gBACtB,EAAKG,gBAAkB,EAAKA,gBAAgBH,KAArB,gBACvB,EAAKG,kBACL,EAAKC,OAAS3O,aAAW,SAAA+D,GAAK,MAAK,CAC/B4J,KAAM,CACFC,MAAO,OACP3M,SAAU,IACVmD,gBAAiBL,EAAMM,QAAQC,WAAWH,OAE9C0J,OAAQ,CACJC,YAAa/J,EAAMY,QAAQ,QAtBpB,E,wEA2BRiK,GAAc,IAAD,OAChB7M,EAAMM,EAAYlD,WAAW,kBACjCH,IAAMC,IAAI8C,EAAK,CACXC,OAAQ,CACJnC,MAAOb,IAAMoD,SAASJ,OAAOnC,MAC7BgP,SAAU7P,IAAMoD,SAASJ,OAAO6M,SAChClG,KAAMiG,EAAYjG,KAAKnJ,MACvBe,MAAOqO,EAAYrO,MAAMf,MACzBsP,OAAQF,EAAYE,OAAOtP,SAEhCJ,MACC,SAAA2P,GACI,EAAKjE,SAAS,CACVwD,OAAQ,IAAI5F,EAAK,MAErB,EAAK8F,yB,iCAIN5O,GAAK,IAAD,OACPmC,EAAMM,EAAYlD,WAAW,kBACjCH,IAAMC,IAAI8C,EAAK,CACXC,OAAQ,CACJnC,MAAOb,IAAMoD,SAASJ,OAAOnC,MAC7BgP,SAAU7P,IAAMoD,SAASJ,OAAO6M,SAChCjP,GAAIA,KAETR,MACC,SAAA2P,GACI,EAAKP,yB,+BAIRlI,GACL3D,QAAQC,IAAI0D,EAAM4E,cAAcC,QAAQ6D,QACxC1I,EAAMmB,iBACFnB,EAAME,OAAO8H,QACbpP,KAAK+P,WAAW3I,EAAME,QAEtBF,EAAM4E,cAAcC,QAAQ6D,QAC5B9P,KAAKgQ,WAAW5I,EAAM4E,cAAcC,QAAQ6D,U,qCAIrC1I,GAEX3D,QAAQC,IAAI0D,EAAME,OAAOhH,OACzB,IAAI2P,EAAQjQ,KAAKmM,MAAMiD,OACvBa,EAAMvG,SAAWtC,EAAME,OAAOhH,MAC9B2P,EAAMxG,KAAO5B,kBAAQT,EAAME,OAAOC,gBAAgBC,KAAK,GAAG0I,aAC1D,IAAMd,EAASa,EACfjQ,KAAK4L,SAAS,CACVwD,OAAQA,M,0CAKK,IAAD,OAEhB3L,QAAQC,IAAI,eACZ,IAAIqH,EAAU5H,EAAYlD,WAAW,WACjCsD,EAAWvD,KAAKR,MAAM+D,SAASyH,SAC/BzH,EAAS0H,WAAW,YAAc1H,EAASqE,OAAS,UAAUA,SAC9DmD,EAAU5H,EAAYlD,WAAWsD,IAGrCzD,IAAMC,IAAIgL,EAAS,CACfjI,OAAQ,CACJnC,MAAOb,IAAMoD,SAASJ,OAAOnC,MAC7BgP,SAAU7P,IAAMoD,SAASJ,OAAO6M,YAGnCzP,MACG,SAAA2P,GACIpM,QAAQC,IAAI,0BAA4BsF,KAAKC,UAAU4G,IACvD,EAAKjE,SAAS,CACVC,QAASgE,EAAOxP,KAAKwL,QACrB/D,MAAO+H,EAAOxP,KAAKyH,MACnBsH,OAAQ,CAAChL,SAAU,CAAC,IAAIoF,EAAK,KAAK6C,OAAOwD,EAAOxP,KAAKyH,aAIhEqI,OAAM,SAAAC,GACH3M,QAAQC,IAAI0M,Q,oFAOLC,GACf5M,QAAQC,IAAI2M,EAAU9M,UACtBE,QAAQC,IAAI1D,KAAKR,MAAM+D,UACnBvD,KAAKR,MAAM+D,WAAa8M,EAAU9M,UAClCvD,KAAKsP,sB,+BAIH,IAAD,OACL7L,QAAQC,IAAI,cACZD,QAAQC,IAAI1D,KAAKmM,OAGjB,IAAcA,EAmBd,OACI,kBAAC/J,EAAA,EAAD,CAAKH,UAAW,QApBNkK,EAqBAnM,KAAKmM,MApBf1I,QAAQC,IAAI,qBACZD,QAAQC,IAAIyI,IACU,IAAlBA,EAAMN,QACE,GAGJ,kBAACoD,GAAA,EAAD,CAAMhN,UAAW,OACZkK,EAAMrE,MAAMtD,KAAI,SAAAmD,GACb,OACI,kBAAC+F,GAAD,CAAepJ,IAAKqD,EAAKjH,GAAIiH,KAAMA,EACpBiG,iBAAkB,EAAK1L,gBAWtD,kBAACoO,GAAD,CACI3I,KAAM3H,KAAKmM,MAAMiD,OACjBlN,SAAUlC,KAAKkC,SACfiC,SAAUnE,KAAKuP,sB,GA/JA5J,IAAM8H,WAsKnC8C,GAAkBzP,aAAW,SAAA+D,GAAK,MAAK,CACzC4J,KAAM,CACF+B,SAAU,GAEdvL,MAAO,CACHwL,OAAQ,IACR/B,MAAO,KAEXgC,QAAS,CACLlL,QAASX,EAAMY,QAAQ,QAI/B,SAAS6K,GAAU9Q,GACC+Q,KAGhB,OAFA9M,QAAQC,IAAI,gBAAkBsF,KAAKC,UAAUzJ,IAGzC,kBAAC4C,EAAA,EAAD,CAAKH,UAAW,OAAQC,SAAU1C,EAAM0C,SAAU+F,QAAS,YAEvD,kBAAC0I,GAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,aAAapL,QAAS,GAC1C,kBAACkL,GAAA,EAAD,CAAMrM,IAAK,EAAGkD,MAAI,GACd,kBAACnF,EAAA,EAAD,CACI6G,MAAO,mDACP3G,KAAM,QACNE,aAAc,GACdwF,QAAS,cAIjB,kBAAC0I,GAAA,EAAD,CAAMrM,IAAK,EAAGkD,MAAI,GACd,kBAACsJ,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CAAYzH,QAAM,EAAC0H,QAAQ,oBAA3B,oDAGA,kBAAC3M,EAAA,EAAD,CACIF,SAAU3E,EAAM2E,SAChB4F,WAAY,CACRxH,KAAM,SACN7B,GAAI,oBAERJ,MAAOd,EAAMmI,KAAK+B,UAElB,kBAACuH,GAAD,CAAkB3M,IAAK,qBAAuB9E,EAAMmI,KAAKjH,GAAIiH,KAAMnI,EAAMmI,UAIrF,kBAACgJ,GAAA,EAAD,CAAMrM,IAAK,EAAGkD,MAAI,GACd,kBAAC7E,EAAA,EAAD,CAAQuO,cAAa,EAAG5O,KAAM,SAAU2F,QAAS,WAAYD,MAAO,UAC5DsF,KAAM,SADd,YAKR,kBAAC6D,GAAA,EAAD,CAAO7O,KAAM,SAAUC,KAAM,SAAUjC,MAAO,IAC9C,kBAAC6Q,GAAA,EAAD,CAAO7O,KAAM,SAAUC,KAAM,OAAQjC,MAAOd,EAAMmI,KAAK8B,QAOnE,SAASwH,GAAiBzR,GAEtB,OADAiE,QAAQC,IAAIlE,EAAMmI,MACiB,IAA/BnI,EAAMmI,KAAKvD,SAASwD,OAEhB,4BAAQtD,IAAK,eAAiB9E,EAAMmI,KAAKjH,GAAIJ,MAAOd,EAAMmI,KAAKjH,GACvD0Q,YAAWvJ,kBAAQrI,EAAMmI,KAAKtG,QAAS7B,EAAMmI,KAAKtG,QAG9DoC,QAAQC,IAAI,iBACZD,QAAQC,IAAIlE,EAAMmI,MACV,CACJnI,EAAMmI,KAAKjH,IAAM,4BAAQ4D,IAAK,eAAiB9E,EAAMmI,KAAKjH,GAAIJ,MAAOd,EAAMmI,KAAKjH,IAAKlB,EAAMmI,KAAKtG,OAEhG7B,EAAMmI,KAAKvD,SAASI,KAAI,SAAAC,GAAK,OACzB,kBAACwM,GAAD,CAAkB3M,IAAK,qBAAuBG,EAAM/D,GAAIiH,KAAMlD,S,ICnQzD4M,G,YAOjB,WAAY7R,GAAQ,IAAD,8BACf,4CAAMA,KAPV2M,MAAQ,CACJN,SAAS,EACTtJ,UAAM4G,EACN7I,WAAO6I,GAGQ,E,iFAIE,IAAD,OAChBrJ,IAAMC,IAAIoD,EAAYlD,WAAW,uBAC5BC,MACG,SAAC2P,GACGpM,QAAQC,IAAI,EAAKyI,OACjB,EAAKP,SAASiE,EAAOxP,MACrBoD,QAAQC,IAAI,EAAKyI,UAGxBgE,OACG,SAACmB,GACG7N,QAAQC,IAAI4N,Q,+BAMxB,GAAItR,KAAKmM,MAAMN,QAAS,CAAC,IACd0F,EAAQvI,KAAKuB,MAAMvK,KAAKmM,MAAM7L,MAAMA,OAApCiR,KACP,OACI,6BACI,2BAAIA,EAAK7Q,GAAT,IAAc6Q,EAAKhP,KAAnB,IAA0BgP,EAAKC,OAAOC,WAAtC,MAIZ,MAAO,O,GApCsB9L,IAAM8H,W,6BCYrC5M,GAAYC,aAAW,SAAA+D,GAAK,MAAK,CACnC4J,KAAM,CACF+B,SAAU,GAEdkB,WAAY,CACRC,YAAa9M,EAAMY,QAAQ,GAC3BuC,MAAO,SAEX3G,MAAO,CACHmP,SAAU,OAIH,SAASoB,GAAapS,GACjC,IAAMoC,EAAUf,KACVgR,EAAWrS,EAAMqS,UAAY,GAFK,EAGRlM,IAAMC,SAAS,MAHP,6BAYxC,MAAQ,CACJ,kBAAC,IAAD,KACI,kBAACkM,GAAA,EAAD,CAAQC,SAAS,UACb,kBAACC,GAAA,EAAD,KAEI,kBAACrP,EAAA,EAAD,CAAQV,UAAWgQ,IAAMC,GAAG,IAAIlK,MAAO,UAC/BC,QAAS,OAAQnG,UAAWF,EAAQ8P,YAD5C,QAEA,kBAAC/O,EAAA,EAAD,CAAQV,UAAWgQ,IAAMC,GAAG,WAAWlK,MAAO,UACtCC,QAAS,OAAQnG,UAAWF,EAAQ8P,YAD5C,UAEA,kBAAC/O,EAAA,EAAD,CAAQV,UAAWgQ,IAAMC,GAAG,UAAUlK,MAAO,UACrCC,QAAS,OAAQnG,UAAWF,EAAQ8P,YAD5C,SAEA,kBAAC/O,EAAA,EAAD,CAAQV,UAAWgQ,IAAMC,GAAG,WAAWlK,MAAO,UACtCC,QAAS,OAAQnG,UAAWF,EAAQ8P,YAD5C,WAGA,kBAACS,GAAA,EAAD,CAAYlK,QAAQ,KAAKnG,UAAWF,EAAQP,MAAO+Q,MAAO,SACrDP,EADL,aAKR,kBAAC,IAAD,CAAOtR,KAAK,UAAU0B,UAAW0I,IACjC,kBAAC,IAAD,CAAOpK,KAAK,SAAS0B,UAAWkN,KAChC,kBAAC,IAAD,CAAO5O,KAAK,WAAW0B,UAAWoP,KAClC,kBAAC,IAAD,CAAO9Q,KAAK,UAAU0B,UAAWoQ,O,kCC9CxBA,G,YAEjB,WAAY7S,GAAQ,IAAD,sBACf,4CAAMA,IACN,IAAM8S,EAAO,IAAI7R,EAFF,OAGf,EAAK0L,MAAQ,CACTmG,KAAMA,GAEV,EAAKC,sBAAwB,EAAKA,sBAAsBlD,KAA3B,gBANd,E,mFASGjI,GAAQ,IAAD,OACzBA,EAAMmB,iBACN,IAAMiK,EAAOpL,EAAM4E,cACbsG,EAAO7R,EACb6R,EAAK3R,MAAQ6R,EAAK7R,MAAML,MACxBgS,EAAK1R,KAAO4R,EAAK5R,KAAKN,MAGtBR,IAAMC,IAAIoD,EAAYlD,WAAW,gBAAiB,CAC9C6C,OAAQ,CAACnC,MAAO2R,EAAK3R,MAAOgP,SAAU2C,EAAK1R,QAC5CV,MAAK,SAAAC,GACJmS,EAAK5R,GAAKP,EAASE,KAAKmH,KAAK9G,SAAMyI,EACnC,EAAKyC,SAAS,CACV0G,KAAMA,OAEXnC,OAAM,SAACsC,GACNhP,QAAQC,IAAI+O,Q,+BAKiB,aAA7BnP,OAAOC,SAASyH,WAChB0H,eAAeC,QACfrP,OAAOC,SAASqP,KAAOtP,OAAOC,SAASsP,QAE3C,IAAMlS,EAAQ+R,eAAeI,QAAQ,UAAY9S,KAAKmM,MAAMmG,KAAK3R,MAC3DC,EAAO8R,eAAeI,QAAQ,aAAe9S,KAAKmM,MAAMmG,KAAK1R,KAC7DF,EAAKV,KAAKmM,MAAMmG,KAAK5R,IAAMgS,eAAeI,QAAQ,MACxD,GAAI3F,SAASzM,GAAM,EAAG,CAClBZ,IAAMoD,SAASJ,OAAS,CACpBnC,MAAOA,EACPgP,SAAU/O,GAEd8R,eAAeK,QAAQ,KAAKrS,GAC5BgS,eAAeK,QAAQ,QAAQpS,GAC/B+R,eAAeK,QAAQ,WAAWnS,GAClC,IAAMiR,EAAWlR,EAAMkD,MAAM,KAAK,GAAGmP,cAErC,MAAQ,CAAC,kBAACpB,GAAD,CAAcC,SAAUA,KAErC,MAAQ,CAAC,kBAACoB,GAAD,MAAmB,kBAACtR,EAAD,CAAWO,SAAUlC,KAAKuS,sBAAuB5R,MAAOA,EAAOC,KAAMA,S,GAnDnE+E,IAAM8H,WAwDtC5M,GAAYC,aAAW,SAAA+D,GAAK,MAAK,CACnC4J,KAAM,CACF+B,SAAU,GAEdkB,WAAY,CACRC,YAAa9M,EAAMY,QAAQ,IAE/BpE,MAAO,CACHmP,SAAU,OAKlB,SAASyC,GAAezT,GACpB,IAAMoC,EAAUf,KACVgR,EAAWrS,EAAMqS,UAAY,GAEnC,OACI,kBAACC,GAAA,EAAD,CAAQC,SAAS,UACb,kBAACC,GAAA,EAAD,KACI,kBAACkB,GAAA,EAAD,CAAYC,KAAK,QAAQrR,UAAWF,EAAQ8P,WAAY1J,MAAM,UAAUoL,aAAW,QAC/E,kBAAC,KAAD,OAEJ,kBAACjB,GAAA,EAAD,CAAYlK,QAAQ,KAAKnG,UAAWF,EAAQP,OACvCwQ,EADL,aCpFIwB,QACa,cAA7B/P,OAAOC,SAAS+P,UAEa,UAA7BhQ,OAAOC,SAAS+P,UAEhBhQ,OAAOC,SAAS+P,SAASC,MACrB,2D,aCZF1O,GAAQ2O,aAAe,CACzBC,UAAW,CAEPC,UAAW,CAEPjF,KAAM,CAEFkF,OAAQ,eAMxBC,IAASC,OAAO,kBAAC,GAAD,CAAUhP,MAAOA,KAAoBiP,SAASC,eAAe,SD8GrE,kBAAmBC,WACnBA,UAAUC,cAAcC,MAAMhU,MAAK,SAAAiU,GAC/BA,EAAaC,kB","file":"static/js/main.034b221e.chunk.js","sourcesContent":["\nimport axios from \"axios\";\n\nclass IspCpConfig {\n    ApiProtocol = \"http\";\n    ApiHost = \"ctn.onedext.ru\";\n    ApiPort = 8080;\n    ApiUrlPrefix = \"/api\";\n    LoggedIn = false;\n\n    constructor(props) {\n        axios.get(this.ApiRequest(\"/users/login\")).then(\n            (response) => {\n                this.setLoggedIn(response.data);\n            });\n    }\n\n    setLoggedIn(value)\n    {\n        this.LoggedIn = value;\n    }\n\n    ApiRequest(path) {\n        return this.ApiProtocol + \"://\" +\n            this.ApiHost +\n            (this.ApiPort ? \":\" + this.ApiPort : '') +\n            this.ApiUrlPrefix +\n            path;\n    }\n\n    ApiRootRequest(path) {\n        if (path.indexOf(\"?\") === -1) {\n            return this.ApiRequest(path + \"?role=99999999999&passwd=secret\")\n        } else {\n            return this.ApiRequest(path + \"&role=99999999999&passwd=secret\")\n        }\n    }\n}\n\nexport default new IspCpConfig();","export default class User {\n    id = 0;\n    email = \"\";\n    pass = \"\";\n    role;\n}","import Container from \"@material-ui/core/Container\";\nimport {Box, makeStyles} from \"@material-ui/core\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport React from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardActions from \"@material-ui/core/CardActions\";\n\n\nconst useStyles = makeStyles({\n    card: {\n        minWidth: 275,\n    },\n    bullet: {\n        display: 'inline-block',\n        margin: '0 2px',\n        transform: 'scale(0.8)',\n    },\n    title: {\n        fontSize: 14,\n    },\n    pos: {\n        marginBottom: 12,\n    },\n    cardContainer: {\n        marginTop: \"1.5em\",\n    }\n});\n\nexport default function LoginForm(props) {\n\n    const classes = useStyles();\n\n    return (\n        <Container className={classes.cardContainer} maxWidth={\"sm\"}>\n            <Card className={classes.card} maxWidth={\"md\"} component={\"form\"} onSubmit={props.onSubmit}>\n                <CardContent>\n                    <Box component={\"div\"}>\n                        <TextField type={\"email\"} name={\"email\"} placeholder={\"Login\"} defaultValue={props.email}/>\n                    </Box>\n                    <Box component={\"div\"}>\n                        <TextField type={\"password\"} name={\"pass\"} placeholder={\"Password\"} defaultValue={props.pass}>\n                            Password\n                        </TextField>\n                    </Box>\n\n\n                </CardContent>\n                <CardActions>\n                    <Button type={\"submit\"}>SGIN IN</Button>\n                </CardActions>\n            </Card>\n        </Container>\n    )\n}","import axios from \"axios\";\nimport IspCpConfig from \"./IspCpConfig\";\n\nclass IspCpHelper {\n    getUriParams() {\n        let params = window.location.search.substr(1).split(\"&\");\n        console.log(params);\n        let pairs = [];\n        params.forEach((param) => {\n            pairs.push(param.split(\"=\"));\n        });\n        return pairs;\n    }\n\n    callApi = (url,params) => {\n        let config = {params:Object.assign(axios.defaults.params,params)};\n        return axios.get(IspCpConfig.ApiRequest(url), config);\n    }\n\n    debug = (message) => {\n        if (window.location.host == 'ctn.onedext.ru') {\n            console.log(message);\n        }\n    }\n}\n\nexport default new IspCpHelper();","import Box from \"@material-ui/core/Box\";\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\nimport React from \"react\";\n\nexport default function ChainedList(props) {\n    const onChange = props.onChange;\n    const children = props.children;\n\n    return (\n        <Box component={\"div\"}>\n            <NativeSelect name={props.id} onChange={onChange} id={props.id} value={props.value}>\n                <option key={\"address-root-item-\" + props.id} value={0}>{props.root_title}</option>\n                {children.map(child => {\n                    return (<option key={\"address-item-\" + child.id} value={child.id}>{child.title}</option>);\n                })}\n            </NativeSelect>\n        </Box>\n    );\n}","function IssueStatus() {\n    let id =0;\n    let title= 'Новая';\n    return this;\n};\n\nexport default IssueStatus;","import React from \"react\";\nimport IspCpConfig from \"../IspCpConfig\";\nimport axios from \"axios\";\nimport {slugify} from \"transliteration\";\nimport Button from \"@material-ui/core/Button\";\nimport Modal from \"@material-ui/core/Modal\";\nimport Box from \"@material-ui/core/Box\";\nimport TextField from \"@material-ui/core/TextField\";\nimport {makeStyles, NativeSelect} from \"@material-ui/core\";\nimport IspCpHelper from \"../IspCpHelper\";\nimport ChainedList from \"./ChainedList\";\nimport IssueStatus from \"../models/IssueStatus\";\n\nconst dateformat = require(\"dateformat\");\n\nconst formStyles = makeStyles(theme => ({\n    modal: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    paper: {\n        backgroundColor: theme.palette.background.paper,\n        border: '2px solid #000',\n        boxShadow: theme.shadows[5],\n        padding: theme.spacing(2, 4, 3),\n    },\n}));\n\nexport default function IssueForm(props) {\n\n    const classes = formStyles();\n    const [open, setOpen] = React.useState(false);\n\n    const [address, setAddress] = React.useState({city: {}, street: {}, home: {}, flat: {}});\n    const [cities, setCities] = React.useState([]);\n    const [streets, setStreets] = React.useState([]);\n    const [homes, setHomes] = React.useState([]);\n    const [flats, setFlats] = React.useState([]);\n    const [engineers, setEngineers] = React.useState([])\n    const [engineer, setEngineer] = React.useState({id: 0, title: ''});\n\n    const afterReport = props.afterReport;\n\n    const handleClose = () => {\n        setOpen(false);\n    }\n\n    const handleOpen = () => {\n        setOpen(true);\n    }\n\n    const reportIssue = (event) => {\n        event.preventDefault();\n        let issue = Object.assign(\n            {address: address},\n            {engineer: engineer},\n            {comment: event.target.comment_new.value},\n            {report_status: new IssueStatus()},\n            {execution_date: new Date(event.target.execution_date.value).getTime()/1000}\n        );\n        Object.assign(issue, {history: [JSON.stringify(issue)]});\n        let url = \"/issues/report/\";\n        IspCpHelper.callApi(url, {comment: issue}).then(afterReport);\n        handleClose();\n    }\n\n    const onChangeAddress = (event) => {\n        var address_new = Object.assign({}, address);\n\n        switch (event.target.id) {\n            case \"city-new\":\n                address_new.city = {\n                    title: event.target.selectedOptions.item(0).text,\n                    id: event.target.value\n                };\n                address_new.city.title = event.target.selectedOptions.item(0).text;\n                IspCpHelper.callApi(\"/term/\" + address_new.city.id).then((response) => {\n                    setStreets(response.data.term.children || [])\n                });\n                break;\n            case \"street-new\":\n                address_new.street = {\n                    title: event.target.selectedOptions.item(0).text,\n                    id: event.target.value\n                };\n                IspCpHelper.callApi(\"/term/\" + address_new.street.id).then((response) => {\n                    setHomes(response.data.term.children || [])\n                });\n                break;\n            case \"home-new\":\n                address_new.home = {\n                    title: event.target.selectedOptions.item(0).text,\n                    id: event.target.value\n                };\n                IspCpHelper.callApi(\"/term/\" + address_new.home.id).then((response) => {\n                    setFlats(response.data.term.children || [])\n                });\n                break;\n            case \"flat-new\":\n                address_new.flat = {\n                    title: event.target.selectedOptions.item(0).text,\n                    id: event.target.value\n                };\n                break;\n        }\n        setAddress(address_new);\n    }\n\n    const onChangeEngineer = (event) => {\n        setEngineer({\n            title: event.target.selectedOptions.item(0).text,\n            id: event.target.value\n        })\n    }\n\n    if (cities.length === 0) {\n        IspCpHelper.callApi(\"/terms/\" + slugify(\"Адреса\")).then((response) => {\n            setCities(response.data.terms)\n        });\n    }\n\n    if (engineers.length === 0) {\n        IspCpHelper.callApi(\"/terms/\" + slugify(\"Монтажники\")).then((response) => {\n            setEngineers(response.data.terms)\n        });\n    }\n\n    const execution_date = undefined;\n    return (\n        <div>\n            <Button onClick={handleOpen} color=\"secondary\" variant={\"outlined\"}>REPORT</Button>\n            <Modal\n                aria-labelledby=\"transition-modal-title\"\n                aria-describedby=\"transition-modal-description\"\n                open={open}\n                closeAfterTransition\n                onClose={handleClose}\n                className={classes.modal}\n            >\n\n                <Box component={\"form\"} className={classes.paper} onSubmit={reportIssue}>\n                    <h2 id=\"transition-modal-title\">REPORT ISSUE</h2>\n                    <Box component={\"div\"}>\n                        <ChainedList root_title=\"Город\" value={address.city.id} children={cities}\n                                     onChange={onChangeAddress} id={\"city-new\"}/>\n                        <ChainedList root_title=\"Улица\" value={address.street.id} children={streets}\n                                     onChange={onChangeAddress} id={\"street-new\"}/>\n                        <ChainedList root_title=\"Дом\" value={address.home.id} children={homes}\n                                     onChange={onChangeAddress}\n                                     id={\"home-new\"}/>\n                        <ChainedList root_title=\"Квартира\" value={address.flat.id} children={flats}\n                                     onChange={onChangeAddress} id={\"flat-new\"}/>\n                    </Box>\n                    <Box component={\"div\"}>\n                        <NativeSelect value={engineer.id} onChange={onChangeEngineer}>\n                            <option value={0}>Монтажник</option>\n                            {\n                                engineers.map(item => {\n                                    return (\n                                        <option key={\"engineer-id-\" + item.id} value={item.id}>{item.title}</option>)\n                                })\n                            }\n                        </NativeSelect>\n                    </Box>\n                    <Box component={\"p\"}/>\n                    <TextField\n                        id=\"date\"\n                        label=\"Дата выполнения\"\n                        type=\"date\"\n                        name={\"execution_date\"}\n                        defaultValue={execution_date}\n                        className={classes.textField}\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                    />\n                    <Box component={\"div\"}>\n                        <TextField\n                            label=\"Комментарий\"\n                            id={\"transition-modal-description\"}\n                            defaultValue={\"\"}\n                            margin=\"normal\"\n                            variant=\"outlined\"\n                            name={\"comment_new\"}\n                        />\n                        <Button type=\"submit\" color=\"secondary\" variant={\"outlined\"}>REPORT</Button>\n                    </Box>\n                </Box>\n            </Modal>\n        </div>\n    );\n\n};","import Address from \"./Address\";\nimport Engineer from \"./Engineer\";\nimport IssueStatus from \"./IssueStatus\";\n\nfunction Issue() {\n    let id = 0;\n    let report_ts = 0;   // Дата постановки задачи\n    let exec_ts= 0;     // Дата передачи заявки исполнителю\n    let resolve_ts= 0;  // Дата закрытия заявки\n    let report_status= IssueStatus;    // Статус заявки\n    let address= Address;   // Адрес\n    let engineer= Engineer; // Исполнитель\n    let comment= '';        // Комментарий\n    let history=[];\n    return this;\n}\n\nexport default Issue;","export default class Term {\n\n    constructor(props) {\n        this.id = props.id || 0;\n        this.slug = props.slug || \"root\";\n        this.title = props.title || \"Корень\";\n        this.parentId = props.parentId || 0;\n        this.children = props.children || [];\n    }\n}","import React from 'react';\nimport {makeStyles, NativeSelect} from \"@material-ui/core\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Button from \"@material-ui/core/Button\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\nimport FolderIcon from '@material-ui/icons/Folder';\nimport Collapse from \"@material-ui/core/Collapse\";\nimport LabelIcon from '@material-ui/icons/Label';\nimport IspCpHelper from \"../IspCpHelper\";\nimport {slugify} from \"transliteration\";\nimport Term from \"../models/Term\";\nimport Select from \"@material-ui/core/Select\";\n\n\nconst ch = ()=>{\n    return 0;\n}\n\nfunction IssueStatusSelect(props)\n{\n    const [statuses, setStatuses] = React.useState([]);\n    const issue = props.issue;\n\n\n    const passStatuses = (response)=>{\n        setStatuses(response.data.terms);\n    }\n\n    if (statuses.length === 0) {\n        IspCpHelper.callApi('/terms/' + slugify('Статусы заявок')).then(passStatuses)\n    }\n\n    const input_props = {\n        \"data-issue_id\":issue.id\n    }\n\n    return(\n        <NativeSelect inputProps={input_props} value={issue.report_status.id} onChange={props.onChange}>\n            <option key={\"index-issue-statuses-\" + 0} value={0}>{\"Статус\"}</option>\n            {statuses.map((option, index_key)=>{\n                return(\n                    <option key={\"index-issue-statuses-\" + (index_key+1)} value={option.id}>{option.title}</option>\n                );\n            })}\n        </NativeSelect>\n    );\n}\n\nexport default IssueStatusSelect;","import Address from \"./Address\";\nimport Engineer from \"./Engineer\";\nimport IssueStatus from \"./IssueStatus\";\n\nfunction IssueUpdateReport () {\n    let address = Address;\n    let engineer = Engineer;\n    let comment=\"\";\n    let report_status=IssueStatus;\n    let execution_date=0;\n    return this;\n};\n\nexport default IssueUpdateReport;","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Modal from \"@material-ui/core/Modal\";\nimport Box from \"@material-ui/core/Box\";\nimport {makeStyles, NativeSelect} from \"@material-ui/core\";\nimport GridList from \"@material-ui/core/GridList\";\nimport GridListTile from \"@material-ui/core/GridListTile\";\nimport IspCpHelper from \"../IspCpHelper\";\n\nconst formStyles = makeStyles(theme => ({\n    modal: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    paper: {\n        backgroundColor: theme.palette.background.paper,\n        border: '2px solid #000',\n        boxShadow: theme.shadows[5],\n        padding: theme.spacing(2, 4, 3),\n    },\n}));\n\nexport default function IssueHistory(props) {\n\n    const classes = formStyles();\n    const [open, setOpen] = React.useState(false);\n\n    const handleClose = () => {\n        setOpen(false);\n    }\n\n    const handleOpen = () => {\n        setOpen(true);\n    }\n\n    if (props.history.length===0) {\n        return('');\n    }\n    return ([\n            <Button onClick={handleOpen} color=\"secondary\" variant={\"outlined\"}>History</Button>,\n            <Modal\n                aria-labelledby=\"transition-modal-title\"\n                aria-describedby=\"transition-modal-description\"\n                open={open}\n                closeAfterTransition\n                onClose={handleClose}\n                className={classes.modal}\n            >\n\n                <Box component={\"div\"} className={classes.paper}>\n                    <h2 id=\"transition-modal-title\">REPORT #{props.issue_id} HISTORY</h2>\n                    {props.history.map((index_entry,index_key)=>{\n                        const report = JSON.parse(index_entry);\n                        IspCpHelper.debug(report);\n                        const report_status = report.report_status.title||'Новая';\n                        const execution_date = (report.execution_date != undefined && report.execution_date != \"\" && report.execution_date != 0)?\"назначена на \" + new Date(report.execution_date*1000).toLocaleDateString() : \"\";\n                        return([\n                            <Box component={\"div\"}>\n                                {report_status}, &nbsp;Монтажник:&nbsp;{report.engineer.title}, &nbsp; {execution_date}\n                            </Box>,\n                            <Box component={\"div\"}>\n                                Адрес:&nbsp;{report.address.city.title}/{report.address.street.title}/{report.address.home.title}/{report.address.flat.title}\n                            </Box>,\n                            <Box component={\"div\"}>\n                                Примечание:&nbsp;{report.comment}\n                            </Box>,\n                            <Box component={\"p\"}/>\n                        ]);\n                    })}\n                </Box>\n            </Modal>\n    ]);\n\n};","import React from 'react';\nimport Button from \"@material-ui/core/Button\";\nimport Paper from \"@material-ui/core/Paper\";\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\nimport TextField from '@material-ui/core/TextField';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport {slugify} from 'transliteration';\nimport IspCpHelper from \"../IspCpHelper\";\nimport IssueForm from \"./IssueForm\";\n\nimport Issue from \"../models/Issue\";\nimport IssueStatusSelect from \"./IssueStatusSelect\";\nimport IssueStatus from \"../models/IssueStatus\";\nimport IssueUpdateReport from \"../models/IssueUpdateReport\";\nimport IssueHistory from \"./IssueHistory\";\nimport Box from \"@material-ui/core/Box\";\n\nconst HTMLEntity = require(\"html-entities\");\nconst IsJSON = require(\"is-json\");\nconst dateformat = require(\"dateformat\");\n\nexport default class Issues extends React.Component {\n    updateTimeout = 10000;\n    modalFormOpen = true;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            success: false,\n            data: [],\n            issues: [],\n        };\n        this.getList();\n    }\n\n    getList = () => {\n        IspCpHelper.debug(\"get list action\");\n        let apiPath = \"/issues/\";\n        let location = this.props.location.pathname;\n        if (location.startsWith(\"/issues/\") && location.length > \"/issues/\".length) {\n            apiPath = location;\n        }\n        IspCpHelper.callApi(apiPath).then(this.passState);\n    }\n\n    passState = (response) => {\n        IspCpHelper.debug(\"passing state to component\");\n        IspCpHelper.debug(response);\n\n        var index = JSON.parse(response.data.index);\n\n        index.map((index_entry, index_key) => {\n            try {\n                let issue = Object.assign(new Issue(),index_entry);\n                let comment = JSON.parse(HTMLEntity.AllHtmlEntities.decode(index_entry.comment));\n\n                if (typeof comment === \"object\") {\n                    issue = Object.assign(issue, comment);\n                } else {\n                    issue.comment = comment;\n                }\n\n                issue.report_ts = issue.report_date || issue.report_ts;\n                issue.resolve_ts = issue.resolve_date || issue.report_ts;\n                issue.exec_ts = issue.execution_date || issue.exec_ts;\n                issue.report_status = Object.assign(new IssueStatus(),issue.report_status);\n                issue.history = issue.history || [];\n\n                Object.assign(index[index_key],issue);\n\n            } catch (e) {\n                IspCpHelper.debug(e);\n            }\n        });\n\n        this.setState(\n            {\n                success: response.data.success,\n                data: index,\n                issues: index\n            });\n\n    };\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        IspCpHelper.debug(event.currentTarget);\n\n        if (event.currentTarget.dataset.update) {\n            IspCpHelper.debug(event.currentTarget.dataset.update);\n\n            const issue = this.state.issues.find(index_entry=>{\n                return index_entry.id == event.currentTarget.dataset.update\n            });\n\n            let history = issue.history || [];\n            let report = {\n                address: issue.address,\n                engineer: issue.engineer,\n                comment: issue.comment,\n                report_status: issue.report_status,\n                execution_date: (typeof issue.execution_date === \"string\")?new Date(issue.execution_date).getTime()/1000:issue.execution_date\n            };\n            Object.assign(report,{history:history.concat(JSON.stringify(report))});\n            IspCpHelper.debug(report);\n            this.updateIssue(event.currentTarget.dataset.update, report);\n        }\n        if (event.currentTarget.dataset.resolve) {\n            IspCpHelper.debug(\"Resolve \" + event.currentTarget.dataset.resolve);\n            this.resolveIssue(event.currentTarget.dataset.resolve);\n        }\n    }\n\n    resolveIssue = (id) => {\n        IspCpHelper.callApi(\"/issues/resolve/\" + id).then(this.getList);\n    }\n\n    updateIssue(id, report) {\n        const data = {\n            comment: JSON.stringify(report)\n        }\n        IspCpHelper.callApi(\"/issues/update/\" + id,data ).then(this.getList);\n    }\n\n    onStatusSelect = (event) => {\n        IspCpHelper.debug(event.target.value);\n        IspCpHelper.debug(event.target.dataset);\n        const issue = this.state.issues.find(index_entry=>{\n            return index_entry.id === event.target.dataset.issue_id\n        });\n        let report_status = new IssueStatus();\n        let report = new IssueUpdateReport();\n        let history = issue.history || [];\n        report.address = issue.address;\n        report.engineer = issue.engineer;\n        report.comment = issue.comment;\n        report.execution_date = (typeof issue.execution_date === \"string\")?new Date(issue.execution_date).getTime()/1000:issue.execution_date;\n        report_status.id = event.target.value;\n        report_status.title= event.target.selectedOptions.item(0).text;\n        IspCpHelper.debug(report_status);\n        report.report_status = report_status;\n        IspCpHelper.debug(report);\n        Object.assign(report,{history:history.concat(JSON.stringify(report))});\n        this.updateIssue(issue.id,report);\n    }\n\n    onCommentTextChange = (event) => {\n        IspCpHelper.debug(event.target.value);\n        IspCpHelper.debug(event.target.dataset.issue_id);\n        const issue = this.state.issues.find(index_entry=>{\n            return index_entry.id === event.target.dataset.issue_id\n        });\n        issue.comment = event.target.value;\n    }\n\n    onChangeExecutionDate = (event) => {\n        IspCpHelper.debug(event.target.value)\n        IspCpHelper.debug(new Date(event.target.value).getTime()/1000)\n        IspCpHelper.debug(event.target.dataset.issue_id);\n        const issue = this.state.issues.find(index_entry=>{\n            return index_entry.id === event.target.dataset.issue_id\n        });\n        issue.execution_date= new Date(event.target.value).getTime()/1000;\n    }\n\n\n    render() {\n        IspCpHelper.debug(\"component render\");\n        if (this.state.success) {\n            const index = this.state.issues;\n            IspCpHelper.debug(index);\n            return (\n                <Paper>\n                    <Table>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>Issue</TableCell>\n                                <TableCell>Reported </TableCell>\n                                <TableCell>Resolved</TableCell>\n                                <TableCell>Status</TableCell>\n                                <TableCell>Address</TableCell>\n                                <TableCell>Engineer</TableCell>\n                                <TableCell>Execution date</TableCell>\n                                <TableCell>Comment</TableCell>\n                                <TableCell>Action</TableCell>\n                                <TableCell>\n                                    <IssueForm afterReport={this.getList}/>\n                                </TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>{index.map((index_entry, index_key) => {\n                            const execution_date = () => {\n                                if (index_entry.execution_date == undefined || index_entry.execution_date == \"\") {\n                                    return undefined;\n                                } else {\n                                    let date = new Date(index_entry.execution_date * 1000);\n                                    return dateformat(date,\"yyyy-mm-dd\");\n                                }\n                            }\n                            IspCpHelper.debug(execution_date());\n                            return (\n                                <TableRow key={\"index-issues-key-\" + index_key}>\n                                    <TableCell>{index_entry.id}</TableCell>\n                                    <TableCell>{new Date(parseInt(index_entry.report_ts) * 1000).toLocaleDateString()}</TableCell>\n                                    <TableCell>\n                                        {\n                                            (index_entry.resolve_date > 0)\n                                                ? new Date(parseInt(index_entry.resolve_ts) * 1000).toLocaleDateString()\n                                                : ''\n                                        }\n                                    </TableCell>\n                                    <TableCell>\n                                        <IssueStatusSelect issue={index[index_key]} issuse_index_key={index_key}\n                                                           defaultValue={index_entry.report_status.id}\n                                                           onChange={this.onStatusSelect}/>\n                                    </TableCell>\n                                    <TableCell>\n                                        {index_entry.address.city.title} /\n                                        {index_entry.address.street.title} /\n                                        {index_entry.address.home.title} /\n                                        {index_entry.address.flat.title}\n                                    </TableCell>\n                                    <TableCell>\n                                        {index_entry.engineer.title}\n                                    </TableCell>\n                                    <TableCell>\n                                    <TextField\n                                        id=\"date\"\n                                        label=\"Дата выполнения\"\n                                        type=\"date\"\n                                        name={\"execution_date\"}\n                                        defaultValue={execution_date()}\n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                        onChange={this.onChangeExecutionDate}\n                                        inputProps={{\"data-issue_id\":index_entry.id}}\n                                    />\n                                    </TableCell>\n                                    <TableCell>\n                                        <TextField\n                                            label=\"Комментарий\"\n                                            id={\"comment-\" + index_entry.id}\n                                            defaultValue={index_entry.comment}\n                                            margin=\"normal\"\n                                            variant=\"outlined\"\n                                            onChange={this.onCommentTextChange}\n                                            inputProps={{\"data-issue_id\":index_entry.id}}\n                                        /></TableCell>\n                                    <TableCell>\n                                        <ButtonGroup size=\"small\">\n                                            <Button type=\"button\" onClick={this.handleSubmit} data-update={index_entry.id}\n                                                    color=\"primary\">\n                                                UPDATE\n                                            </Button>\n                                            <Button type=\"button\" onClick={this.handleSubmit} data-resolve={index_entry.id}\n                                                    color=\"secondary\">\n                                                RESOLVE\n                                            </Button>\n                                        </ButtonGroup>\n                                    </TableCell>\n                                    <TableCell>\n                                        <IssueHistory issue_id={index_entry.id} history={index_entry.history}/>\n                                    </TableCell>\n                                </TableRow>\n                            );\n                        })\n                        }\n                        </TableBody>\n                    </Table>\n                </Paper>\n            );\n        }\n        return ('');\n    }\n}\n\n\n\n","import React from 'react';\nimport {makeStyles} from \"@material-ui/core\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Button from \"@material-ui/core/Button\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\nimport FolderIcon from '@material-ui/icons/Folder';\nimport Collapse from \"@material-ui/core/Collapse\";\nimport LabelIcon from '@material-ui/icons/Label';\n\nexport default function TermsListItem(props) {\n    console.log(\"I'm TermsListItem : \");\n    console.log(props);\n    const item = (props.term.children.length === 0) ?\n        <EmptyTerm key={\"term-\" + props.term.id} title={props.term.title} handleDeleteTerm={props.handleDeleteTerm} id={props.term.id}/> :\n        <HierTerm key={\"term-\" + props.term.id} term={props.term} handleDeleteTerm={props.handleDeleteTerm} id={props.term.id}/>;\n    return (item);\n}\n\n/**\n *\n * @param props\n * @constructor\n */\nfunction EmptyTerm(props) {\n    const itemClass = props.className || \"\";\n    return (\n        <ListItem key={\"term-\" + props.id} button className={itemClass}>\n            <ListItemAvatar>\n                <ListItemIcon>\n                    <LabelIcon/>\n                </ListItemIcon>\n            </ListItemAvatar>\n            <ListItemText primary={props.title}/>\n            <ListItemSecondaryAction>\n                <Button type=\"button\" onClick={props.handleDeleteTerm} data-delete={props.id} color=\"primary\"\n                        variant={\"outlined\"}>\n                    DELETE\n                </Button>\n            </ListItemSecondaryAction>\n        </ListItem>\n    );\n}\n\n/**\n *\n * @param props\n * @constructor\n */\nfunction ParentTerm(props) {\n    const itemClass = props.className || \"\";\n    return (\n        <ListItem key={\"term-\" + props.id} button className={itemClass} onClick={props.onClick}>\n            <ListItemAvatar>\n                <ListItemIcon>\n                    <FolderIcon/>\n                </ListItemIcon>\n            </ListItemAvatar>\n            <ListItemText primary={props.title}/>\n            <ListItemSecondaryAction>\n                <Button type=\"button\" onClick={props.handleDeleteTerm} data-delete={props.id} color=\"primary\"\n                        variant={\"outlined\"}>\n                    DELETE\n                </Button>\n            </ListItemSecondaryAction>\n        </ListItem>\n    );\n}\n\nconst hierStyles = makeStyles(theme => ({\n    root  : {\n        width          : '100%',\n        maxWidth       : 360,\n        backgroundColor: theme.palette.background.paper,\n    },\n    nested: {\n        paddingLeft: theme.spacing(4),\n    },\n}));\n\nfunction HierTerm(props) {\n    const classes = hierStyles();\n    const [open, setOpen] = React.useState(false);\n\n    const handleClick = () => {\n        setOpen(!open);\n    };\n\n    return ([\n        <ParentTerm key={\"term-\" + props.term.id + \"-root\"} title={props.term.title} handleDeleteTerm={props.handleDeleteTerm} onClick={handleClick} id={props.term.id}/>,\n        <Collapse key={\"term-\" + props.term.id + \"-collapse\"} in={open} timeout=\"auto\" unmountOnExit>\n            <List key={\"term-\" + props.term.id + \"-neseted\"} component=\"div\" disablePadding className={classes.nested}>\n                {\n                    props.term.children.map(child => {\n                        return (\n                            <TermsListItem key={\"term-\" + child.id} term={child}\n                                           handleDeleteTerm={props.handleDeleteTerm} id={child.id}/>\n                        );\n                    })\n                }\n            </List>\n        </Collapse>\n    ]);\n}","import React from 'react';\nimport axios from 'axios';\nimport IspCpConfig from \"../IspCpConfig\";\nimport {slugify} from 'transliteration';\nimport {\n    Box,\n    Button,\n    FormControl,\n    Grid,\n    Input,\n    InputLabel,\n    List,\n    makeStyles,\n    NativeSelect,\n    TextField\n} from \"@material-ui/core\";\n\nimport Term from \"../models/Term\";\nimport TermsListItem from \"./TermsListItem\";\n\nvar he = require('he');\n\nexport default class Terms extends React.Component {\n\n    updateTimeout;\n\n    constructor(props) {\n        super(props);\n        console.log(\"I'm constructor\");\n        this.state = {\n            success: false,\n            terms: [],\n            create: new Term({})\n        };\n        console.log(\"My state is \" + JSON.stringify(this.state));\n        this.updateTimeout = 10000;\n        this.onSubmit = this.onSubmit.bind(this);\n        this.componentDidMount = this.componentDidMount.bind(this);\n        this.onParentSelect = this.onParentSelect.bind(this);\n        this.setInitialState = this.setInitialState.bind(this);\n        this.setInitialState();\n        this.styles = makeStyles(theme => ({\n            root: {\n                width: '100%',\n                maxWidth: 360,\n                backgroundColor: theme.palette.background.paper,\n            },\n            nested: {\n                paddingLeft: theme.spacing(4),\n            },\n        }));\n    }\n\n    createTerm(eventTarget) {\n        let url = IspCpConfig.ApiRequest(\"/terms/create/\");\n        axios.get(url, {\n            params: {\n                email: axios.defaults.params.email,\n                password: axios.defaults.params.password,\n                slug: eventTarget.slug.value,\n                title: eventTarget.title.value,\n                parent: eventTarget.parent.value\n            }\n        }).then(\n            result => {\n                this.setState({\n                    create: new Term({})\n                });\n                this.componentDidMount();\n            })\n    }\n\n    deleteTerm(id) {\n        let url = IspCpConfig.ApiRequest(\"/terms/delete/\");\n        axios.get(url, {\n            params: {\n                email: axios.defaults.params.email,\n                password: axios.defaults.params.password,\n                id: id\n            }\n        }).then(\n            result => {\n                this.componentDidMount();\n            })\n    }\n\n    onSubmit(event) {\n        console.log(event.currentTarget.dataset.delete);\n        event.preventDefault();\n        if (event.target.create) {\n            this.createTerm(event.target);\n        }\n        if (event.currentTarget.dataset.delete) {\n            this.deleteTerm(event.currentTarget.dataset.delete);\n        }\n    }\n\n    onParentSelect(event) {\n\n        console.log(event.target.value);\n        let slice = this.state.create;\n        slice.parentId = event.target.value;\n        slice.slug = slugify(event.target.selectedOptions.item(0).textContent);\n        const create = slice;\n        this.setState({\n            create: create\n        });\n    }\n\n\n    componentDidMount() {\n\n        console.log(\"I'm diMount\");\n        let apiPath = IspCpConfig.ApiRequest(\"/terms/\");\n        let location = this.props.location.pathname;\n        if (location.startsWith(\"/terms/\") && location.length > \"/terms/\".length) {\n            apiPath = IspCpConfig.ApiRequest(location);\n        }\n\n        axios.get(apiPath, {\n            params: {\n                email: axios.defaults.params.email,\n                password: axios.defaults.params.password\n            }\n        })\n            .then(\n                result => {\n                    console.log(\"Did mount api result : \" + JSON.stringify(result));\n                    this.setState({\n                        success: result.data.success,\n                        terms: result.data.terms,\n                        create: {children: [new Term({})].concat(result.data.terms)}\n                    });\n                }\n            )\n            .catch(reason => {\n                console.log(reason)\n            })\n    }\n\n    setInitialState() {\n    }\n\n    componentDidUpdate(prevProps) {\n        console.log(prevProps.location);\n        console.log(this.props.location);\n        if (this.props.location !== prevProps.location) {\n            this.componentDidMount();\n        }\n    }\n\n    render() {\n        console.log(\"I'm render\");\n        console.log(this.state);\n        // setTimeout(this.componentDidMount, this.updateTimeout);\n\n        const list = (state) => {\n            console.log(\"Im arow list func\");\n            console.log(state);\n            if (state.success === false) {\n                return ('');\n            } else {\n                return (\n                    <List component={\"div\"}>\n                        {state.terms.map(term => {\n                            return (\n                                <TermsListItem key={term.id} term={term}\n                                               handleDeleteTerm={this.onSubmit}></TermsListItem>\n                            )\n                        })}\n                    </List>\n                )\n            }\n        };\n\n        return (\n            <Box component={\"div\"}>\n                {list(this.state)}\n                <TermsForm\n                    term={this.state.create}\n                    onSubmit={this.onSubmit}\n                    onChange={this.onParentSelect}\n                />\n            </Box>\n        );\n    }\n}\n\nconst termsFormStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n    },\n    paper: {\n        height: 140,\n        width: 100,\n    },\n    control: {\n        padding: theme.spacing(2),\n    },\n}));\n\nfunction TermsForm(props) {\n    const classes = termsFormStyles();\n    console.log(\"Form props : \" + JSON.stringify(props));\n\n    return (\n        <Box component={\"form\"} onSubmit={props.onSubmit} variant={\"outlined\"}>\n\n            <Grid container justify=\"flex-start\" spacing={4}>\n                <Grid key={0} item>\n                    <TextField\n                        label={\"Название\"}\n                        name={\"title\"}\n                        defaultValue={''}\n                        variant={\"standard\"}\n                    >\n                    </TextField>\n                </Grid>\n                <Grid key={1} item>\n                    <FormControl>\n                        <InputLabel shrink htmlFor=\"parent-id-select\">\n                            Родитель\n                        </InputLabel>\n                        <NativeSelect\n                            onChange={props.onChange}\n                            inputProps={{\n                                name: 'parent',\n                                id: 'parent-id-select',\n                            }}\n                            value={props.term.parentId}\n                        >\n                            <TermsOptionsList key={\"terms-options-list\" + props.term.id} term={props.term}/>\n                        </NativeSelect>\n                    </FormControl>\n                </Grid>\n                <Grid key={2} item>\n                    <Button data-create={0} type={\"submit\"} variant={\"outlined\"} color={\"primary\"}\n                            size={\"large\"}>SUBMIT</Button>\n                </Grid>\n            </Grid>\n\n            <Input type={\"hidden\"} name={\"create\"} value={0}/>\n            <Input type={\"hidden\"} name={\"slug\"} value={props.term.slug}/>\n\n\n        </Box>\n    );\n}\n\nfunction TermsOptionsList(props) {\n    console.log(props.term);\n    if (props.term.children.length === 0) {\n        return (\n            <option key={\"terms-option\" + props.term.id} value={props.term.id}\n                    data-slug={slugify(props.term.title)}>{props.term.title}</option>\n        );\n    } else {\n        console.log(\"ImOptionsList\");\n        console.log(props.term);\n        return ([\n            props.term.id && <option key={\"terms-option\" + props.term.id} value={props.term.id}>{props.term.title}</option>,\n\n            props.term.children.map(child =>\n                <TermsOptionsList key={\"terms-options-list\" + child.id} term={child}/>\n            )\n\n        ]);\n    }\n}\n\n\n\n","import React from \"react\";\nimport axios from \"axios\"\nimport IspCpConfig from \"../IspCpConfig\";\n\nexport default class Options extends React.Component {\n    state = {\n        success: false,\n        name: undefined,\n        value: undefined\n    }\n\n    constructor(props) {\n        super(props)\n    }\n\n    componentDidMount() {\n        axios.get(IspCpConfig.ApiRequest(\"/options/get/roles\"))\n            .then(\n                (result) => {\n                    console.log(this.state);\n                    this.setState(result.data);\n                    console.log(this.state);\n                }\n            )\n            .catch(\n                (error) => {\n                    console.log(error);\n                }\n            )\n    }\n\n    render() {\n        if (this.state.success) {\n            const {role} = JSON.parse(this.state.value.value);\n            return (\n                <div>\n                    <p>{role.id}.{role.name}[{role.access.toString()}]</p>\n                </div>\n            );\n        }\n        return '';\n    }\n\n}\n\n\n//{value.map(prop=>{<p>{prop}</p>})}\n","import React from \"react\";\nimport {BrowserRouter as Router, Link, Route} from \"react-router-dom\";\nimport Button from \"@material-ui/core/Button\";\nimport Issues from \"./Issues\";\nimport Terms from \"./Terms\";\nimport Options from \"./Options\";\nimport {AppBar, makeStyles} from \"@material-ui/core\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport MenuIcon from '@material-ui/icons/Menu';\nimport IspPanel from \"./IspPanel\";\nimport Divider from '@material-ui/core/Divider';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n    },\n    menuButton: {\n        marginRight: theme.spacing(1),\n        color: \"white\"\n    },\n    title: {\n        flexGrow: 1,\n    },\n}));\n\nexport default function DefaultPanel(props) {\n    const classes = useStyles();\n    const username = props.username || '';\n    const [anchorEl, setAnchorEl] = React.useState(null);\n\n    const handleClick = (event) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n    return ([\n        <Router>\n            <AppBar position=\"static\">\n                <Toolbar>\n\n                    <Button component={Link} to=\"/\" color={\"primary\"}\n                            variant={\"text\"} className={classes.menuButton}>Home</Button>\n                    <Button component={Link} to=\"/issues/\" color={\"primary\"}\n                            variant={\"text\"} className={classes.menuButton}>Issues</Button>\n                    <Button component={Link} to=\"/terms/\" color={\"primary\"}\n                            variant={\"text\"} className={classes.menuButton}>Terms</Button>\n                    <Button component={Link} to=\"/logout/\" color={\"primary\"}\n                            variant={\"text\"} className={classes.menuButton}>Log out</Button>\n\n                    <Typography variant=\"h6\" className={classes.title} align={\"right\"}>\n                        {username}@ISP.CP\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n            <Route path=\"/issues\" component={Issues}/>\n            <Route path=\"/terms\" component={Terms}/>\n            <Route path=\"/options\" component={Options}/>\n            <Route path=\"/logout\" component={IspPanel}/>\n        </Router>\n    ]);\n}","import React from \"react\";\nimport axios from \"axios\";\nimport IspCpConfig from \"../IspCpConfig\";\nimport User from \"../models/User\";\nimport LoginForm from \"./LoginForm\";\nimport DefaultPanel from \"./DefaultPanel\";\nimport {AppBar} from \"@material-ui/core\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Typography from \"@material-ui/core/Typography\";\nimport MenuIcon from '@material-ui/icons/Menu';\nimport {makeStyles} from \"@material-ui/core\";\n\nimport MenuList from \"@material-ui/core/MenuList\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Menu from \"@material-ui/core/Menu\";\n\nexport default class IspPanel extends React.Component {\n\n    constructor(props) {\n        super(props);\n        const user = new User();\n        this.state = {\n            user: user\n        }\n        this.handleSubmitLoginForm = this.handleSubmitLoginForm.bind(this);\n    }\n\n    handleSubmitLoginForm(event) {\n        event.preventDefault();\n        const form = event.currentTarget;\n        const user = User;\n        user.email = form.email.value;\n        user.pass = form.pass.value;\n\n\n        axios.get(IspCpConfig.ApiRequest(\"/users/login\"), {\n            params: {email: user.email, password: user.pass}\n        }).then(response => {\n            user.id = response.data.item.id || undefined;\n            this.setState({\n                user: user\n            });\n        }).catch((exception) => {\n            console.log(exception);\n        });\n    }\n\n    render() {\n        if (window.location.pathname === '/logout/') {\n            sessionStorage.clear();\n            window.location.href = window.location.origin;\n        }\n        const email = sessionStorage.getItem(\"email\") || this.state.user.email;\n        const pass = sessionStorage.getItem(\"password\") || this.state.user.pass;\n        const id = this.state.user.id || sessionStorage.getItem(\"id\");\n        if (parseInt(id) > 0) {\n            axios.defaults.params = {\n                email: email,\n                password: pass\n            };\n            sessionStorage.setItem(\"id\",id);\n            sessionStorage.setItem(\"email\",email);\n            sessionStorage.setItem(\"password\",pass);\n            const username = email.split(\"@\")[0].toUpperCase();\n\n            return ([<DefaultPanel username={username}/>]);\n        }\n        return ([<IspPanelAppBar/>, <LoginForm onSubmit={this.handleSubmitLoginForm} email={email} pass={pass}/>]);\n    }\n\n}\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        flexGrow: 1,\n    },\n}));\n\n\nfunction IspPanelAppBar(props) {\n    const classes = useStyles();\n    const username = props.username || '';\n\n    return (\n        <AppBar position=\"static\">\n            <Toolbar>\n                <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n                    <MenuIcon/>\n                </IconButton>\n                <Typography variant=\"h6\" className={classes.title}>\n                    {username}@ISP.CP\n                </Typography>\n            </Toolbar>\n        </AppBar>\n    );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport IspPanel from \"./componets/IspPanel\";\nimport * as serviceWorker from './serviceWorker';\nimport { createMuiTheme } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n    overrides: {\n        // Style sheet name ⚛️\n        MuiButton: {\n            // Name of the rule\n            root: {\n                // Some CSS\n                cursor: \"pointer\"\n            },\n        },\n    },\n});\n\nReactDOM.render(<IspPanel theme={theme}></IspPanel>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}