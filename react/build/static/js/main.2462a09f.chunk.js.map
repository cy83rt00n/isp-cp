{"version":3,"sources":["IspCpConfig.js","models/User.js","componets/LoginForm.js","componets/Issues.js","models/Term.js","componets/TermsListItem.js","componets/Terms.js","componets/Options.js","componets/DefaultPanel.js","componets/IspPanel.js","serviceWorker.js","index.js"],"names":["props","ApiProtocol","ApiHost","ApiPort","ApiUrlPrefix","LoggedIn","axios","get","this","ApiRequest","then","response","setLoggedIn","data","value","path","indexOf","User","LoginForm","Container","maxWidth","onSubmit","Box","TextField","type","name","placeholder","defaultValue","email","pass","Button","issusesInstance","he","require","Issues","updateTimeout","modalFormOpen","state","success","handleSubmit","bind","componentDidMount","event","preventDefault","console","log","currentTarget","window","Target","dataset","update","comment","document","querySelector","updateIssue","resolve","resolveIssue","id","url","IspCpConfig","result","apiPath","location","pathname","startsWith","length","params","defaults","setState","index","JSON","parse","Paper","Table","TableHead","TableRow","TableCell","IssueForm","TableBody","map","issue","key","Date","parseInt","report_date","toLocaleDateString","resolve_date","label","decode","margin","variant","ButtonGroup","size","onClick","data-update","color","data-resolve","React","Component","formStyles","makeStyles","theme","modal","display","alignItems","justifyContent","paper","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","classes","useState","open","setOpen","handleClose","Modal","aria-labelledby","aria-describedby","closeAfterTransition","onClose","className","target","comment_new","callUpdate","AddressList","addrSelected","selectedId","address","houses","flats","term","children","selectedAddress","selectedHouse","selectedFlat","forceUpdate","catch","reason","houseSelected","flatSelected","NativeSelect","onChange","child","data-slug","slugify","title","Term","slug","parentId","TermsListItem","EmptyTerm","handleDeleteTerm","HierTerm","itemClass","ListItem","button","ListItemIcon","ListItemText","primary","data-delete","hierStyles","root","width","nested","paddingLeft","Collapse","in","timeout","unmountOnExit","List","component","disablePadding","Terms","terms","create","stringify","onParentSelect","setInitialState","eventTarget","password","parent","delete","createTerm","deleteTerm","selectedOptions","item","prevProps","TermsForm","termsFormStyles","flexGrow","height","control","Grid","container","justify","FormControl","InputLabel","shrink","htmlFor","inputProps","data-create","Input","Options","undefined","error","role","access","toString","DefaultPanel","Link","to","IspPanel","user","handleSubmitLoginForm","form","Boolean","hostname","match","createMuiTheme","overrides","MuiButton","cursor","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2462a09f.chunk.js","sourcesContent":["\nimport axios from \"axios\";\n\nclass IspCpConfig {\n    ApiProtocol = \"http\";\n    ApiHost = \"loc.onedext.ru\";\n    ApiPort = 8080;\n    ApiUrlPrefix = \"/api\";\n    LoggedIn = false;\n\n    constructor(props) {\n        axios.get(this.ApiRequest(\"/users/login\")).then(\n            (response) => {\n                this.setLoggedIn(response.data);\n            });\n    }\n\n    setLoggedIn(value)\n    {\n        this.LoggedIn = value;\n    }\n\n    ApiRequest(path) {\n        return this.ApiProtocol + \"://\" +\n            this.ApiHost +\n            (this.ApiPort ? \":\" + this.ApiPort : '') +\n            this.ApiUrlPrefix +\n            path;\n    }\n\n    ApiRootRequest(path) {\n        if (path.indexOf(\"?\") === -1) {\n            return this.ApiRequest(path + \"?role=99999999999&passwd=secret\")\n        } else {\n            return this.ApiRequest(path + \"&role=99999999999&passwd=secret\")\n        }\n    }\n}\n\nexport default new IspCpConfig();","export default class User {\n    id;\n    email;\n    pass;\n    role;\n}","import Container from \"@material-ui/core/Container\";\nimport {Box, makeStyles} from \"@material-ui/core\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport React from \"react\";\n\nexport default function LoginForm(props) {\n    return (\n        <Container maxWidth={\"md\"}>\n            <form onSubmit={props.onSubmit}>\n                <Box>\n                    <TextField type={\"email\"} name={\"email\"} placeholder={\"Login\"} defaultValue={props.email}/>\n                </Box>\n                <Box>\n                    <TextField type={\"password\"} name={\"pass\"} placeholder={\"Password\"} defaultValue={props.pass}>\n                        Password\n                    </TextField>\n                </Box>\n                <Button type={\"submit\"}>SGIN IN</Button>\n            </form>\n        </Container>\n    )\n}","import React from 'react';\nimport axios from 'axios';\nimport IspCpConfig from \"../IspCpConfig\";\nimport Button from \"@material-ui/core/Button\";\nimport Paper from \"@material-ui/core/Paper\";\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\nimport TextField from '@material-ui/core/TextField';\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport NativeSelect from '@material-ui/core/NativeSelect';\nimport {slugify} from 'transliteration';\nimport Modal from '@material-ui/core/Modal';\nimport { makeStyles } from '@material-ui/core/styles';\n\n\nvar he = require('he');\n\nvar issusesInstance;\n\nexport default class Issues extends React.Component {\n    updateTimeout = 10000;\n    modalFormOpen = true;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            success: false,\n            data   : []\n        };\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.componentDidMount = this.componentDidMount.bind(this);\n        issusesInstance = this;\n    }\n\n    callUpdate()\n    {\n        this.componentDidMount();\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        console.log(event.currentTarget);\n        window.Target = event.currentTarget;\n        // if (event.currentTarget.dataset.report) {\n        //     var issueForm = document.querySelector(\"form#issue-report\");\n        //     console.log(\"Report : \" + issueForm.comment.value);\n        //     this.reportIssue(issueForm.comment.value);\n        // }\n        if (event.currentTarget.dataset.update) {\n            // var issueForm = document.querySelector(\"form#issue-edit-\" + event.currentTarget.dataset.update);\n            console.log(\"Udate \" + event.currentTarget.dataset.update);\n            // window.issueForm = issueForm;\n            const comment = document.querySelector(\"#comment-\" + event.currentTarget.dataset.update).value;\n            this.updateIssue(event.currentTarget.dataset.update, comment);\n        }\n        if (event.currentTarget.dataset.resolve) {\n            // var issueForm = document.querySelector(\"form#issue-edit-\" + event.currentTarget.dataset.resolve);\n            console.log(\"Resolve \" + event.currentTarget.dataset.resolve);\n            this.resolveIssue(event.currentTarget.dataset.resolve);\n        }\n    }\n\n    resolveIssue(id) {\n        let url = IspCpConfig.ApiRequest(\"/issues/resolve/\" + id);\n        axios.get(url,).then(\n            result => {\n                this.componentDidMount()\n            }\n        );\n    }\n\n    updateIssue(id, comment) {\n        let url = IspCpConfig.ApiRequest(\"/issues/update/\" + id + \"?comment=\" + comment);\n        axios.get(url).then(\n            result => {\n                this.componentDidMount()\n            }\n        );\n    }\n\n\n    componentDidMount() {\n        let apiPath = IspCpConfig.ApiRequest(\"/issues/\");\n        let location = this.props.location.pathname;\n        if (location.startsWith(\"/issues/\") && location.length > \"/issues/\".length) {\n            apiPath = IspCpConfig.ApiRequest(location);\n        }\n\n        axios.get(apiPath, {\n            params: axios.defaults.params\n        })\n             .then(\n                 result => {\n                     this.setState({\n                         success: result.data.success,\n                         data   : result.data.index\n                     });\n                     // console.log(result);\n                 }\n             )\n    }\n\n\n    render() {\n        if (this.state.success) {\n            const data = JSON.parse(this.state.data);\n            // setTimeout(this.componentDidMount, this.updateTimeout);\n            return (\n                <Paper>\n                    <Table>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>Issue</TableCell>\n                                <TableCell>Reported </TableCell>\n                                <TableCell>Resolved</TableCell>\n                                <TableCell>Address</TableCell>\n                                <TableCell>Comment</TableCell>\n                                <TableCell>\n                                    <IssueForm/>\n                                </TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>{data.map(issue =>\n                            <TableRow key={\"issue-\" + issue.id}>\n                                <TableCell>{issue.id}</TableCell>\n                                <TableCell>{new Date(parseInt(issue.report_date) * 1000).toLocaleDateString()}</TableCell>\n                                <TableCell>\n                                    {\n                                        (issue.resolve_date > 0)\n                                            ? new Date(parseInt(issue.resolve_date) * 1000).toLocaleDateString()\n                                            : ''\n                                    }\n                                </TableCell>\n                                <TableCell>\n                                    <AddressList location={\"/terms/15\"} id={\"address-\" + issue.id} value={0}/>\n                                </TableCell>\n                                <TableCell>\n                                    <TextField\n                                        label=\"Комментарий\"\n                                        id={\"comment-\" + issue.id}\n                                        defaultValue={issue.comment ? he.decode(issue.comment) : ''}\n                                        margin=\"normal\"\n                                        variant=\"outlined\"\n                                    /></TableCell>\n                                <TableCell>\n                                    <ButtonGroup size=\"small\">\n                                        <Button type=\"button\" onClick={this.handleSubmit} data-update={issue.id}\n                                                color=\"primary\">\n                                            UPDATE\n                                        </Button>\n                                        <Button type=\"button\" onClick={this.handleSubmit} data-resolve={issue.id}\n                                                color=\"secondary\">\n                                            RESOLVE\n                                        </Button>\n                                    </ButtonGroup>\n                                </TableCell>\n                            </TableRow>\n                        )}\n                        </TableBody>\n                    </Table>\n                </Paper>\n            );\n        }\n        return ('');\n    }\n}\n\nconst formStyles = makeStyles(theme => ({\n    modal: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    paper: {\n        backgroundColor: theme.palette.background.paper,\n        border: '2px solid #000',\n        boxShadow: theme.shadows[5],\n        padding: theme.spacing(2, 4, 3),\n    },\n}));\n\nfunction IssueForm() {\n\n    const classes = formStyles();\n    const [open, setOpen] = React.useState(false);\n\n    const handleClose = () => {\n        setOpen(false);\n    }\n\n    const handleOpen = () => {\n        setOpen(true);\n    }\n\n    const reportIssue = (event) => {\n        event.preventDefault();\n        console.log(event.target.comment_new.value);\n        let url = IspCpConfig.ApiRequest(\"/issues/report/?comment=\" + event.target.comment_new.value);\n        axios.get(url).then(\n            result => {\n                handleClose();\n                issusesInstance.callUpdate();\n            }\n        );\n    }\n\n    return (\n        <div>\n            <Button onClick={handleOpen} color=\"secondary\" variant={\"outlined\"}>REPORT</Button>\n            <Modal\n                aria-labelledby=\"transition-modal-title\"\n                aria-describedby=\"transition-modal-description\"\n                open={open}\n                closeAfterTransition\n                onClose={handleClose}\n                className={classes.modal}\n            >\n\n                <form className={classes.paper} onSubmit={reportIssue}>\n                    <h2 id=\"transition-modal-title\">REPORT ISSUE</h2>\n                    <div>\n                        <AddressList location={\"/terms/1\"} id={\"address-new\"} value={0}/>\n                    </div>\n                    <div>\n                        <TextField\n                            label=\"Комментарий\"\n                            id={\"transition-modal-description\"}\n                            defaultValue={\"\"}\n                            margin=\"normal\"\n                            variant=\"outlined\"\n                            name={\"comment_new\"}\n                        />\n                        <Button type=\"submit\" color=\"secondary\" variant={\"outlined\"}>REPORT</Button>\n                    </div>\n                </form>\n            </Modal>\n        </div>\n    );\n\n};\n\nclass AddressList extends React.Component {\n\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            address: {term:{id:0},children:[]},\n            houses: {term:{id:0},children:[]},\n            flats: {term:{id:0},children:[]},\n            selectedAddress:0,\n            selectedHouse:0,\n            selectedFlat:0\n        };\n        this.apiPath = IspCpConfig.ApiRequest(\"/terms/\");\n        this.location = props.location;\n        this.addrSelected = this.addrSelected.bind(this);\n    }\n\n    componentDidMount() {\n\n        if (this.location.startsWith(\"/terms/\") && this.location.length > \"/terms/\".length) {\n            this.apiPath = IspCpConfig.ApiRequest(this.location);\n        }\n\n        axios.get(this.apiPath)\n             .then(\n                 result => {\n                     this.setState({\n                         address: result.data,\n                         houses: {term:{id:0},children:[]},\n                         flats: {term:{id:0},children:[]},\n                         selectedAddress: result.data.term.id,\n                         selectedHouse:0,\n                         selectedFlat:0\n                     });\n                 }\n             )\n             .catch(reason => {\n                 console.log(\"Axios error: \" + reason)\n             })\n        ;\n    }\n\n    addrSelected = (event) => {\n        console.log(event.target.value);\n        var selectedId = event.target.value;\n        var apiPath = IspCpConfig.ApiRequest(\"/terms/\" + selectedId);\n        axios.get(apiPath)\n             .then(\n                 result => {\n                     this.setState({\n                         address: this.state.address,\n                         houses: result.data,\n                         flats: {term:{id:0},children:[]},\n                         selectedAddress: selectedId,\n                         selectedHouse:0,\n                         selectedFlat:0\n                     });\n                     this.forceUpdate();\n                 }\n             )\n             .catch(reason => {\n                 console.log(\"Axios error: \" + reason)\n             })\n        ;\n\n    }\n\n    houseSelected = (event) => {\n        console.log(event.target.value);\n        var selectedId = event.target.value;\n        var apiPath = IspCpConfig.ApiRequest(\"/terms/\" + selectedId);\n        axios.get(apiPath)\n             .then(\n                 result => {\n                     this.setState({\n                         address: this.state.address,\n                         houses: this.state.houses,\n                         flats: result.data,\n                         selectedAddress: this.state.selectedAddress,\n                         selectedHouse:selectedId,\n                         selectedFlat:0\n                     });\n                     this.forceUpdate();\n                 }\n             )\n             .catch(reason => {\n                 console.log(\"Axios error: \" + reason)\n             })\n        ;\n\n    }\n\n    flatSelected = (event) => {\n        console.log(event.target.value);\n        var selectedId = event.target.value;\n        this.setState({\n            address: this.state.address,\n            houses: this.state.houses,\n            flats: this.state.flats,\n            selectedAddress: this.state.selectedAddress,\n            selectedHouse:this.state.selectedHouse,\n            selectedFlat:selectedId\n        });\n        this.forceUpdate();\n\n    }\n\n    render() {\n        console.log(this.state);\n        return (\n            <div>\n            <NativeSelect\n                id={this.props.id}\n                value={this.state.selectedAddress}\n                onChange={this.addrSelected}\n            >\n                <option value={0}>Улица</option>\n                {this.state.address.children.map(child =>\n                    <option key={child.id} value={child.id} data-slug={slugify(child.title)}>{child.title}</option>\n                )}\n            </NativeSelect>\n                <NativeSelect\n                    id={this.props.id + \"-houses\"}\n                    value={this.state.selectedHouse}\n                    onChange={this.houseSelected}\n                >\n                    <option value={0}>Дом</option>\n                    {this.state.houses.children.map(child =>\n                        <option key={child.id} value={child.id} data-slug={slugify(child.title)}>{child.title}</option>\n                    )}\n                </NativeSelect>\n                <NativeSelect\n                    id={this.props.id + \"flats\"}\n                    value={this.state.selectedFlat}\n                    onChange={this.flatSelected}\n                >\n                    <option value={0}>Квартира</option>\n                    {this.state.flats.children.map(child =>\n                        <option key={child.id} value={child.id} data-slug={slugify(child.title)}>{child.title}</option>\n                    )}\n                </NativeSelect>\n            </div>\n        );\n    }\n}\n\nclass HousesList extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            term    : {},\n            children: []\n        };\n        this.apiPath = IspCpConfig.ApiRequest(\"/terms/\");\n        this.location = props.location;\n    }\n\n    componentDidMount() {\n\n        if (this.location.startsWith(\"/terms/\") && this.location.length > \"/terms/\".length) {\n            this.apiPath = IspCpConfig.ApiRequest(this.location);\n        }\n\n        axios.get(this.apiPath)\n             .then(\n                 result => {\n                     console.log(result);\n                     this.setState({\n                         term    : result.data.term,\n                         children: result.data.children\n                     });\n                 }\n             )\n             .catch(reason => {\n                 console.log(\"Axios error: \" + reason)\n             })\n        ;\n    }\n\n    render() {\n        return (\n            <NativeSelect\n                id={this.props.id}\n                value={this.props.value}\n            >\n                {this.state.children.map(child =>\n                    <option key={child.id} value={child.id} data-slug={slugify(child.title)}>{child.title}</option>\n                )}\n            </NativeSelect>\n        );\n    }\n}\n\nclass ApartmentsList extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            term    : {},\n            children: []\n        };\n        this.apiPath = IspCpConfig.ApiRequest(\"/terms/\");\n        this.location = props.location;\n    }\n\n    componentDidMount() {\n\n        if (this.location.startsWith(\"/terms/\") && this.location.length > \"/terms/\".length) {\n            this.apiPath = IspCpConfig.ApiRequest(this.location);\n        }\n\n        axios.get(this.apiPath)\n             .then(\n                 result => {\n                     console.log(result);\n                     this.setState({\n                         term    : result.data.term,\n                         children: result.data.children\n                     });\n                 }\n             )\n             .catch(reason => {\n                 console.log(\"Axios error: \" + reason)\n             })\n        ;\n    }\n\n    render() {\n        return (\n            <NativeSelect\n                id={this.props.id}\n                value={this.props.value}\n            >\n                {this.state.children.map(child =>\n                    <option key={child.id} value={child.id} data-slug={slugify(child.title)}>{child.title}</option>\n                )}\n            </NativeSelect>\n        );\n    }\n}","export default class Term {\n\n    constructor(props) {\n        this.id = props.id || 0;\n        this.slug = props.slug || \"root\";\n        this.title = props.title || \"\";\n        this.parentId = props.parentId || 0;\n        this.children = props.children || [];\n    }\n}","import React from 'react';\nimport LabelIcon from '@material-ui/icons/Label';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport {makeStyles} from \"@material-ui/core\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport Button from \"@material-ui/core/Button\";\n\nexport default function TermsListItem(props) {\n    console.log(\"I'm TermsListItem : \");\n    console.log(props);\n    const item = (props.term.children.length === 0) ? <EmptyTerm  title={props.term.title} handleDeleteTerm={props.handleDeleteTerm} id={props.term.id}/> :\n        <HierTerm term={props.term}  handleDeleteTerm={props.handleDeleteTerm} id={props.term.id}/>;\n    return (item);\n}\n\n/**\n *\n * @param props\n * @constructor\n */\nfunction EmptyTerm(props) {\n    const itemClass = props.className || \"\";\n    return (\n        <ListItem key={\"term-\" + props.id} button className={itemClass}>\n            <ListItemIcon>\n                <LabelIcon/>\n            </ListItemIcon>\n            <ListItemText primary={props.title}/>\n            <Button type=\"button\" onClick={props.handleDeleteTerm} data-delete={props.id} color=\"primary\" variant={\"outlined\"}>\n                DELETE\n            </Button>\n        </ListItem>\n    );\n}\n\nconst hierStyles = makeStyles(theme => ({\n    root  : {\n        width          : '100%',\n        maxWidth       : 360,\n        backgroundColor: theme.palette.background.paper,\n    },\n    nested: {\n        paddingLeft: theme.spacing(4),\n    },\n}));\n\nfunction HierTerm(props) {\n    const classes = hierStyles();\n    const [open, setOpen] = React.useState(true);\n\n    const handleClick = () => {\n        setOpen(!open);\n    };\n\n    return ([\n        <EmptyTerm title={props.term.title} handleDeleteTerm={props.handleDeleteTerm} id={props.term.id}/>,\n        <ListItem key={\"term-\" + props.term.id}>\n            <Collapse in={open} timeout=\"auto\" unmountOnExit>\n                <List key={\"term-\" + props.term.id + \"-neseted\"} component=\"div\" disablePadding>\n                    {\n                        props.term.children.map(child => {\n                            return (\n\n                                <EmptyTerm key={\"term-\" + child.id} className={classes.nested} title={child.title} handleDeleteTerm={props.handleDeleteTerm} id={child.id}/>\n                            );\n                        })\n                    }\n                </List>\n            </Collapse>\n        </ListItem>\n    ]);\n}","import React from 'react';\nimport axios from 'axios';\nimport IspCpConfig from \"../IspCpConfig\";\nimport {slugify} from 'transliteration';\nimport {\n    Box,\n    Button,\n    FormControl,\n    Grid,\n    Input,\n    InputLabel,\n    List,\n    makeStyles,\n    NativeSelect,\n    TextField\n} from \"@material-ui/core\";\n\nimport Term from \"../models/Term\";\nimport TermsListItem from \"./TermsListItem\";\n\nvar he = require('he');\n\nexport default class Terms extends React.Component {\n\n    updateTimeout;\n\n    constructor(props) {\n        super(props);\n        console.log(\"I'm constructor\");\n        this.state = {\n            success: false,\n            terms  : [new Term({})],\n            create : new Term({})\n        };\n        console.log(\"My state is \" + JSON.stringify(this.state));\n        this.updateTimeout = 10000;\n        this.onSubmit = this.onSubmit.bind(this);\n        this.componentDidMount = this.componentDidMount.bind(this);\n        this.onParentSelect = this.onParentSelect.bind(this);\n        this.setInitialState = this.setInitialState.bind(this);\n        this.setInitialState();\n    }\n\n    createTerm(eventTarget) {\n        let url = IspCpConfig.ApiRequest(\"/terms/create/\");\n        axios.get(url, {\n            params: {\n                email   : axios.defaults.params.email,\n                password: axios.defaults.params.password,\n                slug    : eventTarget.slug.value,\n                title   : eventTarget.title.value,\n                parent  : eventTarget.parent.value\n            }\n        }).then(\n            result => {\n                this.setState({\n                    create: new Term({})\n                });\n                this.componentDidMount();\n            })\n    }\n\n    deleteTerm(id) {\n        let url = IspCpConfig.ApiRequest(\"/terms/delete/\");\n        axios.get(url, {\n            params: {\n                email   : axios.defaults.params.email,\n                password: axios.defaults.params.password,\n                id      : id\n            }\n        }).then(\n            result => {\n                this.componentDidMount();\n            })\n    }\n\n    onSubmit(event) {\n        console.log(event.currentTarget.dataset.delete);\n        event.preventDefault();\n        if (event.target.create) {\n            this.createTerm(event.target);\n        }\n        if (event.currentTarget.dataset.delete) {\n            this.deleteTerm(event.currentTarget.dataset.delete);\n        }\n    }\n\n    onParentSelect(event) {\n\n        console.log(event.target.value);\n        this.setState({\n            create: new Term({\n                parentId: event.target.value,\n                slug    : event.target.selectedOptions.item(0).dataset.slug\n            })\n        });\n    }\n\n\n    componentDidMount() {\n\n        console.log(\"I'm diMount\");\n        let apiPath = IspCpConfig.ApiRequest(\"/terms/\");\n        let location = this.props.location.pathname;\n        if (location.startsWith(\"/terms/\") && location.length > \"/terms/\".length) {\n            apiPath = IspCpConfig.ApiRequest(location);\n        }\n\n        axios.get(apiPath, {\n            params: {\n                email   : axios.defaults.params.email,\n                password: axios.defaults.params.password\n            }\n        })\n             .then(\n                 result => {\n                     console.log(\"Did mount api result : \" + JSON.stringify(result));\n                     this.setState({\n                         success: result.data.success,\n                         terms  : result.data.terms,\n                         create : this.state.create\n                     });\n                 }\n             )\n             .catch(reason => {\n                 console.log(reason)\n             })\n    }\n\n    setInitialState() {}\n\n    componentDidUpdate(prevProps) {\n        console.log(prevProps.location);\n        console.log(this.props.location);\n        if (this.props.location !== prevProps.location) {\n            this.componentDidMount();\n        }\n    }\n\n    render() {\n        console.log(\"I'm render\");\n        console.log(this.state.create);\n        // setTimeout(this.componentDidMount, this.updateTimeout);\n        if (this.state.success) {\n            const {term} = this.state.terms[0];\n            return (\n                <Box component={\"div\"}>\n                    <List>\n                        {this.state.terms.map(term=>{return(\n                            <TermsListItem key={term.id} term={term} handleDeleteTerm={this.onSubmit}></TermsListItem>\n                        )})}\n                    </List>\n                    <TermsForm\n                        term={this.state.term}\n                        slug={this.state.create.slug}\n                        parentId={this.state.create.parentId}\n                        title={this.state.create.title}\n                        children={this.state.terms}\n                        onSubmit={this.onSubmit}\n                        onChange={this.onParentSelect}\n                    />\n                </Box>\n            );\n        } else {\n            const term = this.state.terms[0];\n            return (\n                <div>\n                    <TermsForm\n                        term={this.state.terms[0]}\n                        slug={this.state.terms[0].slug}\n                        parentId={this.state.terms[0].parentId}\n                        title={this.state.terms[0].title}\n                        children={this.state.terms[0].children}\n                        onSubmit={this.onSubmit}\n                        onChange={this.onParentSelect}\n                    />\n                </div>\n            );\n        }\n    }\n}\n\nconst termsFormStyles = makeStyles(theme => ({\n    root   : {\n        flexGrow: 1,\n    },\n    paper  : {\n        height: 140,\n        width : 100,\n    },\n    control: {\n        padding: theme.spacing(2),\n    },\n}));\n\nfunction TermsForm(props) {\n    const term = props.term || {id: false};\n    const children = props.children || [];\n    const classes = termsFormStyles();\n    console.log(\"Form props : \" + JSON.stringify(props));\n\n    return (\n        <Box component={\"form\"} onSubmit={props.onSubmit} variant={\"outlined\"}>\n\n            <Grid container justify=\"flex-start\" spacing={4}>\n                <Grid key={0} item>\n                    <TextField\n                        label={\"Название\"}\n                        name={\"title\"}\n                        defaultValue={''}\n                        variant={\"standard\"}\n                    >\n                    </TextField>\n                </Grid>\n                <Grid key={1} item>\n                    <FormControl>\n                        <InputLabel shrink htmlFor=\"parent-id-select\">\n                            Родитель\n                        </InputLabel>\n                        <NativeSelect\n                            onChange={props.onChange}\n                            inputProps={{\n                                name: 'parent',\n                                id  : 'parent-id-select',\n                            }}\n                            value={props.parentId}\n                        >\n                            <option key={0} value={0} data-slug={\"root\"}>Корень</option>\n                            {term.id && <option key={term.id} value={term.id}>{term.title}</option>}\n                            {children.map(child =>\n                                <option key={child.id} value={child.id}\n                                        data-slug={slugify(child.title)}>{child.title}</option>\n                            )}\n                        </NativeSelect>\n                    </FormControl>\n                </Grid>\n                <Grid key={2} item>\n                    <Button data-create={0} type={\"submit\"} variant={\"outlined\"} color={\"primary\"}\n                            size={\"large\"}>SUBMIT</Button>\n                </Grid>\n            </Grid>\n\n            <Input type={\"hidden\"} name={\"create\"} value={0}/>\n            <Input type={\"hidden\"} name={\"slug\"} value={props.slug}/>\n\n\n        </Box>\n    );\n}\n\n\n\n","import React from \"react\";\nimport axios from \"axios\"\nimport IspCpConfig from \"../IspCpConfig\";\n\nexport default class Options extends React.Component {\n    state = {\n        success: false,\n        name: undefined,\n        value: undefined\n    }\n\n    constructor(props) {\n        super(props)\n    }\n\n    componentDidMount() {\n        axios.get(IspCpConfig.ApiRequest(\"/options/get/roles\"))\n            .then(\n                (result) => {\n                    console.log(this.state);\n                    this.setState(result.data);\n                    console.log(this.state);\n                }\n            )\n            .catch(\n                (error) => {\n                    console.log(error);\n                }\n            )\n    }\n\n    render() {\n        if (this.state.success) {\n            const {role} = JSON.parse(this.state.value.value);\n            return (\n                <div>\n                    <p>{role.id}.{role.name}[{role.access.toString()}]</p>\n                </div>\n            );\n        }\n        return '';\n    }\n\n}\n\n\n//{value.map(prop=>{<p>{prop}</p>})}\n","import React from \"react\";\nimport {BrowserRouter as Router, Link, Route} from \"react-router-dom\";\nimport Button from \"@material-ui/core/Button\";\nimport Issues from \"./Issues\";\nimport Terms from \"./Terms\";\nimport Options from \"./Options\";\n\n\nexport default function DefaultPanel() {\n    return (\n        <Router>\n            <div>\n                <Button component={Link} to=\"/\" color={\"primary\"} variant={\"contained\"}>Home</Button>\n                <Button component={Link} to=\"/issues/\" color={\"primary\"} variant={\"contained\"}>Issues</Button>\n                <Button component={Link} to=\"/terms/\" color={\"primary\"} variant={\"contained\"}>Terms</Button>\n                <Button component={Link} to=\"/options/\" color={\"primary\"} variant={\"contained\"}>Options</Button>\n\n                <hr/>\n                <Route path=\"/issues\" component={Issues}/>\n                <Route path=\"/terms\" component={Terms}/>\n                <Route path=\"/options\" component={Options}/>\n            </div>\n        </Router>\n    );\n}","import React from \"react\";\nimport axios from \"axios\";\nimport IspCpConfig from \"../IspCpConfig\";\nimport User from \"../models/User\";\nimport LoginForm from \"./LoginForm\";\nimport DefaultPanel from \"./DefaultPanel\";\n\nexport default class IspPanel extends React.Component {\n\n    constructor(props) {\n        super(props);\n        const user = User;\n        this.state = {\n            user: user\n        }\n        this.handleSubmitLoginForm = this.handleSubmitLoginForm.bind(this);\n    }\n\n    handleSubmitLoginForm(event) {\n        event.preventDefault();\n        const form = event.currentTarget;\n        const user = User;\n        user.email = form.email.value;\n        user.pass = form.pass.value;\n\n        axios.get(IspCpConfig.ApiRequest(\"/users/login\"), {\n            params: {email: user.email, password: user.pass}\n        }).then(response => {\n            user.id = response.data.item.id || undefined;\n            this.setState({\n                user: user\n            });\n        });\n    }\n\n    render() {\n        const email = this.state.user.email;\n        const pass = this.state.user.pass;\n        const id = this.state.user.id || undefined;\n        if (parseInt(id) > 0) {\n            axios.defaults.params = {\n                email: email,\n                password: pass\n            };\n            return (<DefaultPanel/>);\n        }\n        return (<LoginForm onSubmit={this.handleSubmitLoginForm} email={email} pass={pass}/>);\n    }\n\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport IspPanel from \"./componets/IspPanel\";\nimport * as serviceWorker from './serviceWorker';\nimport { createMuiTheme } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n    overrides: {\n        // Style sheet name ⚛️\n        MuiButton: {\n            // Name of the rule\n            root: {\n                // Some CSS\n                cursor: \"pointer\"\n            },\n        },\n    },\n});\n\nReactDOM.render(<IspPanel theme={theme}></IspPanel>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}